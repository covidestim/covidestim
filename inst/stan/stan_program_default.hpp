
// Code generated by stanc 9218def9
#include <stan/model/model_header.hpp>
namespace stan_program_default_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 540> locations_array__ = 
{" (found before start of program)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 239, column 2 to column 40)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 240, column 2 to column 45)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 241, column 2 to column 37)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 245, column 2 to column 41)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 246, column 2 to column 41)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 247, column 2 to column 41)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 248, column 2 to column 40)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 253, column 2 to column 47)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 254, column 2 to column 47)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 255, column 2 to column 47)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 257, column 2 to column 47)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 258, column 2 to column 42)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 259, column 2 to column 57)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 262, column 0 to column 35)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 266, column 2 to column 43)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 267, column 2 to column 43)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 269, column 2 to column 37)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 275, column 2 to column 38)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 276, column 2 to column 34)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 277, column 2 to column 45)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 278, column 2 to column 36)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 281, column 2 to column 33)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 282, column 2 to column 32)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 283, column 2 to column 29)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 284, column 2 to column 44)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 285, column 2 to column 44)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 288, column 2 to column 39)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 289, column 2 to column 40)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 290, column 2 to column 40)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 294, column 2 to column 41)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 295, column 2 to column 36)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 296, column 2 to column 36)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 300, column 2 to column 39)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 301, column 2 to column 39)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 305, column 2 to column 35)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 307, column 2 to column 30)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 308, column 2 to column 30)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 309, column 2 to column 30)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 311, column 2 to column 33)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 312, column 2 to column 33)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 313, column 2 to column 33)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 315, column 2 to column 33)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 316, column 2 to column 33)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 317, column 2 to column 33)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 319, column 2 to column 31)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 320, column 2 to column 33)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 323, column 2 to column 32)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 324, column 2 to column 32)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 328, column 2 to column 30)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 329, column 2 to column 30)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 334, column 2 to column 79)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 337, column 2 to column 73)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 338, column 2 to column 69)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 339, column 2 to column 69)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 336, column 24 to line 340, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 336, column 2 to line 340, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 348, column 2 to column 71)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 350, column 2 to column 53)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 351, column 2 to column 53)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 360, column 4 to line 363, column 61)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 364, column 4 to line 367, column 63)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 359, column 23 to line 368, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 359, column 2 to line 368, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 374, column 2 to column 60)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 381, column 2 to column 37)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 382, column 2 to column 23)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 387, column 6 to column 53)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 386, column 10 to line 388, column 5)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 385, column 6 to column 27)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 384, column 12 to line 386, column 5)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 384, column 4 to line 388, column 5)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 389, column 4 to column 46)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 390, column 4 to column 66)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 391, column 4 to column 69)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 392, column 4 to column 28)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 395, column 6 to column 20)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 393, column 23 to line 396, column 5)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 393, column 4 to line 396, column 5)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 383, column 25 to line 397, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 383, column 2 to line 397, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 417, column 2 to column 18)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 420, column 2 to line 421, column 64)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 424, column 2 to line 425, column 35)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 433, column 4 to line 434, column 62)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 432, column 25 to line 435, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 432, column 2 to line 435, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 438, column 4 to line 439, column 62)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 437, column 25 to line 440, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 437, column 2 to line 440, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 443, column 4 to line 444, column 62)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 442, column 25 to line 445, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 442, column 2 to line 445, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 456, column 4 to line 457, column 66)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 455, column 25 to line 458, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 455, column 2 to line 458, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 465, column 4 to line 466, column 44)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 464, column 25 to line 467, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 464, column 2 to line 467, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 473, column 4 to line 474, column 62)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 472, column 25 to line 475, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 472, column 2 to line 475, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 478, column 4 to line 479, column 62)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 477, column 25 to line 480, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 477, column 2 to line 480, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 485, column 4 to line 486, column 60)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 484, column 25 to line 487, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 484, column 2 to line 487, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 492, column 4 to line 493, column 78)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 491, column 25 to line 494, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 491, column 2 to line 494, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 497, column 0 to column 48)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 498, column 0 to column 37)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 514, column 4 to column 52)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 511, column 9 to line 515, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 508, column 6 to line 509, column 43)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 507, column 27 to line 510, column 5)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 507, column 4 to line 510, column 5)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 506, column 23 to line 511, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 506, column 2 to line 515, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 523, column 4 to column 54)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 522, column 9 to line 524, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 519, column 6 to line 520, column 43)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 518, column 27 to line 521, column 5)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 518, column 4 to line 521, column 5)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 517, column 23 to line 522, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 517, column 2 to line 524, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 527, column 0 to column 34)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 528, column 0 to column 34)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 533, column 2 to column 25)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 532, column 0 to line 533, column 25)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 535, column 2 to column 25)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 534, column 0 to line 535, column 25)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 655, column 2 to column 40)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 656, column 2 to column 40)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 657, column 2 to column 35)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 658, column 2 to column 33)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 659, column 2 to column 43)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 660, column 2 to column 36)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 661, column 2 to column 41)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 662, column 2 to column 37)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 663, column 2 to column 38)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 669, column 2 to column 31)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 670, column 2 to column 31)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 671, column 2 to column 32)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 672, column 2 to column 33)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 673, column 2 to column 33)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 674, column 2 to column 34)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 675, column 2 to column 36)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 676, column 2 to column 37)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 677, column 2 to column 37)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 678, column 2 to column 38)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 679, column 2 to column 40)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 680, column 2 to column 30)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 681, column 2 to column 25)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 683, column 2 to column 32)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 684, column 2 to column 39)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 685, column 2 to column 32)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 686, column 2 to column 39)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 688, column 2 to column 31)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 689, column 2 to column 38)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 690, column 2 to column 38)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 691, column 2 to column 45)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 692, column 2 to column 44)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 693, column 2 to column 51)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 696, column 2 to column 49)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 697, column 2 to column 45)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 698, column 2 to column 39)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 702, column 2 to column 18)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 703, column 2 to column 46)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 709, column 6 to column 66)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 711, column 8 to column 28)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 710, column 29 to line 712, column 7)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 710, column 6 to line 712, column 7)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 707, column 10 to line 713, column 5)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 706, column 6 to column 23)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 705, column 26 to line 707, column 5)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 705, column 4 to line 713, column 5)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 714, column 6 to column 41)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 715, column 6 to column 41)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 718, column 8 to column 61)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 719, column 8 to column 61)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 717, column 30 to line 720, column 7)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 717, column 6 to line 720, column 7)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 721, column 6 to column 75)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 722, column 6 to column 95)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 723, column 6 to column 86)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 725, column 6 to column 86)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 726, column 6 to column 107)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 727, column 6 to column 112)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 704, column 24 to line 729, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 704, column 2 to line 729, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 737, column 5 to column 18)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 738, column 5 to column 24)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 736, column 10 to line 739, column 4)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 734, column 6 to column 25)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 735, column 6 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 733, column 15 to line 736, column 4)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 733, column 4 to line 739, column 4)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 732, column 25 to line 740, column 2)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 732, column 2 to line 740, column 2)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 744, column 4 to line 745, column 79)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 743, column 24 to line 746, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 743, column 2 to line 746, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 750, column 4 to line 751, column 25)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 749, column 18 to line 752, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 749, column 2 to line 752, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 765, column 4 to column 76)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 764, column 24 to line 766, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 764, column 2 to line 766, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 782, column 6 to column 51)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 783, column 6 to column 51)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 784, column 6 to column 79)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 785, column 4 to line 786, column 50)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 787, column 4 to line 788, column 50)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 789, column 4 to column 67)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 790, column 4 to column 69)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 791, column 4 to line 792, column 47)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 793, column 4 to line 794, column 47)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 795, column 4 to column 68)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 796, column 4 to column 85)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 781, column 15 to line 797, column 9)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 770, column 6 to column 34)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 771, column 6 to column 34)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 772, column 6 to column 61)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 773, column 6 to column 53)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 774, column 4 to column 51)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 775, column 4 to column 51)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 776, column 4 to column 69)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 777, column 4 to column 52)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 778, column 4 to column 52)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 779, column 4 to column 52)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 780, column 4 to column 85)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 769, column 14 to line 781, column 9)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 769, column 4 to line 797, column 9)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 768, column 24 to line 798, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 768, column 2 to line 798, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 802, column 4 to line 803, column 41)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 801, column 25 to line 804, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 801, column 2 to line 804, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 808, column 4 to line 809, column 37)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 807, column 25 to line 810, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 807, column 2 to line 810, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 541, column 2 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 542, column 2 to column 21)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 543, column 2 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 544, column 2 to column 21)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 545, column 2 to column 23)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 546, column 2 to column 23)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 549, column 2 to column 77)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 550, column 2 to column 61)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 551, column 2 to column 70)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 552, column 2 to column 59)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 553, column 2 to column 59)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 554, column 2 to column 66)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 557, column 2 to column 70)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 558, column 2 to column 70)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 559, column 2 to column 70)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 560, column 2 to column 69)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 562, column 2 to column 70)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 565, column 2 to column 82)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 566, column 2 to column 81)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 567, column 2 to column 72)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 569, column 2 to column 74)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 570, column 2 to column 74)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 572, column 2 to column 38)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 573, column 2 to column 38)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 575, column 3 to column 53)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 581, column 6 to column 56)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 582, column 6 to column 56)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 585, column 8 to column 39)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 584, column 6 to line 585, column 39)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 587, column 8 to column 39)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 586, column 6 to line 587, column 39)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 589, column 6 to column 67)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 590, column 6 to column 67)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 580, column 23 to line 591, column 5)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 580, column 4 to line 591, column 5)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 579, column 24 to line 592, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 579, column 2 to line 592, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 596, column 4 to column 29)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 597, column 4 to column 49)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 602, column 8 to column 36)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 601, column 6 to line 602, column 36)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 607, column 8 to line 608, column 20)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 606, column 6 to line 608, column 20)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 611, column 8 to column 43)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 612, column 8 to column 61)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 610, column 16 to line 613, column 7)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 610, column 6 to line 613, column 7)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 615, column 8 to column 40)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 616, column 8 to column 58)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 614, column 18 to line 617, column 7)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 614, column 6 to line 617, column 7)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 599, column 23 to line 618, column 5)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 599, column 4 to line 618, column 5)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 595, column 20 to line 619, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 595, column 2 to line 619, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 623, column 4 to column 29)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 624, column 4 to column 49)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 629, column 8 to column 36)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 628, column 6 to line 629, column 36)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 633, column 2 to column 8)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 632, column 22 to line 634, column 1)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 632, column 0 to line 634, column 1)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 638, column 8 to line 639, column 20)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 637, column 6 to line 639, column 20)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 642, column 8 to column 43)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 643, column 8 to column 61)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 641, column 16 to line 644, column 7)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 641, column 6 to line 644, column 7)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 646, column 8 to column 40)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 647, column 8 to column 58)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 645, column 18 to line 648, column 7)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 645, column 6 to line 648, column 7)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 626, column 23 to line 649, column 5)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 626, column 4 to line 649, column 5)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 621, column 19 to line 650, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 621, column 2 to line 650, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 27, column 2 to column 32)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 28, column 2 to column 39)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 29, column 2 to column 35)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 31, column 33 to column 39)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 31, column 2 to column 41)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 32, column 33 to column 39)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 32, column 2 to column 41)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 33, column 33 to column 39)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 33, column 2 to column 41)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 34, column 2 to column 34)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 35, column 2 to column 37)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 37, column 2 to column 35)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 38, column 18 to column 27)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 38, column 2 to column 37)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 39, column 18 to column 40)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 39, column 2 to column 54)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 40, column 2 to column 43)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 41, column 2 to column 43)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 42, column 2 to column 39)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 44, column 2 to column 42)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 45, column 2 to column 42)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 46, column 2 to column 43)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 47, column 2 to column 43)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 51, column 2 to column 57)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 52, column 9 to column 29)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 52, column 30 to column 42)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 52, column 2 to column 57)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 53, column 2 to column 57)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 54, column 9 to column 29)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 54, column 30 to column 42)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 54, column 2 to column 57)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 58, column 2 to column 44)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 59, column 2 to column 44)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 60, column 2 to column 44)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 61, column 2 to column 44)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 62, column 2 to column 44)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 63, column 2 to column 44)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 64, column 2 to column 44)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 65, column 2 to column 44)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 67, column 2 to column 44)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 68, column 2 to column 44)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 69, column 2 to column 44)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 70, column 2 to column 44)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 74, column 2 to column 44)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 77, column 2 to column 36)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 78, column 2 to column 36)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 80, column 2 to column 40)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 81, column 2 to column 40)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 84, column 2 to column 39)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 87, column 2 to column 34)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 89, column 2 to column 29)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 94, column 2 to column 46)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 95, column 2 to column 46)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 96, column 2 to column 38)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 97, column 2 to column 38)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 98, column 2 to column 43)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 99, column 2 to column 43)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 100, column 2 to column 47)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 101, column 2 to column 47)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 103, column 2 to column 39)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 104, column 2 to column 39)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 106, column 2 to column 44)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 107, column 2 to column 44)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 108, column 2 to column 44)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 109, column 2 to column 44)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 110, column 2 to column 44)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 111, column 2 to column 44)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 113, column 2 to column 44)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 114, column 2 to column 44)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 117, column 2 to column 50)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 118, column 2 to column 50)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 120, column 2 to column 50)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 121, column 2 to column 50)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 123, column 2 to column 45)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 124, column 2 to column 45)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 127, column 2 to column 46)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 128, column 2 to column 46)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 129, column 2 to column 46)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 130, column 2 to column 46)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 137, column 26 to column 48)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 137, column 2 to column 64)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 138, column 26 to column 48)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 138, column 2 to column 62)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 139, column 26 to column 48)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 139, column 2 to column 61)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 140, column 26 to column 48)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 140, column 2 to column 59)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 145, column 1 to column 17)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 146, column 1 to column 11)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 147, column 11 to column 33)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 147, column 1 to column 35)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 148, column 11 to column 33)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 148, column 1 to column 35)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 151, column 8 to column 17)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 151, column 1 to column 37)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 152, column 8 to column 17)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 152, column 1 to column 37)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 153, column 8 to column 17)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 153, column 1 to column 37)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 154, column 8 to column 17)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 154, column 1 to column 37)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 156, column 8 to column 17)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 156, column 1 to column 37)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 157, column 8 to column 17)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 157, column 1 to column 37)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 159, column 8 to column 30)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 159, column 1 to column 57)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 160, column 8 to column 30)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 160, column 1 to column 57)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 167, column 2 to column 23)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 171, column 2 to column 38)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 179, column 4 to column 16)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 180, column 4 to column 28)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 178, column 9 to line 181, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 176, column 4 to column 28)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 177, column 4 to column 16)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 175, column 19 to line 178, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 175, column 2 to line 181, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 174, column 23 to line 182, column 1)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 174, column 0 to line 182, column 1)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 186, column 4 to line 188, column 65)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 189, column 4 to line 191, column 67)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 194, column 4 to line 196, column 65)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 197, column 4 to line 199, column 65)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 185, column 24 to line 200, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 185, column 2 to line 200, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 205, column 4 to line 207, column 65)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 208, column 4 to line 210, column 65)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 204, column 24 to line 211, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 204, column 2 to line 211, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 214, column 2 to column 60)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 215, column 2 to column 60)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 216, column 2 to column 60)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 217, column 2 to column 60)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 218, column 2 to column 60)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 219, column 2 to column 60)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 229, column 6 to column 52)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 230, column 6 to column 52)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 228, column 11 to line 231, column 5)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 224, column 6 to line 225, column 48)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 226, column 6 to line 227, column 48)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 223, column 19 to line 228, column 5)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 223, column 4 to line 231, column 5)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 222, column 25 to line 232, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 222, column 2 to line 232, column 3)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 241, column 9 to column 21)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 259, column 27 to column 39)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 275, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 276, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 277, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 281, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 282, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 283, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 284, column 9 to column 23)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 285, column 9 to column 23)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 288, column 9 to column 18)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 289, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 290, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 294, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 295, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 296, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 300, column 9 to column 18)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 301, column 9 to column 18)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 307, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 308, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 309, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 311, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 312, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 313, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 315, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 316, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 317, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 319, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 320, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 323, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 324, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 655, column 28 to column 38)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 656, column 28 to column 38)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 658, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 659, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 660, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 661, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 662, column 9 to column 18)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 669, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 670, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 671, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 672, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 673, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 674, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 675, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 676, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 677, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 678, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 679, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 680, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 683, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 684, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 685, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 686, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 688, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 689, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 690, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 691, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 692, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 693, column 9 to column 19)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 5, column 4 to column 11)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 6, column 4 to column 11)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 7, column 4 to column 26)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 8, column 4 to column 22)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 9, column 4 to column 20)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 10, column 4 to column 23)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 11, column 4 to column 18)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 13, column 4 to column 46)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 14, column 4 to column 22)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 15, column 4 to column 60)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 16, column 4 to column 41)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 17, column 4 to column 47)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 18, column 4 to column 39)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 19, column 4 to column 43)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 21, column 4 to column 20)",
 " (in '../covidestim/inst/stan/stan_program_default.stan', line 4, column 48 to line 22, column 3)"};


template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
solveOR(const T0__& OR, const T1__& p_inf, const T2__& p_vac,
        std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ b;
    b = DUMMY_VAR__;
    
    local_scalar_t__ a;
    a = DUMMY_VAR__;
    
    local_scalar_t__ odds_vac_not_inf;
    odds_vac_not_inf = DUMMY_VAR__;
    
    local_scalar_t__ odds_vac_inf;
    odds_vac_inf = DUMMY_VAR__;
    
    local_scalar_t__ cp_vac_inf;
    cp_vac_inf = DUMMY_VAR__;
    
    local_scalar_t__ p_vac_and_inf;
    p_vac_and_inf = DUMMY_VAR__;
    
    local_scalar_t__ p_immune;
    p_immune = DUMMY_VAR__;
    
    current_statement__ = 531;
    b = ((((1 + (OR * p_inf)) - p_inf) - (OR * p_vac)) - p_vac);
    current_statement__ = 532;
    a = (OR - (OR * p_vac));
    current_statement__ = 533;
    odds_vac_not_inf = ((-b + pow((pow(b, 2) + ((4 * p_vac) * a)), 0.5)) /
                         (2 * a));
    current_statement__ = 534;
    odds_vac_inf = (odds_vac_not_inf * OR);
    current_statement__ = 535;
    cp_vac_inf = (odds_vac_inf / (1 + odds_vac_inf));
    current_statement__ = 536;
    p_vac_and_inf = (cp_vac_inf * p_inf);
    current_statement__ = 537;
    p_immune = ((p_inf + p_vac) - p_vac_and_inf);
    current_statement__ = 538;
    return p_immune;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}

struct solveOR_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& OR, const T1__& p_inf, const T2__& p_vac,
           std::ostream* pstream__)  const 
{
return solveOR(OR, p_inf, p_vac, pstream__);
}
};

class stan_program_default_model final : public model_base_crtp<stan_program_default_model> {

 private:
  int N_days;
  int N_days_before;
  int Max_delay;
  std::vector<int> obs_cas;
  std::vector<int> obs_die;
  std::vector<double> obs_vac;
  double pop_size;
  double pop_under12;
  int N_ifr_adj;
  Eigen::Matrix<double, -1, 1> ifr_adj__;
  Eigen::Matrix<double, -1, 1> ifr_vac_adj__;
  double pri_ifr_decl_OR_a;
  double pri_ifr_decl_OR_b;
  double ifr_adj_fixed;
  double infect_dist_rate;
  double infect_dist_shap;
  double seropos_dist_rate;
  double seropos_dist_shap;
  int N_spl_par_rt;
  Eigen::Matrix<double, -1, -1> spl_basis_rt__;
  int N_spl_par_dx;
  Eigen::Matrix<double, -1, -1> spl_basis_dx__;
  double inf_prg_delay_shap;
  double inf_prg_delay_rate;
  double asy_rec_delay_shap;
  double asy_rec_delay_rate;
  double sym_prg_delay_shap;
  double sym_prg_delay_rate;
  double sev_prg_delay_shap;
  double sev_prg_delay_rate;
  double cas_rep_delay_shap;
  double cas_rep_delay_rate;
  double die_rep_delay_shap;
  double die_rep_delay_rate;
  int pre_period_zero;
  int cas_yes;
  int die_yes;
  int obs_cas_rep;
  int obs_die_rep;
  int N_days_av;
  int ndays_recent_imm;
  int lastDeathDate;
  double pri_log_new_inf_0_mu;
  double pri_log_new_inf_0_sd;
  double pri_logRt_mu;
  double pri_logRt_sd;
  double pri_serial_i_shap;
  double pri_serial_i_rate;
  double pri_deriv1_spl_par_sd;
  double pri_deriv2_spl_par_sd;
  double pri_log_or_mu;
  double pri_log_or_sd;
  double pri_p_sym_if_inf_a;
  double pri_p_sym_if_inf_b;
  double pri_p_sev_if_sym_a;
  double pri_p_sev_if_sym_b;
  double pri_p_die_if_sev_a;
  double pri_p_die_if_sev_b;
  double pri_p_die_if_inf_a;
  double pri_p_die_if_inf_b;
  double pri_rr_diag_asy_vs_sym_a;
  double pri_rr_diag_asy_vs_sym_b;
  double pri_rr_diag_sym_vs_sev_a;
  double pri_rr_diag_sym_vs_sev_b;
  double pri_p_diag_if_sev_a;
  double pri_p_diag_if_sev_b;
  double scale_dx_delay_sym_a;
  double scale_dx_delay_sym_b;
  double scale_dx_delay_sev_a;
  double scale_dx_delay_sev_b;
  Eigen::Matrix<double, -1, 1> waning_vacinf__;
  Eigen::Matrix<double, -1, 1> waning_both__;
  Eigen::Matrix<double, -1, 1> sev_vacinf__;
  Eigen::Matrix<double, -1, 1> sev_both__;
  int N_days_tot;
  int nda0;
  std::vector<int> idx1;
  std::vector<int> idx2;
  Eigen::Matrix<double, -1, 1> inf_prg_delay_rv__;
  Eigen::Matrix<double, -1, 1> asy_rec_delay_rv__;
  Eigen::Matrix<double, -1, 1> sym_prg_delay_rv__;
  Eigen::Matrix<double, -1, 1> sev_prg_delay_rv__;
  Eigen::Matrix<double, -1, 1> cas_rep_delay_rv__;
  Eigen::Matrix<double, -1, 1> die_rep_delay_rv__;
  Eigen::Matrix<double, -1, 1> cas_cum_report_delay_rv__;
  Eigen::Matrix<double, -1, 1> die_cum_report_delay_rv__;
  int deriv1_spl_par_rt_1dim__;
  int deriv2_spl_par_rt_1dim__; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> ifr_adj{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> ifr_vac_adj{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> spl_basis_rt{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> spl_basis_dx{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> waning_vacinf{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> waning_both{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> sev_vacinf{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> sev_both{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> inf_prg_delay_rv{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> asy_rec_delay_rv{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> sym_prg_delay_rv{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> sev_prg_delay_rv{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> cas_rep_delay_rv{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> die_rep_delay_rv{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> cas_cum_report_delay_rv{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> die_cum_report_delay_rv{nullptr, 0};
 
 public:
  ~stan_program_default_model() { }
  
  inline std::string model_name() const final { return "stan_program_default_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 9218def9", "stancflags = --debug-parse"};
  }
  
  
  stan_program_default_model(stan::io::var_context& context__,
                             unsigned int random_seed__ = 0,
                             std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "stan_program_default_model_namespace::stan_program_default_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 319;
      context__.validate_dims("data initialization","N_days","int",
           std::vector<size_t>{});
      N_days = std::numeric_limits<int>::min();
      
      current_statement__ = 319;
      N_days = context__.vals_i("N_days")[(1 - 1)];
      current_statement__ = 319;
      check_greater_or_equal(function__, "N_days", N_days, 0);
      current_statement__ = 320;
      context__.validate_dims("data initialization","N_days_before","int",
           std::vector<size_t>{});
      N_days_before = std::numeric_limits<int>::min();
      
      current_statement__ = 320;
      N_days_before = context__.vals_i("N_days_before")[(1 - 1)];
      current_statement__ = 320;
      check_greater_or_equal(function__, "N_days_before", N_days_before, 0);
      current_statement__ = 321;
      context__.validate_dims("data initialization","Max_delay","int",
           std::vector<size_t>{});
      Max_delay = std::numeric_limits<int>::min();
      
      current_statement__ = 321;
      Max_delay = context__.vals_i("Max_delay")[(1 - 1)];
      current_statement__ = 321;
      check_greater_or_equal(function__, "Max_delay", Max_delay, 0);
      current_statement__ = 322;
      validate_non_negative_index("obs_cas", "N_days", N_days);
      current_statement__ = 323;
      context__.validate_dims("data initialization","obs_cas","int",
           std::vector<size_t>{static_cast<size_t>(N_days)});
      obs_cas = std::vector<int>(N_days, std::numeric_limits<int>::min());
      
      current_statement__ = 323;
      obs_cas = context__.vals_i("obs_cas");
      current_statement__ = 323;
      for (int sym1__ = 1; sym1__ <= N_days; ++sym1__) {
        current_statement__ = 323;
        check_greater_or_equal(function__, "obs_cas[sym1__]",
                               obs_cas[(sym1__ - 1)], 0);
      }
      current_statement__ = 324;
      validate_non_negative_index("obs_die", "N_days", N_days);
      current_statement__ = 325;
      context__.validate_dims("data initialization","obs_die","int",
           std::vector<size_t>{static_cast<size_t>(N_days)});
      obs_die = std::vector<int>(N_days, std::numeric_limits<int>::min());
      
      current_statement__ = 325;
      obs_die = context__.vals_i("obs_die");
      current_statement__ = 325;
      for (int sym1__ = 1; sym1__ <= N_days; ++sym1__) {
        current_statement__ = 325;
        check_greater_or_equal(function__, "obs_die[sym1__]",
                               obs_die[(sym1__ - 1)], 0);
      }
      current_statement__ = 326;
      validate_non_negative_index("obs_vac", "N_days", N_days);
      current_statement__ = 327;
      context__.validate_dims("data initialization","obs_vac","double",
           std::vector<size_t>{static_cast<size_t>(N_days)});
      obs_vac = std::vector<double>(N_days, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 327;
      obs_vac = context__.vals_r("obs_vac");
      current_statement__ = 327;
      for (int sym1__ = 1; sym1__ <= N_days; ++sym1__) {
        current_statement__ = 327;
        check_greater_or_equal(function__, "obs_vac[sym1__]",
                               obs_vac[(sym1__ - 1)], 0);
      }
      current_statement__ = 327;
      for (int sym1__ = 1; sym1__ <= N_days; ++sym1__) {
        current_statement__ = 327;
        check_less_or_equal(function__, "obs_vac[sym1__]",
                            obs_vac[(sym1__ - 1)], 1);
      }
      current_statement__ = 328;
      context__.validate_dims("data initialization","pop_size","double",
           std::vector<size_t>{});
      pop_size = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 328;
      pop_size = context__.vals_r("pop_size")[(1 - 1)];
      current_statement__ = 328;
      check_greater_or_equal(function__, "pop_size", pop_size, 0);
      current_statement__ = 329;
      context__.validate_dims("data initialization","pop_under12","double",
           std::vector<size_t>{});
      pop_under12 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 329;
      pop_under12 = context__.vals_r("pop_under12")[(1 - 1)];
      current_statement__ = 329;
      check_greater_or_equal(function__, "pop_under12", pop_under12, 0);
      current_statement__ = 329;
      check_less_or_equal(function__, "pop_under12", pop_under12, 1);
      current_statement__ = 330;
      context__.validate_dims("data initialization","N_ifr_adj","int",
           std::vector<size_t>{});
      N_ifr_adj = std::numeric_limits<int>::min();
      
      current_statement__ = 330;
      N_ifr_adj = context__.vals_i("N_ifr_adj")[(1 - 1)];
      current_statement__ = 330;
      check_greater_or_equal(function__, "N_ifr_adj", N_ifr_adj, 0);
      current_statement__ = 331;
      validate_non_negative_index("ifr_adj", "N_ifr_adj", N_ifr_adj);
      current_statement__ = 332;
      context__.validate_dims("data initialization","ifr_adj","double",
           std::vector<size_t>{static_cast<size_t>(N_ifr_adj)});
      ifr_adj__ = Eigen::Matrix<double, -1, 1>(N_ifr_adj);
      new (&ifr_adj) Eigen::Map<Eigen::Matrix<double, -1, 1>>(ifr_adj__.data(), N_ifr_adj);
      
      
      {
        std::vector<local_scalar_t__> ifr_adj_flat__;
        current_statement__ = 332;
        ifr_adj_flat__ = context__.vals_r("ifr_adj");
        current_statement__ = 332;
        pos__ = 1;
        current_statement__ = 332;
        for (int sym1__ = 1; sym1__ <= N_ifr_adj; ++sym1__) {
          current_statement__ = 332;
          assign(ifr_adj, ifr_adj_flat__[(pos__ - 1)],
            "assigning variable ifr_adj", index_uni(sym1__));
          current_statement__ = 332;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 332;
      for (int sym1__ = 1; sym1__ <= N_ifr_adj; ++sym1__) {
        current_statement__ = 332;
        check_greater_or_equal(function__, "ifr_adj[sym1__]",
                               ifr_adj[(sym1__ - 1)], 0);
      }
      current_statement__ = 333;
      validate_non_negative_index("ifr_vac_adj", "N_days + N_days_before",
                                  (N_days + N_days_before));
      current_statement__ = 334;
      context__.validate_dims("data initialization","ifr_vac_adj","double",
           std::vector<size_t>{static_cast<size_t>((N_days + N_days_before))});
      ifr_vac_adj__ = Eigen::Matrix<double, -1, 1>((N_days + N_days_before));
      new (&ifr_vac_adj) Eigen::Map<Eigen::Matrix<double, -1, 1>>(ifr_vac_adj__.data(), 
        (N_days + N_days_before));
      
      
      {
        std::vector<local_scalar_t__> ifr_vac_adj_flat__;
        current_statement__ = 334;
        ifr_vac_adj_flat__ = context__.vals_r("ifr_vac_adj");
        current_statement__ = 334;
        pos__ = 1;
        current_statement__ = 334;
        for (int sym1__ = 1; sym1__ <= (N_days + N_days_before); ++sym1__) {
          current_statement__ = 334;
          assign(ifr_vac_adj, ifr_vac_adj_flat__[(pos__ - 1)],
            "assigning variable ifr_vac_adj", index_uni(sym1__));
          current_statement__ = 334;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 334;
      for (int sym1__ = 1; sym1__ <= (N_days + N_days_before); ++sym1__) {
        current_statement__ = 334;
        check_greater_or_equal(function__, "ifr_vac_adj[sym1__]",
                               ifr_vac_adj[(sym1__ - 1)], 0);
      }
      current_statement__ = 335;
      context__.validate_dims("data initialization","pri_ifr_decl_OR_a",
          "double", std::vector<size_t>{});
      pri_ifr_decl_OR_a = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 335;
      pri_ifr_decl_OR_a = context__.vals_r("pri_ifr_decl_OR_a")[(1 - 1)];
      current_statement__ = 335;
      check_greater_or_equal(function__, "pri_ifr_decl_OR_a",
                             pri_ifr_decl_OR_a, 0);
      current_statement__ = 336;
      context__.validate_dims("data initialization","pri_ifr_decl_OR_b",
          "double", std::vector<size_t>{});
      pri_ifr_decl_OR_b = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 336;
      pri_ifr_decl_OR_b = context__.vals_r("pri_ifr_decl_OR_b")[(1 - 1)];
      current_statement__ = 336;
      check_greater_or_equal(function__, "pri_ifr_decl_OR_b",
                             pri_ifr_decl_OR_b, 0);
      current_statement__ = 337;
      context__.validate_dims("data initialization","ifr_adj_fixed","double",
           std::vector<size_t>{});
      ifr_adj_fixed = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 337;
      ifr_adj_fixed = context__.vals_r("ifr_adj_fixed")[(1 - 1)];
      current_statement__ = 337;
      check_greater_or_equal(function__, "ifr_adj_fixed", ifr_adj_fixed, 0);
      current_statement__ = 338;
      context__.validate_dims("data initialization","infect_dist_rate",
          "double", std::vector<size_t>{});
      infect_dist_rate = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 338;
      infect_dist_rate = context__.vals_r("infect_dist_rate")[(1 - 1)];
      current_statement__ = 338;
      check_greater_or_equal(function__, "infect_dist_rate",
                             infect_dist_rate, 0);
      current_statement__ = 339;
      context__.validate_dims("data initialization","infect_dist_shap",
          "double", std::vector<size_t>{});
      infect_dist_shap = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 339;
      infect_dist_shap = context__.vals_r("infect_dist_shap")[(1 - 1)];
      current_statement__ = 339;
      check_greater_or_equal(function__, "infect_dist_shap",
                             infect_dist_shap, 0);
      current_statement__ = 340;
      context__.validate_dims("data initialization","seropos_dist_rate",
          "double", std::vector<size_t>{});
      seropos_dist_rate = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 340;
      seropos_dist_rate = context__.vals_r("seropos_dist_rate")[(1 - 1)];
      current_statement__ = 340;
      check_greater_or_equal(function__, "seropos_dist_rate",
                             seropos_dist_rate, 0);
      current_statement__ = 341;
      context__.validate_dims("data initialization","seropos_dist_shap",
          "double", std::vector<size_t>{});
      seropos_dist_shap = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 341;
      seropos_dist_shap = context__.vals_r("seropos_dist_shap")[(1 - 1)];
      current_statement__ = 341;
      check_greater_or_equal(function__, "seropos_dist_shap",
                             seropos_dist_shap, 0);
      current_statement__ = 342;
      context__.validate_dims("data initialization","N_spl_par_rt","int",
           std::vector<size_t>{});
      N_spl_par_rt = std::numeric_limits<int>::min();
      
      current_statement__ = 342;
      N_spl_par_rt = context__.vals_i("N_spl_par_rt")[(1 - 1)];
      current_statement__ = 342;
      check_greater_or_equal(function__, "N_spl_par_rt", N_spl_par_rt, 0);
      current_statement__ = 343;
      validate_non_negative_index("spl_basis_rt", "N_days + N_days_before",
                                  (N_days + N_days_before));
      current_statement__ = 344;
      validate_non_negative_index("spl_basis_rt", "N_spl_par_rt",
                                  N_spl_par_rt);
      current_statement__ = 345;
      context__.validate_dims("data initialization","spl_basis_rt","double",
           std::vector<size_t>{static_cast<size_t>((N_days + N_days_before)),
            static_cast<size_t>(N_spl_par_rt)});
      spl_basis_rt__ = Eigen::Matrix<double, -1, -1>((N_days + N_days_before), N_spl_par_rt);
      new (&spl_basis_rt) Eigen::Map<Eigen::Matrix<double, -1, -1>>(spl_basis_rt__.data(), 
        (N_days + N_days_before), N_spl_par_rt);
      
      
      {
        std::vector<local_scalar_t__> spl_basis_rt_flat__;
        current_statement__ = 345;
        spl_basis_rt_flat__ = context__.vals_r("spl_basis_rt");
        current_statement__ = 345;
        pos__ = 1;
        current_statement__ = 345;
        for (int sym1__ = 1; sym1__ <= N_spl_par_rt; ++sym1__) {
          current_statement__ = 345;
          for (int sym2__ = 1; sym2__ <= (N_days + N_days_before); ++sym2__) {
            current_statement__ = 345;
            assign(spl_basis_rt, spl_basis_rt_flat__[(pos__ - 1)],
              "assigning variable spl_basis_rt", index_uni(sym2__),
                                                   index_uni(sym1__));
            current_statement__ = 345;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 346;
      context__.validate_dims("data initialization","N_spl_par_dx","int",
           std::vector<size_t>{});
      N_spl_par_dx = std::numeric_limits<int>::min();
      
      current_statement__ = 346;
      N_spl_par_dx = context__.vals_i("N_spl_par_dx")[(1 - 1)];
      current_statement__ = 346;
      check_greater_or_equal(function__, "N_spl_par_dx", N_spl_par_dx, 0);
      current_statement__ = 347;
      validate_non_negative_index("spl_basis_dx", "N_days + N_days_before",
                                  (N_days + N_days_before));
      current_statement__ = 348;
      validate_non_negative_index("spl_basis_dx", "N_spl_par_dx",
                                  N_spl_par_dx);
      current_statement__ = 349;
      context__.validate_dims("data initialization","spl_basis_dx","double",
           std::vector<size_t>{static_cast<size_t>((N_days + N_days_before)),
            static_cast<size_t>(N_spl_par_dx)});
      spl_basis_dx__ = Eigen::Matrix<double, -1, -1>((N_days + N_days_before), N_spl_par_dx);
      new (&spl_basis_dx) Eigen::Map<Eigen::Matrix<double, -1, -1>>(spl_basis_dx__.data(), 
        (N_days + N_days_before), N_spl_par_dx);
      
      
      {
        std::vector<local_scalar_t__> spl_basis_dx_flat__;
        current_statement__ = 349;
        spl_basis_dx_flat__ = context__.vals_r("spl_basis_dx");
        current_statement__ = 349;
        pos__ = 1;
        current_statement__ = 349;
        for (int sym1__ = 1; sym1__ <= N_spl_par_dx; ++sym1__) {
          current_statement__ = 349;
          for (int sym2__ = 1; sym2__ <= (N_days + N_days_before); ++sym2__) {
            current_statement__ = 349;
            assign(spl_basis_dx, spl_basis_dx_flat__[(pos__ - 1)],
              "assigning variable spl_basis_dx", index_uni(sym2__),
                                                   index_uni(sym1__));
            current_statement__ = 349;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 350;
      context__.validate_dims("data initialization","inf_prg_delay_shap",
          "double", std::vector<size_t>{});
      inf_prg_delay_shap = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 350;
      inf_prg_delay_shap = context__.vals_r("inf_prg_delay_shap")[(1 - 1)];
      current_statement__ = 350;
      check_greater_or_equal(function__, "inf_prg_delay_shap",
                             inf_prg_delay_shap, 0);
      current_statement__ = 351;
      context__.validate_dims("data initialization","inf_prg_delay_rate",
          "double", std::vector<size_t>{});
      inf_prg_delay_rate = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 351;
      inf_prg_delay_rate = context__.vals_r("inf_prg_delay_rate")[(1 - 1)];
      current_statement__ = 351;
      check_greater_or_equal(function__, "inf_prg_delay_rate",
                             inf_prg_delay_rate, 0);
      current_statement__ = 352;
      context__.validate_dims("data initialization","asy_rec_delay_shap",
          "double", std::vector<size_t>{});
      asy_rec_delay_shap = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 352;
      asy_rec_delay_shap = context__.vals_r("asy_rec_delay_shap")[(1 - 1)];
      current_statement__ = 352;
      check_greater_or_equal(function__, "asy_rec_delay_shap",
                             asy_rec_delay_shap, 0);
      current_statement__ = 353;
      context__.validate_dims("data initialization","asy_rec_delay_rate",
          "double", std::vector<size_t>{});
      asy_rec_delay_rate = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 353;
      asy_rec_delay_rate = context__.vals_r("asy_rec_delay_rate")[(1 - 1)];
      current_statement__ = 353;
      check_greater_or_equal(function__, "asy_rec_delay_rate",
                             asy_rec_delay_rate, 0);
      current_statement__ = 354;
      context__.validate_dims("data initialization","sym_prg_delay_shap",
          "double", std::vector<size_t>{});
      sym_prg_delay_shap = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 354;
      sym_prg_delay_shap = context__.vals_r("sym_prg_delay_shap")[(1 - 1)];
      current_statement__ = 354;
      check_greater_or_equal(function__, "sym_prg_delay_shap",
                             sym_prg_delay_shap, 0);
      current_statement__ = 355;
      context__.validate_dims("data initialization","sym_prg_delay_rate",
          "double", std::vector<size_t>{});
      sym_prg_delay_rate = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 355;
      sym_prg_delay_rate = context__.vals_r("sym_prg_delay_rate")[(1 - 1)];
      current_statement__ = 355;
      check_greater_or_equal(function__, "sym_prg_delay_rate",
                             sym_prg_delay_rate, 0);
      current_statement__ = 356;
      context__.validate_dims("data initialization","sev_prg_delay_shap",
          "double", std::vector<size_t>{});
      sev_prg_delay_shap = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 356;
      sev_prg_delay_shap = context__.vals_r("sev_prg_delay_shap")[(1 - 1)];
      current_statement__ = 356;
      check_greater_or_equal(function__, "sev_prg_delay_shap",
                             sev_prg_delay_shap, 0);
      current_statement__ = 357;
      context__.validate_dims("data initialization","sev_prg_delay_rate",
          "double", std::vector<size_t>{});
      sev_prg_delay_rate = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 357;
      sev_prg_delay_rate = context__.vals_r("sev_prg_delay_rate")[(1 - 1)];
      current_statement__ = 357;
      check_greater_or_equal(function__, "sev_prg_delay_rate",
                             sev_prg_delay_rate, 0);
      current_statement__ = 358;
      context__.validate_dims("data initialization","cas_rep_delay_shap",
          "double", std::vector<size_t>{});
      cas_rep_delay_shap = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 358;
      cas_rep_delay_shap = context__.vals_r("cas_rep_delay_shap")[(1 - 1)];
      current_statement__ = 358;
      check_greater_or_equal(function__, "cas_rep_delay_shap",
                             cas_rep_delay_shap, 0);
      current_statement__ = 359;
      context__.validate_dims("data initialization","cas_rep_delay_rate",
          "double", std::vector<size_t>{});
      cas_rep_delay_rate = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 359;
      cas_rep_delay_rate = context__.vals_r("cas_rep_delay_rate")[(1 - 1)];
      current_statement__ = 359;
      check_greater_or_equal(function__, "cas_rep_delay_rate",
                             cas_rep_delay_rate, 0);
      current_statement__ = 360;
      context__.validate_dims("data initialization","die_rep_delay_shap",
          "double", std::vector<size_t>{});
      die_rep_delay_shap = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 360;
      die_rep_delay_shap = context__.vals_r("die_rep_delay_shap")[(1 - 1)];
      current_statement__ = 360;
      check_greater_or_equal(function__, "die_rep_delay_shap",
                             die_rep_delay_shap, 0);
      current_statement__ = 361;
      context__.validate_dims("data initialization","die_rep_delay_rate",
          "double", std::vector<size_t>{});
      die_rep_delay_rate = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 361;
      die_rep_delay_rate = context__.vals_r("die_rep_delay_rate")[(1 - 1)];
      current_statement__ = 361;
      check_greater_or_equal(function__, "die_rep_delay_rate",
                             die_rep_delay_rate, 0);
      current_statement__ = 362;
      context__.validate_dims("data initialization","pre_period_zero","int",
           std::vector<size_t>{});
      pre_period_zero = std::numeric_limits<int>::min();
      
      current_statement__ = 362;
      pre_period_zero = context__.vals_i("pre_period_zero")[(1 - 1)];
      current_statement__ = 362;
      check_greater_or_equal(function__, "pre_period_zero", pre_period_zero,
                             0);
      current_statement__ = 362;
      check_less_or_equal(function__, "pre_period_zero", pre_period_zero, 1);
      current_statement__ = 363;
      context__.validate_dims("data initialization","cas_yes","int",
           std::vector<size_t>{});
      cas_yes = std::numeric_limits<int>::min();
      
      current_statement__ = 363;
      cas_yes = context__.vals_i("cas_yes")[(1 - 1)];
      current_statement__ = 363;
      check_greater_or_equal(function__, "cas_yes", cas_yes, 0);
      current_statement__ = 363;
      check_less_or_equal(function__, "cas_yes", cas_yes, 1);
      current_statement__ = 364;
      context__.validate_dims("data initialization","die_yes","int",
           std::vector<size_t>{});
      die_yes = std::numeric_limits<int>::min();
      
      current_statement__ = 364;
      die_yes = context__.vals_i("die_yes")[(1 - 1)];
      current_statement__ = 364;
      check_greater_or_equal(function__, "die_yes", die_yes, 0);
      current_statement__ = 364;
      check_less_or_equal(function__, "die_yes", die_yes, 1);
      current_statement__ = 365;
      context__.validate_dims("data initialization","obs_cas_rep","int",
           std::vector<size_t>{});
      obs_cas_rep = std::numeric_limits<int>::min();
      
      current_statement__ = 365;
      obs_cas_rep = context__.vals_i("obs_cas_rep")[(1 - 1)];
      current_statement__ = 365;
      check_greater_or_equal(function__, "obs_cas_rep", obs_cas_rep, 0);
      current_statement__ = 365;
      check_less_or_equal(function__, "obs_cas_rep", obs_cas_rep, 1);
      current_statement__ = 366;
      context__.validate_dims("data initialization","obs_die_rep","int",
           std::vector<size_t>{});
      obs_die_rep = std::numeric_limits<int>::min();
      
      current_statement__ = 366;
      obs_die_rep = context__.vals_i("obs_die_rep")[(1 - 1)];
      current_statement__ = 366;
      check_greater_or_equal(function__, "obs_die_rep", obs_die_rep, 0);
      current_statement__ = 366;
      check_less_or_equal(function__, "obs_die_rep", obs_die_rep, 1);
      current_statement__ = 367;
      context__.validate_dims("data initialization","N_days_av","int",
           std::vector<size_t>{});
      N_days_av = std::numeric_limits<int>::min();
      
      current_statement__ = 367;
      N_days_av = context__.vals_i("N_days_av")[(1 - 1)];
      current_statement__ = 367;
      check_greater_or_equal(function__, "N_days_av", N_days_av, 1);
      current_statement__ = 367;
      check_less_or_equal(function__, "N_days_av", N_days_av, 10);
      current_statement__ = 368;
      context__.validate_dims("data initialization","ndays_recent_imm","int",
           std::vector<size_t>{});
      ndays_recent_imm = std::numeric_limits<int>::min();
      
      current_statement__ = 368;
      ndays_recent_imm = context__.vals_i("ndays_recent_imm")[(1 - 1)];
      current_statement__ = 368;
      check_greater_or_equal(function__, "ndays_recent_imm",
                             ndays_recent_imm, 1);
      current_statement__ = 369;
      context__.validate_dims("data initialization","lastDeathDate","int",
           std::vector<size_t>{});
      lastDeathDate = std::numeric_limits<int>::min();
      
      current_statement__ = 369;
      lastDeathDate = context__.vals_i("lastDeathDate")[(1 - 1)];
      current_statement__ = 369;
      check_greater_or_equal(function__, "lastDeathDate", lastDeathDate, 0);
      current_statement__ = 370;
      context__.validate_dims("data initialization","pri_log_new_inf_0_mu",
          "double", std::vector<size_t>{});
      pri_log_new_inf_0_mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 370;
      pri_log_new_inf_0_mu = context__.vals_r("pri_log_new_inf_0_mu")[
          (1 - 1)];
      current_statement__ = 371;
      context__.validate_dims("data initialization","pri_log_new_inf_0_sd",
          "double", std::vector<size_t>{});
      pri_log_new_inf_0_sd = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 371;
      pri_log_new_inf_0_sd = context__.vals_r("pri_log_new_inf_0_sd")[
          (1 - 1)];
      current_statement__ = 371;
      check_greater_or_equal(function__, "pri_log_new_inf_0_sd",
                             pri_log_new_inf_0_sd, 0);
      current_statement__ = 372;
      context__.validate_dims("data initialization","pri_logRt_mu","double",
           std::vector<size_t>{});
      pri_logRt_mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 372;
      pri_logRt_mu = context__.vals_r("pri_logRt_mu")[(1 - 1)];
      current_statement__ = 373;
      context__.validate_dims("data initialization","pri_logRt_sd","double",
           std::vector<size_t>{});
      pri_logRt_sd = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 373;
      pri_logRt_sd = context__.vals_r("pri_logRt_sd")[(1 - 1)];
      current_statement__ = 373;
      check_greater_or_equal(function__, "pri_logRt_sd", pri_logRt_sd, 0);
      current_statement__ = 374;
      context__.validate_dims("data initialization","pri_serial_i_shap",
          "double", std::vector<size_t>{});
      pri_serial_i_shap = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 374;
      pri_serial_i_shap = context__.vals_r("pri_serial_i_shap")[(1 - 1)];
      current_statement__ = 374;
      check_greater_or_equal(function__, "pri_serial_i_shap",
                             pri_serial_i_shap, 0);
      current_statement__ = 375;
      context__.validate_dims("data initialization","pri_serial_i_rate",
          "double", std::vector<size_t>{});
      pri_serial_i_rate = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 375;
      pri_serial_i_rate = context__.vals_r("pri_serial_i_rate")[(1 - 1)];
      current_statement__ = 375;
      check_greater_or_equal(function__, "pri_serial_i_rate",
                             pri_serial_i_rate, 0);
      current_statement__ = 376;
      context__.validate_dims("data initialization","pri_deriv1_spl_par_sd",
          "double", std::vector<size_t>{});
      pri_deriv1_spl_par_sd = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 376;
      pri_deriv1_spl_par_sd = context__.vals_r("pri_deriv1_spl_par_sd")[
          (1 - 1)];
      current_statement__ = 376;
      check_greater_or_equal(function__, "pri_deriv1_spl_par_sd",
                             pri_deriv1_spl_par_sd, 0);
      current_statement__ = 377;
      context__.validate_dims("data initialization","pri_deriv2_spl_par_sd",
          "double", std::vector<size_t>{});
      pri_deriv2_spl_par_sd = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 377;
      pri_deriv2_spl_par_sd = context__.vals_r("pri_deriv2_spl_par_sd")[
          (1 - 1)];
      current_statement__ = 377;
      check_greater_or_equal(function__, "pri_deriv2_spl_par_sd",
                             pri_deriv2_spl_par_sd, 0);
      current_statement__ = 378;
      context__.validate_dims("data initialization","pri_log_or_mu","double",
           std::vector<size_t>{});
      pri_log_or_mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 378;
      pri_log_or_mu = context__.vals_r("pri_log_or_mu")[(1 - 1)];
      current_statement__ = 379;
      context__.validate_dims("data initialization","pri_log_or_sd","double",
           std::vector<size_t>{});
      pri_log_or_sd = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 379;
      pri_log_or_sd = context__.vals_r("pri_log_or_sd")[(1 - 1)];
      current_statement__ = 379;
      check_greater_or_equal(function__, "pri_log_or_sd", pri_log_or_sd, 0);
      current_statement__ = 380;
      context__.validate_dims("data initialization","pri_p_sym_if_inf_a",
          "double", std::vector<size_t>{});
      pri_p_sym_if_inf_a = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 380;
      pri_p_sym_if_inf_a = context__.vals_r("pri_p_sym_if_inf_a")[(1 - 1)];
      current_statement__ = 380;
      check_greater_or_equal(function__, "pri_p_sym_if_inf_a",
                             pri_p_sym_if_inf_a, 0);
      current_statement__ = 381;
      context__.validate_dims("data initialization","pri_p_sym_if_inf_b",
          "double", std::vector<size_t>{});
      pri_p_sym_if_inf_b = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 381;
      pri_p_sym_if_inf_b = context__.vals_r("pri_p_sym_if_inf_b")[(1 - 1)];
      current_statement__ = 381;
      check_greater_or_equal(function__, "pri_p_sym_if_inf_b",
                             pri_p_sym_if_inf_b, 0);
      current_statement__ = 382;
      context__.validate_dims("data initialization","pri_p_sev_if_sym_a",
          "double", std::vector<size_t>{});
      pri_p_sev_if_sym_a = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 382;
      pri_p_sev_if_sym_a = context__.vals_r("pri_p_sev_if_sym_a")[(1 - 1)];
      current_statement__ = 382;
      check_greater_or_equal(function__, "pri_p_sev_if_sym_a",
                             pri_p_sev_if_sym_a, 0);
      current_statement__ = 383;
      context__.validate_dims("data initialization","pri_p_sev_if_sym_b",
          "double", std::vector<size_t>{});
      pri_p_sev_if_sym_b = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 383;
      pri_p_sev_if_sym_b = context__.vals_r("pri_p_sev_if_sym_b")[(1 - 1)];
      current_statement__ = 383;
      check_greater_or_equal(function__, "pri_p_sev_if_sym_b",
                             pri_p_sev_if_sym_b, 0);
      current_statement__ = 384;
      context__.validate_dims("data initialization","pri_p_die_if_sev_a",
          "double", std::vector<size_t>{});
      pri_p_die_if_sev_a = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 384;
      pri_p_die_if_sev_a = context__.vals_r("pri_p_die_if_sev_a")[(1 - 1)];
      current_statement__ = 384;
      check_greater_or_equal(function__, "pri_p_die_if_sev_a",
                             pri_p_die_if_sev_a, 0);
      current_statement__ = 385;
      context__.validate_dims("data initialization","pri_p_die_if_sev_b",
          "double", std::vector<size_t>{});
      pri_p_die_if_sev_b = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 385;
      pri_p_die_if_sev_b = context__.vals_r("pri_p_die_if_sev_b")[(1 - 1)];
      current_statement__ = 385;
      check_greater_or_equal(function__, "pri_p_die_if_sev_b",
                             pri_p_die_if_sev_b, 0);
      current_statement__ = 386;
      context__.validate_dims("data initialization","pri_p_die_if_inf_a",
          "double", std::vector<size_t>{});
      pri_p_die_if_inf_a = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 386;
      pri_p_die_if_inf_a = context__.vals_r("pri_p_die_if_inf_a")[(1 - 1)];
      current_statement__ = 386;
      check_greater_or_equal(function__, "pri_p_die_if_inf_a",
                             pri_p_die_if_inf_a, 0);
      current_statement__ = 387;
      context__.validate_dims("data initialization","pri_p_die_if_inf_b",
          "double", std::vector<size_t>{});
      pri_p_die_if_inf_b = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 387;
      pri_p_die_if_inf_b = context__.vals_r("pri_p_die_if_inf_b")[(1 - 1)];
      current_statement__ = 387;
      check_greater_or_equal(function__, "pri_p_die_if_inf_b",
                             pri_p_die_if_inf_b, 0);
      current_statement__ = 388;
      context__.validate_dims("data initialization",
          "pri_rr_diag_asy_vs_sym_a","double", std::vector<size_t>{});
      pri_rr_diag_asy_vs_sym_a = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 388;
      pri_rr_diag_asy_vs_sym_a = context__.vals_r("pri_rr_diag_asy_vs_sym_a")[
          (1 - 1)];
      current_statement__ = 388;
      check_greater_or_equal(function__, "pri_rr_diag_asy_vs_sym_a",
                             pri_rr_diag_asy_vs_sym_a, 0);
      current_statement__ = 389;
      context__.validate_dims("data initialization",
          "pri_rr_diag_asy_vs_sym_b","double", std::vector<size_t>{});
      pri_rr_diag_asy_vs_sym_b = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 389;
      pri_rr_diag_asy_vs_sym_b = context__.vals_r("pri_rr_diag_asy_vs_sym_b")[
          (1 - 1)];
      current_statement__ = 389;
      check_greater_or_equal(function__, "pri_rr_diag_asy_vs_sym_b",
                             pri_rr_diag_asy_vs_sym_b, 0);
      current_statement__ = 390;
      context__.validate_dims("data initialization",
          "pri_rr_diag_sym_vs_sev_a","double", std::vector<size_t>{});
      pri_rr_diag_sym_vs_sev_a = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 390;
      pri_rr_diag_sym_vs_sev_a = context__.vals_r("pri_rr_diag_sym_vs_sev_a")[
          (1 - 1)];
      current_statement__ = 390;
      check_greater_or_equal(function__, "pri_rr_diag_sym_vs_sev_a",
                             pri_rr_diag_sym_vs_sev_a, 0);
      current_statement__ = 391;
      context__.validate_dims("data initialization",
          "pri_rr_diag_sym_vs_sev_b","double", std::vector<size_t>{});
      pri_rr_diag_sym_vs_sev_b = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 391;
      pri_rr_diag_sym_vs_sev_b = context__.vals_r("pri_rr_diag_sym_vs_sev_b")[
          (1 - 1)];
      current_statement__ = 391;
      check_greater_or_equal(function__, "pri_rr_diag_sym_vs_sev_b",
                             pri_rr_diag_sym_vs_sev_b, 0);
      current_statement__ = 392;
      context__.validate_dims("data initialization","pri_p_diag_if_sev_a",
          "double", std::vector<size_t>{});
      pri_p_diag_if_sev_a = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 392;
      pri_p_diag_if_sev_a = context__.vals_r("pri_p_diag_if_sev_a")[(1 - 1)];
      current_statement__ = 392;
      check_greater_or_equal(function__, "pri_p_diag_if_sev_a",
                             pri_p_diag_if_sev_a, 0);
      current_statement__ = 393;
      context__.validate_dims("data initialization","pri_p_diag_if_sev_b",
          "double", std::vector<size_t>{});
      pri_p_diag_if_sev_b = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 393;
      pri_p_diag_if_sev_b = context__.vals_r("pri_p_diag_if_sev_b")[(1 - 1)];
      current_statement__ = 393;
      check_greater_or_equal(function__, "pri_p_diag_if_sev_b",
                             pri_p_diag_if_sev_b, 0);
      current_statement__ = 394;
      context__.validate_dims("data initialization","scale_dx_delay_sym_a",
          "double", std::vector<size_t>{});
      scale_dx_delay_sym_a = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 394;
      scale_dx_delay_sym_a = context__.vals_r("scale_dx_delay_sym_a")[
          (1 - 1)];
      current_statement__ = 394;
      check_greater_or_equal(function__, "scale_dx_delay_sym_a",
                             scale_dx_delay_sym_a, 0);
      current_statement__ = 395;
      context__.validate_dims("data initialization","scale_dx_delay_sym_b",
          "double", std::vector<size_t>{});
      scale_dx_delay_sym_b = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 395;
      scale_dx_delay_sym_b = context__.vals_r("scale_dx_delay_sym_b")[
          (1 - 1)];
      current_statement__ = 395;
      check_greater_or_equal(function__, "scale_dx_delay_sym_b",
                             scale_dx_delay_sym_b, 0);
      current_statement__ = 396;
      context__.validate_dims("data initialization","scale_dx_delay_sev_a",
          "double", std::vector<size_t>{});
      scale_dx_delay_sev_a = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 396;
      scale_dx_delay_sev_a = context__.vals_r("scale_dx_delay_sev_a")[
          (1 - 1)];
      current_statement__ = 396;
      check_greater_or_equal(function__, "scale_dx_delay_sev_a",
                             scale_dx_delay_sev_a, 0);
      current_statement__ = 397;
      context__.validate_dims("data initialization","scale_dx_delay_sev_b",
          "double", std::vector<size_t>{});
      scale_dx_delay_sev_b = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 397;
      scale_dx_delay_sev_b = context__.vals_r("scale_dx_delay_sev_b")[
          (1 - 1)];
      current_statement__ = 397;
      check_greater_or_equal(function__, "scale_dx_delay_sev_b",
                             scale_dx_delay_sev_b, 0);
      current_statement__ = 398;
      validate_non_negative_index("waning_vacinf", "N_days + N_days_before",
                                  (N_days + N_days_before));
      current_statement__ = 399;
      context__.validate_dims("data initialization","waning_vacinf","double",
           std::vector<size_t>{static_cast<size_t>((N_days + N_days_before))});
      waning_vacinf__ = Eigen::Matrix<double, -1, 1>((N_days + N_days_before));
      new (&waning_vacinf) Eigen::Map<Eigen::Matrix<double, -1, 1>>(waning_vacinf__.data(), 
        (N_days + N_days_before));
      
      
      {
        std::vector<local_scalar_t__> waning_vacinf_flat__;
        current_statement__ = 399;
        waning_vacinf_flat__ = context__.vals_r("waning_vacinf");
        current_statement__ = 399;
        pos__ = 1;
        current_statement__ = 399;
        for (int sym1__ = 1; sym1__ <= (N_days + N_days_before); ++sym1__) {
          current_statement__ = 399;
          assign(waning_vacinf, waning_vacinf_flat__[(pos__ - 1)],
            "assigning variable waning_vacinf", index_uni(sym1__));
          current_statement__ = 399;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 399;
      for (int sym1__ = 1; sym1__ <= (N_days + N_days_before); ++sym1__) {
        current_statement__ = 399;
        check_greater_or_equal(function__, "waning_vacinf[sym1__]",
                               waning_vacinf[(sym1__ - 1)], 0);
      }
      current_statement__ = 399;
      for (int sym1__ = 1; sym1__ <= (N_days + N_days_before); ++sym1__) {
        current_statement__ = 399;
        check_less_or_equal(function__, "waning_vacinf[sym1__]",
                            waning_vacinf[(sym1__ - 1)], 1);
      }
      current_statement__ = 400;
      validate_non_negative_index("waning_both", "N_days + N_days_before",
                                  (N_days + N_days_before));
      current_statement__ = 401;
      context__.validate_dims("data initialization","waning_both","double",
           std::vector<size_t>{static_cast<size_t>((N_days + N_days_before))});
      waning_both__ = Eigen::Matrix<double, -1, 1>((N_days + N_days_before));
      new (&waning_both) Eigen::Map<Eigen::Matrix<double, -1, 1>>(waning_both__.data(), 
        (N_days + N_days_before));
      
      
      {
        std::vector<local_scalar_t__> waning_both_flat__;
        current_statement__ = 401;
        waning_both_flat__ = context__.vals_r("waning_both");
        current_statement__ = 401;
        pos__ = 1;
        current_statement__ = 401;
        for (int sym1__ = 1; sym1__ <= (N_days + N_days_before); ++sym1__) {
          current_statement__ = 401;
          assign(waning_both, waning_both_flat__[(pos__ - 1)],
            "assigning variable waning_both", index_uni(sym1__));
          current_statement__ = 401;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 401;
      for (int sym1__ = 1; sym1__ <= (N_days + N_days_before); ++sym1__) {
        current_statement__ = 401;
        check_greater_or_equal(function__, "waning_both[sym1__]",
                               waning_both[(sym1__ - 1)], 0);
      }
      current_statement__ = 401;
      for (int sym1__ = 1; sym1__ <= (N_days + N_days_before); ++sym1__) {
        current_statement__ = 401;
        check_less_or_equal(function__, "waning_both[sym1__]",
                            waning_both[(sym1__ - 1)], 1);
      }
      current_statement__ = 402;
      validate_non_negative_index("sev_vacinf", "N_days + N_days_before",
                                  (N_days + N_days_before));
      current_statement__ = 403;
      context__.validate_dims("data initialization","sev_vacinf","double",
           std::vector<size_t>{static_cast<size_t>((N_days + N_days_before))});
      sev_vacinf__ = Eigen::Matrix<double, -1, 1>((N_days + N_days_before));
      new (&sev_vacinf) Eigen::Map<Eigen::Matrix<double, -1, 1>>(sev_vacinf__.data(), 
        (N_days + N_days_before));
      
      
      {
        std::vector<local_scalar_t__> sev_vacinf_flat__;
        current_statement__ = 403;
        sev_vacinf_flat__ = context__.vals_r("sev_vacinf");
        current_statement__ = 403;
        pos__ = 1;
        current_statement__ = 403;
        for (int sym1__ = 1; sym1__ <= (N_days + N_days_before); ++sym1__) {
          current_statement__ = 403;
          assign(sev_vacinf, sev_vacinf_flat__[(pos__ - 1)],
            "assigning variable sev_vacinf", index_uni(sym1__));
          current_statement__ = 403;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 403;
      for (int sym1__ = 1; sym1__ <= (N_days + N_days_before); ++sym1__) {
        current_statement__ = 403;
        check_greater_or_equal(function__, "sev_vacinf[sym1__]",
                               sev_vacinf[(sym1__ - 1)], 0);
      }
      current_statement__ = 403;
      for (int sym1__ = 1; sym1__ <= (N_days + N_days_before); ++sym1__) {
        current_statement__ = 403;
        check_less_or_equal(function__, "sev_vacinf[sym1__]",
                            sev_vacinf[(sym1__ - 1)], 1);
      }
      current_statement__ = 404;
      validate_non_negative_index("sev_both", "N_days + N_days_before",
                                  (N_days + N_days_before));
      current_statement__ = 405;
      context__.validate_dims("data initialization","sev_both","double",
           std::vector<size_t>{static_cast<size_t>((N_days + N_days_before))});
      sev_both__ = Eigen::Matrix<double, -1, 1>((N_days + N_days_before));
      new (&sev_both) Eigen::Map<Eigen::Matrix<double, -1, 1>>(sev_both__.data(), 
        (N_days + N_days_before));
      
      
      {
        std::vector<local_scalar_t__> sev_both_flat__;
        current_statement__ = 405;
        sev_both_flat__ = context__.vals_r("sev_both");
        current_statement__ = 405;
        pos__ = 1;
        current_statement__ = 405;
        for (int sym1__ = 1; sym1__ <= (N_days + N_days_before); ++sym1__) {
          current_statement__ = 405;
          assign(sev_both, sev_both_flat__[(pos__ - 1)],
            "assigning variable sev_both", index_uni(sym1__));
          current_statement__ = 405;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 405;
      for (int sym1__ = 1; sym1__ <= (N_days + N_days_before); ++sym1__) {
        current_statement__ = 405;
        check_greater_or_equal(function__, "sev_both[sym1__]",
                               sev_both[(sym1__ - 1)], 0);
      }
      current_statement__ = 405;
      for (int sym1__ = 1; sym1__ <= (N_days + N_days_before); ++sym1__) {
        current_statement__ = 405;
        check_less_or_equal(function__, "sev_both[sym1__]",
                            sev_both[(sym1__ - 1)], 1);
      }
      current_statement__ = 406;
      N_days_tot = std::numeric_limits<int>::min();
      
      current_statement__ = 407;
      nda0 = std::numeric_limits<int>::min();
      
      current_statement__ = 408;
      validate_non_negative_index("idx1", "N_days + N_days_before",
                                  (N_days + N_days_before));
      current_statement__ = 409;
      idx1 = std::vector<int>((N_days + N_days_before), std::numeric_limits<int>::min());
      
      
      current_statement__ = 410;
      validate_non_negative_index("idx2", "N_days + N_days_before",
                                  (N_days + N_days_before));
      current_statement__ = 411;
      idx2 = std::vector<int>((N_days + N_days_before), std::numeric_limits<int>::min());
      
      
      current_statement__ = 412;
      validate_non_negative_index("inf_prg_delay_rv", "Max_delay", Max_delay);
      current_statement__ = 413;
      inf_prg_delay_rv__ = Eigen::Matrix<double, -1, 1>(Max_delay);
      new (&inf_prg_delay_rv) Eigen::Map<Eigen::Matrix<double, -1, 1>>(inf_prg_delay_rv__.data(), Max_delay);
      stan::math::fill(inf_prg_delay_rv, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 414;
      validate_non_negative_index("asy_rec_delay_rv", "Max_delay", Max_delay);
      current_statement__ = 415;
      asy_rec_delay_rv__ = Eigen::Matrix<double, -1, 1>(Max_delay);
      new (&asy_rec_delay_rv) Eigen::Map<Eigen::Matrix<double, -1, 1>>(asy_rec_delay_rv__.data(), Max_delay);
      stan::math::fill(asy_rec_delay_rv, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 416;
      validate_non_negative_index("sym_prg_delay_rv", "Max_delay", Max_delay);
      current_statement__ = 417;
      sym_prg_delay_rv__ = Eigen::Matrix<double, -1, 1>(Max_delay);
      new (&sym_prg_delay_rv) Eigen::Map<Eigen::Matrix<double, -1, 1>>(sym_prg_delay_rv__.data(), Max_delay);
      stan::math::fill(sym_prg_delay_rv, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 418;
      validate_non_negative_index("sev_prg_delay_rv", "Max_delay", Max_delay);
      current_statement__ = 419;
      sev_prg_delay_rv__ = Eigen::Matrix<double, -1, 1>(Max_delay);
      new (&sev_prg_delay_rv) Eigen::Map<Eigen::Matrix<double, -1, 1>>(sev_prg_delay_rv__.data(), Max_delay);
      stan::math::fill(sev_prg_delay_rv, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 420;
      validate_non_negative_index("cas_rep_delay_rv", "Max_delay", Max_delay);
      current_statement__ = 421;
      cas_rep_delay_rv__ = Eigen::Matrix<double, -1, 1>(Max_delay);
      new (&cas_rep_delay_rv) Eigen::Map<Eigen::Matrix<double, -1, 1>>(cas_rep_delay_rv__.data(), Max_delay);
      stan::math::fill(cas_rep_delay_rv, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 422;
      validate_non_negative_index("die_rep_delay_rv", "Max_delay", Max_delay);
      current_statement__ = 423;
      die_rep_delay_rv__ = Eigen::Matrix<double, -1, 1>(Max_delay);
      new (&die_rep_delay_rv) Eigen::Map<Eigen::Matrix<double, -1, 1>>(die_rep_delay_rv__.data(), Max_delay);
      stan::math::fill(die_rep_delay_rv, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 424;
      validate_non_negative_index("cas_cum_report_delay_rv",
                                  "N_days + N_days_before",
                                  (N_days + N_days_before));
      current_statement__ = 425;
      cas_cum_report_delay_rv__ = Eigen::Matrix<double, -1, 1>((N_days +
                                                                 N_days_before));
      new (&cas_cum_report_delay_rv) Eigen::Map<Eigen::Matrix<double, -1, 1>>(cas_cum_report_delay_rv__.data(), 
        (N_days + N_days_before));
      stan::math::fill(cas_cum_report_delay_rv, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 426;
      validate_non_negative_index("die_cum_report_delay_rv",
                                  "N_days + N_days_before",
                                  (N_days + N_days_before));
      current_statement__ = 427;
      die_cum_report_delay_rv__ = Eigen::Matrix<double, -1, 1>((N_days +
                                                                 N_days_before));
      new (&die_cum_report_delay_rv) Eigen::Map<Eigen::Matrix<double, -1, 1>>(die_cum_report_delay_rv__.data(), 
        (N_days + N_days_before));
      stan::math::fill(die_cum_report_delay_rv, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 428;
      nda0 = (N_days_av - 1);
      current_statement__ = 429;
      N_days_tot = (N_days + N_days_before);
      current_statement__ = 438;
      for (int i = 1; i <= N_days_tot; ++i) {
        current_statement__ = 436;
        if (logical_gt((i - Max_delay), 0)) {
          current_statement__ = 433;
          assign(idx1, ((i - Max_delay) + 1),
            "assigning variable idx1", index_uni(i));
          current_statement__ = 434;
          assign(idx2, 1, "assigning variable idx2", index_uni(i));
        } else {
          current_statement__ = 430;
          assign(idx1, 1, "assigning variable idx1", index_uni(i));
          current_statement__ = 431;
          assign(idx2, ((Max_delay - i) + 1),
            "assigning variable idx2", index_uni(i));
        }
      }
      current_statement__ = 444;
      for (int i = 1; i <= Max_delay; ++i) {
        current_statement__ = 439;
        assign(inf_prg_delay_rv,
          (gamma_cdf((i + 0.0), inf_prg_delay_shap, inf_prg_delay_rate) -
            gamma_cdf((i - 1.0), inf_prg_delay_shap, inf_prg_delay_rate)),
          "assigning variable inf_prg_delay_rv", index_uni(((1 + Max_delay) -
                                                             i)));
        current_statement__ = 440;
        assign(asy_rec_delay_rv,
          (gamma_cdf((i + 0.0), asy_rec_delay_shap, (asy_rec_delay_rate * 2))
            -
            gamma_cdf((i - 1.0), asy_rec_delay_shap,
              (asy_rec_delay_rate * 2))),
          "assigning variable asy_rec_delay_rv", index_uni(((1 + Max_delay) -
                                                             i)));
        current_statement__ = 441;
        assign(sym_prg_delay_rv,
          (gamma_cdf((i + 0.0), sym_prg_delay_shap, sym_prg_delay_rate) -
            gamma_cdf((i - 1.0), sym_prg_delay_shap, sym_prg_delay_rate)),
          "assigning variable sym_prg_delay_rv", index_uni(((1 + Max_delay) -
                                                             i)));
        current_statement__ = 442;
        assign(sev_prg_delay_rv,
          (gamma_cdf((i + 0.0), sev_prg_delay_shap, sev_prg_delay_rate) -
            gamma_cdf((i - 1.0), sev_prg_delay_shap, sev_prg_delay_rate)),
          "assigning variable sev_prg_delay_rv", index_uni(((1 + Max_delay) -
                                                             i)));
      }
      current_statement__ = 448;
      for (int i = 1; i <= Max_delay; ++i) {
        current_statement__ = 445;
        assign(cas_rep_delay_rv,
          (gamma_cdf((i + 0.0), cas_rep_delay_shap, cas_rep_delay_rate) -
            gamma_cdf((i - 1.0), cas_rep_delay_shap, cas_rep_delay_rate)),
          "assigning variable cas_rep_delay_rv", index_uni(((1 + Max_delay) -
                                                             i)));
        current_statement__ = 446;
        assign(die_rep_delay_rv,
          (gamma_cdf((i + 0.0), die_rep_delay_shap, die_rep_delay_rate) -
            gamma_cdf((i - 1.0), die_rep_delay_shap, die_rep_delay_rate)),
          "assigning variable die_rep_delay_rv", index_uni(((1 + Max_delay) -
                                                             i)));
      }
      current_statement__ = 449;
      assign(inf_prg_delay_rv,
        divide(stan::model::deep_copy(inf_prg_delay_rv),
          sum(inf_prg_delay_rv)), "assigning variable inf_prg_delay_rv");
      current_statement__ = 450;
      assign(asy_rec_delay_rv,
        divide(stan::model::deep_copy(asy_rec_delay_rv),
          sum(asy_rec_delay_rv)), "assigning variable asy_rec_delay_rv");
      current_statement__ = 451;
      assign(sym_prg_delay_rv,
        divide(stan::model::deep_copy(sym_prg_delay_rv),
          sum(sym_prg_delay_rv)), "assigning variable sym_prg_delay_rv");
      current_statement__ = 452;
      assign(sev_prg_delay_rv,
        divide(stan::model::deep_copy(sev_prg_delay_rv),
          sum(sev_prg_delay_rv)), "assigning variable sev_prg_delay_rv");
      current_statement__ = 453;
      assign(cas_rep_delay_rv,
        divide(stan::model::deep_copy(cas_rep_delay_rv),
          sum(cas_rep_delay_rv)), "assigning variable cas_rep_delay_rv");
      current_statement__ = 454;
      assign(die_rep_delay_rv,
        divide(stan::model::deep_copy(die_rep_delay_rv),
          sum(die_rep_delay_rv)), "assigning variable die_rep_delay_rv");
      current_statement__ = 463;
      for (int i = 1; i <= N_days_tot; ++i) {
        current_statement__ = 461;
        if (logical_lt(i, Max_delay)) {
          current_statement__ = 458;
          assign(cas_cum_report_delay_rv,
            gamma_cdf((i + 0.0), cas_rep_delay_shap, cas_rep_delay_rate),
            "assigning variable cas_cum_report_delay_rv", index_uni(((1 +
                                                                    N_days_tot)
                                                                    - i)));
          current_statement__ = 459;
          assign(die_cum_report_delay_rv,
            gamma_cdf((i + 0.0), die_rep_delay_shap, die_rep_delay_rate),
            "assigning variable die_cum_report_delay_rv", index_uni(((1 +
                                                                    N_days_tot)
                                                                    - i)));
        } else {
          current_statement__ = 455;
          assign(cas_cum_report_delay_rv, 1.0,
            "assigning variable cas_cum_report_delay_rv", index_uni(((1 +
                                                                    N_days_tot)
                                                                    - i)));
          current_statement__ = 456;
          assign(die_cum_report_delay_rv, 1.0,
            "assigning variable die_cum_report_delay_rv", index_uni(((1 +
                                                                    N_days_tot)
                                                                    - i)));
        }
      }
      current_statement__ = 464;
      validate_non_negative_index("spl_par_rt", "N_spl_par_rt", N_spl_par_rt);
      current_statement__ = 465;
      validate_non_negative_index("spl_par_sym_dx", "N_spl_par_dx",
                                  N_spl_par_dx);
      current_statement__ = 466;
      validate_non_negative_index("log_new_inf", "N_days_tot", N_days_tot);
      current_statement__ = 467;
      validate_non_negative_index("new_inf", "N_days_tot", N_days_tot);
      current_statement__ = 468;
      validate_non_negative_index("deriv1_log_new_inf", "N_days_tot",
                                  N_days_tot);
      current_statement__ = 469;
      validate_non_negative_index("logRt0", "N_days_tot", N_days_tot);
      current_statement__ = 470;
      validate_non_negative_index("logRt", "N_days_tot", N_days_tot);
      current_statement__ = 471;
      validate_non_negative_index("Rt", "N_days_tot", N_days_tot);
      current_statement__ = 472;
      deriv1_spl_par_rt_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 472;
      deriv1_spl_par_rt_1dim__ = (N_spl_par_rt - 1);
      current_statement__ = 472;
      validate_non_negative_index("deriv1_spl_par_rt", "N_spl_par_rt - 1",
                                  deriv1_spl_par_rt_1dim__);
      current_statement__ = 473;
      deriv2_spl_par_rt_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 473;
      deriv2_spl_par_rt_1dim__ = (N_spl_par_rt - 2);
      current_statement__ = 473;
      validate_non_negative_index("deriv2_spl_par_rt", "N_spl_par_rt - 2",
                                  deriv2_spl_par_rt_1dim__);
      current_statement__ = 474;
      validate_non_negative_index("p_die_if_sevt", "N_ifr_adj", N_ifr_adj);
      current_statement__ = 475;
      validate_non_negative_index("p_sev_if_symt", "N_days_tot", N_days_tot);
      current_statement__ = 476;
      validate_non_negative_index("p_sym_if_inft", "N_days_tot", N_days_tot);
      current_statement__ = 477;
      validate_non_negative_index("rr_diag_sym_vs_sev", "N_days_tot",
                                  N_days_tot);
      current_statement__ = 478;
      validate_non_negative_index("p_diag_if_asy", "N_days_tot", N_days_tot);
      current_statement__ = 479;
      validate_non_negative_index("p_diag_if_sym", "N_days_tot", N_days_tot);
      current_statement__ = 480;
      validate_non_negative_index("sym_diag_delay_rv", "Max_delay", Max_delay);
      current_statement__ = 481;
      validate_non_negative_index("sev_diag_delay_rv", "Max_delay", Max_delay);
      current_statement__ = 482;
      validate_non_negative_index("new_sym", "N_days_tot", N_days_tot);
      current_statement__ = 483;
      validate_non_negative_index("new_sev", "N_days_tot", N_days_tot);
      current_statement__ = 484;
      validate_non_negative_index("new_die", "N_days_tot", N_days_tot);
      current_statement__ = 485;
      validate_non_negative_index("new_asy_dx", "N_days_tot", N_days_tot);
      current_statement__ = 486;
      validate_non_negative_index("new_sym_dx", "N_days_tot", N_days_tot);
      current_statement__ = 487;
      validate_non_negative_index("new_sev_dx", "N_days_tot", N_days_tot);
      current_statement__ = 488;
      validate_non_negative_index("dx_sym_sev", "N_days_tot", N_days_tot);
      current_statement__ = 489;
      validate_non_negative_index("dx_sym_die", "N_days_tot", N_days_tot);
      current_statement__ = 490;
      validate_non_negative_index("dx_sev_die", "N_days_tot", N_days_tot);
      current_statement__ = 491;
      validate_non_negative_index("diag_all", "N_days_tot", N_days_tot);
      current_statement__ = 492;
      validate_non_negative_index("new_die_dx", "N_days_tot", N_days_tot);
      current_statement__ = 493;
      validate_non_negative_index("occur_cas", "N_days_tot", N_days_tot);
      current_statement__ = 494;
      validate_non_negative_index("occur_die", "N_days_tot", N_days_tot);
      current_statement__ = 495;
      validate_non_negative_index("idx1b", "N_days_tot", N_days_tot);
      current_statement__ = 496;
      validate_non_negative_index("idx2b", "N_days_tot", N_days_tot);
      current_statement__ = 497;
      validate_non_negative_index("diag_cases", "N_days_tot", N_days_tot);
      current_statement__ = 498;
      validate_non_negative_index("cumulative_incidence", "N_days_tot",
                                  N_days_tot);
      current_statement__ = 499;
      validate_non_negative_index("sero_positive", "N_days_tot", N_days_tot);
      current_statement__ = 500;
      validate_non_negative_index("pop_infectiousness", "N_days_tot",
                                  N_days_tot);
      current_statement__ = 501;
      validate_non_negative_index("infect_dist_rv", "Max_delay", Max_delay);
      current_statement__ = 502;
      validate_non_negative_index("vac_only", "N_days_tot", N_days_tot);
      current_statement__ = 503;
      validate_non_negative_index("inf_only", "N_days_tot", N_days_tot);
      current_statement__ = 504;
      validate_non_negative_index("both_only", "N_days_tot", N_days_tot);
      current_statement__ = 505;
      validate_non_negative_index("immune_vac", "N_days_tot", N_days_tot);
      current_statement__ = 506;
      validate_non_negative_index("immune_inf", "N_days_tot", N_days_tot);
      current_statement__ = 507;
      validate_non_negative_index("immune_both", "N_days_tot", N_days_tot);
      current_statement__ = 508;
      validate_non_negative_index("immune_waning", "N_days_tot", N_days_tot);
      current_statement__ = 509;
      validate_non_negative_index("immune_sev_vac", "N_days_tot", N_days_tot);
      current_statement__ = 510;
      validate_non_negative_index("immune_sev_inf", "N_days_tot", N_days_tot);
      current_statement__ = 511;
      validate_non_negative_index("immune_sev_both", "N_days_tot", N_days_tot);
      current_statement__ = 512;
      validate_non_negative_index("immune_sev_waning", "N_days_tot",
                                  N_days_tot);
      current_statement__ = 513;
      validate_non_negative_index("vac_inf", "N_days_tot", N_days_tot);
      current_statement__ = 514;
      validate_non_negative_index("cum_p_inf", "N_days_tot", N_days_tot);
      current_statement__ = 515;
      validate_non_negative_index("cum_p_inf_recent", "N_days_tot",
                                  N_days_tot);
      current_statement__ = 516;
      validate_non_negative_index("cum_p_vac", "N_days_tot", N_days_tot);
      current_statement__ = 517;
      validate_non_negative_index("cum_p_vac_recent", "N_days_tot",
                                  N_days_tot);
      current_statement__ = 518;
      validate_non_negative_index("p_immune", "N_days_tot", N_days_tot);
      current_statement__ = 519;
      validate_non_negative_index("p_immune_over12", "N_days_tot", N_days_tot);
      current_statement__ = 520;
      validate_non_negative_index("p_immune_recent", "N_days_tot", N_days_tot);
      current_statement__ = 521;
      validate_non_negative_index("p_immune_recent_over12", "N_days_tot",
                                  N_days_tot);
      current_statement__ = 522;
      validate_non_negative_index("p_immune_independence", "N_days_tot",
                                  N_days_tot);
      current_statement__ = 523;
      validate_non_negative_index("p_immune_independence_over12",
                                  "N_days_tot", N_days_tot);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + N_spl_par_rt + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 
      1 + 1 + N_spl_par_dx + 1 + 1 + 1 + (3 - 1);
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "stan_program_default_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ log_new_inf_0;
      log_new_inf_0 = DUMMY_VAR__;
      
      current_statement__ = 1;
      log_new_inf_0 = in__.template read<local_scalar_t__>();
      local_scalar_t__ serial_i;
      serial_i = DUMMY_VAR__;
      
      current_statement__ = 2;
      serial_i = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                   3, 11, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> spl_par_rt;
      spl_par_rt = Eigen::Matrix<local_scalar_t__, -1, 1>(N_spl_par_rt);
      stan::math::fill(spl_par_rt, DUMMY_VAR__);
      
      current_statement__ = 3;
      spl_par_rt = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                     N_spl_par_rt);
      local_scalar_t__ p_sym_if_inf;
      p_sym_if_inf = DUMMY_VAR__;
      
      current_statement__ = 4;
      p_sym_if_inf = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                       0, 1, lp__);
      local_scalar_t__ p_sev_if_sym;
      p_sev_if_sym = DUMMY_VAR__;
      
      current_statement__ = 5;
      p_sev_if_sym = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                       0, 1, lp__);
      local_scalar_t__ p_die_if_sev;
      p_die_if_sev = DUMMY_VAR__;
      
      current_statement__ = 6;
      p_die_if_sev = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                       0, 1, lp__);
      local_scalar_t__ ifr_decl_OR;
      ifr_decl_OR = DUMMY_VAR__;
      
      current_statement__ = 7;
      ifr_decl_OR = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                      0, lp__);
      local_scalar_t__ scale_dx_delay_asy;
      scale_dx_delay_asy = DUMMY_VAR__;
      
      current_statement__ = 8;
      scale_dx_delay_asy = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                             0, 1, lp__);
      local_scalar_t__ scale_dx_delay_sym;
      scale_dx_delay_sym = DUMMY_VAR__;
      
      current_statement__ = 9;
      scale_dx_delay_sym = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                             0, 1, lp__);
      local_scalar_t__ scale_dx_delay_sev;
      scale_dx_delay_sev = DUMMY_VAR__;
      
      current_statement__ = 10;
      scale_dx_delay_sev = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                             0, 1, lp__);
      local_scalar_t__ rr_diag_asy_vs_sym;
      rr_diag_asy_vs_sym = DUMMY_VAR__;
      
      current_statement__ = 11;
      rr_diag_asy_vs_sym = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                             0, 1, lp__);
      local_scalar_t__ p_diag_if_sev;
      p_diag_if_sev = DUMMY_VAR__;
      
      current_statement__ = 12;
      p_diag_if_sev = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                        0, 1, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> spl_par_sym_dx;
      spl_par_sym_dx = Eigen::Matrix<local_scalar_t__, -1, 1>(N_spl_par_dx);
      stan::math::fill(spl_par_sym_dx, DUMMY_VAR__);
      
      current_statement__ = 13;
      spl_par_sym_dx = in__.template read_constrain_lub<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                         0, 1, lp__, N_spl_par_dx);
      local_scalar_t__ or_vac_inf;
      or_vac_inf = DUMMY_VAR__;
      
      current_statement__ = 14;
      or_vac_inf = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                     0, lp__);
      local_scalar_t__ inv_sqrt_phi_c;
      inv_sqrt_phi_c = DUMMY_VAR__;
      
      current_statement__ = 15;
      inv_sqrt_phi_c = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                         0, lp__);
      local_scalar_t__ inv_sqrt_phi_d;
      inv_sqrt_phi_d = DUMMY_VAR__;
      
      current_statement__ = 16;
      inv_sqrt_phi_d = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                         0, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> prob_vac;
      prob_vac = Eigen::Matrix<local_scalar_t__, -1, 1>(3);
      stan::math::fill(prob_vac, DUMMY_VAR__);
      
      current_statement__ = 17;
      prob_vac = in__.template read_constrain_simplex<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                   lp__, 3);
      Eigen::Matrix<local_scalar_t__, -1, 1> log_new_inf;
      log_new_inf = Eigen::Matrix<local_scalar_t__, -1, 1>(N_days_tot);
      stan::math::fill(log_new_inf, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> new_inf;
      new_inf = Eigen::Matrix<local_scalar_t__, -1, 1>(N_days_tot);
      stan::math::fill(new_inf, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> deriv1_log_new_inf;
      deriv1_log_new_inf = Eigen::Matrix<local_scalar_t__, -1, 1>(N_days_tot);
      stan::math::fill(deriv1_log_new_inf, DUMMY_VAR__);
      
      local_scalar_t__ pop_uninf;
      pop_uninf = DUMMY_VAR__;
      
      Eigen::Matrix<local_scalar_t__, -1, 1> logRt0;
      logRt0 = Eigen::Matrix<local_scalar_t__, -1, 1>(N_days_tot);
      stan::math::fill(logRt0, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> logRt;
      logRt = Eigen::Matrix<local_scalar_t__, -1, 1>(N_days_tot);
      stan::math::fill(logRt, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> Rt;
      Rt = Eigen::Matrix<local_scalar_t__, -1, 1>(N_days_tot);
      stan::math::fill(Rt, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> deriv1_spl_par_rt;
      deriv1_spl_par_rt = Eigen::Matrix<local_scalar_t__, -1, 1>(deriv1_spl_par_rt_1dim__);
      stan::math::fill(deriv1_spl_par_rt, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> deriv2_spl_par_rt;
      deriv2_spl_par_rt = Eigen::Matrix<local_scalar_t__, -1, 1>(deriv2_spl_par_rt_1dim__);
      stan::math::fill(deriv2_spl_par_rt, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> p_die_if_sevt;
      p_die_if_sevt = Eigen::Matrix<local_scalar_t__, -1, 1>(N_ifr_adj);
      stan::math::fill(p_die_if_sevt, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> p_sev_if_symt;
      p_sev_if_symt = Eigen::Matrix<local_scalar_t__, -1, 1>(N_days_tot);
      stan::math::fill(p_sev_if_symt, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> p_sym_if_inft;
      p_sym_if_inft = Eigen::Matrix<local_scalar_t__, -1, 1>(N_days_tot);
      stan::math::fill(p_sym_if_inft, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> rr_diag_sym_vs_sev;
      rr_diag_sym_vs_sev = Eigen::Matrix<local_scalar_t__, -1, 1>(N_days_tot);
      stan::math::fill(rr_diag_sym_vs_sev, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> p_diag_if_asy;
      p_diag_if_asy = Eigen::Matrix<local_scalar_t__, -1, 1>(N_days_tot);
      stan::math::fill(p_diag_if_asy, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> p_diag_if_sym;
      p_diag_if_sym = Eigen::Matrix<local_scalar_t__, -1, 1>(N_days_tot);
      stan::math::fill(p_diag_if_sym, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> sym_diag_delay_rv;
      sym_diag_delay_rv = Eigen::Matrix<local_scalar_t__, -1, 1>(Max_delay);
      stan::math::fill(sym_diag_delay_rv, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> sev_diag_delay_rv;
      sev_diag_delay_rv = Eigen::Matrix<local_scalar_t__, -1, 1>(Max_delay);
      stan::math::fill(sev_diag_delay_rv, DUMMY_VAR__);
      
      local_scalar_t__ p_die_if_inf;
      p_die_if_inf = DUMMY_VAR__;
      
      Eigen::Matrix<local_scalar_t__, -1, 1> new_sym;
      new_sym = Eigen::Matrix<local_scalar_t__, -1, 1>(N_days_tot);
      stan::math::fill(new_sym, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> new_sev;
      new_sev = Eigen::Matrix<local_scalar_t__, -1, 1>(N_days_tot);
      stan::math::fill(new_sev, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> new_die;
      new_die = Eigen::Matrix<local_scalar_t__, -1, 1>(N_days_tot);
      stan::math::fill(new_die, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> new_asy_dx;
      new_asy_dx = Eigen::Matrix<local_scalar_t__, -1, 1>(N_days_tot);
      stan::math::fill(new_asy_dx, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> new_sym_dx;
      new_sym_dx = Eigen::Matrix<local_scalar_t__, -1, 1>(N_days_tot);
      stan::math::fill(new_sym_dx, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> new_sev_dx;
      new_sev_dx = Eigen::Matrix<local_scalar_t__, -1, 1>(N_days_tot);
      stan::math::fill(new_sev_dx, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> dx_sym_sev;
      dx_sym_sev = Eigen::Matrix<local_scalar_t__, -1, 1>(N_days_tot);
      stan::math::fill(dx_sym_sev, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> dx_sym_die;
      dx_sym_die = Eigen::Matrix<local_scalar_t__, -1, 1>(N_days_tot);
      stan::math::fill(dx_sym_die, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> dx_sev_die;
      dx_sev_die = Eigen::Matrix<local_scalar_t__, -1, 1>(N_days_tot);
      stan::math::fill(dx_sev_die, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> diag_all;
      diag_all = Eigen::Matrix<local_scalar_t__, -1, 1>(N_days_tot);
      stan::math::fill(diag_all, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> new_die_dx;
      new_die_dx = Eigen::Matrix<local_scalar_t__, -1, 1>(N_days_tot);
      stan::math::fill(new_die_dx, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> occur_cas;
      occur_cas = Eigen::Matrix<local_scalar_t__, -1, 1>(N_days_tot);
      stan::math::fill(occur_cas, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> occur_die;
      occur_die = Eigen::Matrix<local_scalar_t__, -1, 1>(N_days_tot);
      stan::math::fill(occur_die, DUMMY_VAR__);
      
      local_scalar_t__ phi_cas;
      phi_cas = DUMMY_VAR__;
      
      local_scalar_t__ phi_die;
      phi_die = DUMMY_VAR__;
      
      current_statement__ = 51;
      assign(p_die_if_sevt,
        multiply((p_die_if_sev * ifr_adj_fixed),
          add(1.0, multiply(ifr_adj, ifr_decl_OR))),
        "assigning variable p_die_if_sevt");
      current_statement__ = 56;
      for (int i = 1; i <= N_days_tot; ++i) {
        current_statement__ = 52;
        assign(p_die_if_sevt,
          (rvalue(p_die_if_sevt, "p_die_if_sevt", index_uni(i)) *
            pow(rvalue(ifr_vac_adj, "ifr_vac_adj", index_uni(i)),
              rvalue(prob_vac, "prob_vac", index_uni(1)))),
          "assigning variable p_die_if_sevt", index_uni(i));
        current_statement__ = 53;
        assign(p_sev_if_symt,
          (p_sev_if_sym *
            pow(rvalue(ifr_vac_adj, "ifr_vac_adj", index_uni(i)),
              rvalue(prob_vac, "prob_vac", index_uni(2)))),
          "assigning variable p_sev_if_symt", index_uni(i));
        current_statement__ = 54;
        assign(p_sym_if_inft,
          (p_sym_if_inf *
            pow(rvalue(ifr_vac_adj, "ifr_vac_adj", index_uni(i)),
              rvalue(prob_vac, "prob_vac", index_uni(3)))),
          "assigning variable p_sym_if_inft", index_uni(i));
      }
      current_statement__ = 57;
      assign(rr_diag_sym_vs_sev,
        inv_logit(multiply(spl_basis_dx, logit(spl_par_sym_dx))),
        "assigning variable rr_diag_sym_vs_sev");
      current_statement__ = 58;
      assign(p_diag_if_sym, multiply(p_diag_if_sev, rr_diag_sym_vs_sev),
        "assigning variable p_diag_if_sym");
      current_statement__ = 59;
      assign(p_diag_if_asy, multiply(p_diag_if_sym, rr_diag_asy_vs_sym),
        "assigning variable p_diag_if_asy");
      current_statement__ = 63;
      for (int i = 1; i <= Max_delay; ++i) {
        current_statement__ = 60;
        assign(sym_diag_delay_rv,
          (gamma_cdf((i + 0.0), sym_prg_delay_shap,
             (sym_prg_delay_rate / scale_dx_delay_sym)) -
            gamma_cdf((i - 1.0), sym_prg_delay_shap,
              (sym_prg_delay_rate / scale_dx_delay_sym))),
          "assigning variable sym_diag_delay_rv", index_uni(((1 + Max_delay)
                                                              - i)));
        current_statement__ = 61;
        assign(sev_diag_delay_rv,
          (gamma_cdf((i + 0.0), sev_prg_delay_shap,
             (sev_prg_delay_rate / scale_dx_delay_sev)) -
            gamma_cdf((i - 1.0), sev_prg_delay_shap,
              (sev_prg_delay_rate / scale_dx_delay_sev))),
          "assigning variable sev_diag_delay_rv", index_uni(((1 + Max_delay)
                                                              - i)));
      }
      current_statement__ = 64;
      p_die_if_inf = ((p_sym_if_inf * p_sev_if_sym) * p_die_if_sev);
      current_statement__ = 65;
      assign(logRt0, multiply(spl_basis_rt, spl_par_rt),
        "assigning variable logRt0");
      current_statement__ = 66;
      pop_uninf = pop_size;
      current_statement__ = 80;
      for (int i = 1; i <= N_days_tot; ++i) {
        current_statement__ = 71;
        if (logical_eq(i, 1)) {
          current_statement__ = 69;
          assign(logRt, rvalue(logRt0, "logRt0", index_uni(i)),
            "assigning variable logRt", index_uni(i));
        } else {
          current_statement__ = 67;
          assign(logRt,
            (rvalue(logRt0, "logRt0", index_uni(i)) +
              stan::math::log((pop_uninf / pop_size))),
            "assigning variable logRt", index_uni(i));
        }
        current_statement__ = 72;
        assign(deriv1_log_new_inf,
          (rvalue(logRt, "logRt", index_uni(i)) / serial_i),
          "assigning variable deriv1_log_new_inf", index_uni(i));
        current_statement__ = 73;
        assign(log_new_inf,
          (sum(
             rvalue(deriv1_log_new_inf, "deriv1_log_new_inf",
               index_min_max(1, i))) + log_new_inf_0),
          "assigning variable log_new_inf", index_uni(i));
        current_statement__ = 74;
        assign(new_inf,
          ((1 -
             stan::math::exp(
               (-stan::math::exp(
                   rvalue(log_new_inf, "log_new_inf", index_uni(i))) /
                 pop_uninf))) * pop_uninf),
          "assigning variable new_inf", index_uni(i));
        current_statement__ = 75;
        pop_uninf = (pop_uninf - rvalue(new_inf, "new_inf", index_uni(i)));
        current_statement__ = 78;
        if (logical_lt(pop_uninf, 1)) {
          current_statement__ = 76;
          pop_uninf = 1;
        } 
      }
      current_statement__ = 81;
      assign(Rt, stan::math::exp(logRt), "assigning variable Rt");
      current_statement__ = 82;
      assign(deriv2_spl_par_rt,
        subtract(
          subtract(
            multiply(
              rvalue(spl_par_rt, "spl_par_rt",
                index_min_max(2, (N_spl_par_rt - 1))), 2),
            rvalue(spl_par_rt, "spl_par_rt",
              index_min_max(1, (N_spl_par_rt - 2)))),
          rvalue(spl_par_rt, "spl_par_rt", index_min_max(3, N_spl_par_rt))),
        "assigning variable deriv2_spl_par_rt", index_min_max(1, (N_spl_par_rt
                                                                   - 2)));
      current_statement__ = 83;
      assign(deriv1_spl_par_rt,
        subtract(
          rvalue(spl_par_rt, "spl_par_rt", index_min_max(2, N_spl_par_rt)),
          rvalue(spl_par_rt, "spl_par_rt",
            index_min_max(1, (N_spl_par_rt - 1)))),
        "assigning variable deriv1_spl_par_rt", index_min_max(1, (N_spl_par_rt
                                                                   - 1)));
      current_statement__ = 86;
      for (int i = 1; i <= N_days_tot; ++i) {
        current_statement__ = 84;
        assign(new_sym,
          (dot_product(
             rvalue(new_inf, "new_inf",
               index_min_max(rvalue(idx1, "idx1", index_uni(i)), i)),
             rvalue(inf_prg_delay_rv, "inf_prg_delay_rv",
               index_min_max(rvalue(idx2, "idx2", index_uni(i)), Max_delay)))
            * rvalue(p_sym_if_inft, "p_sym_if_inft", index_uni(i))),
          "assigning variable new_sym", index_uni(i));
      }
      current_statement__ = 89;
      for (int i = 1; i <= N_days_tot; ++i) {
        current_statement__ = 87;
        assign(new_sev,
          (dot_product(
             rvalue(new_sym, "new_sym",
               index_min_max(rvalue(idx1, "idx1", index_uni(i)), i)),
             rvalue(sym_prg_delay_rv, "sym_prg_delay_rv",
               index_min_max(rvalue(idx2, "idx2", index_uni(i)), Max_delay)))
            * rvalue(p_sev_if_symt, "p_sev_if_symt", index_uni(i))),
          "assigning variable new_sev", index_uni(i));
      }
      current_statement__ = 92;
      for (int i = 1; i <= N_days_tot; ++i) {
        current_statement__ = 90;
        assign(new_die,
          (dot_product(
             rvalue(new_sev, "new_sev",
               index_min_max(rvalue(idx1, "idx1", index_uni(i)), i)),
             rvalue(sev_prg_delay_rv, "sev_prg_delay_rv",
               index_min_max(rvalue(idx2, "idx2", index_uni(i)), Max_delay)))
            * rvalue(p_die_if_sevt, "p_die_if_sevt", index_uni(i))),
          "assigning variable new_die", index_uni(i));
      }
      current_statement__ = 95;
      for (int i = 1; i <= N_days_tot; ++i) {
        current_statement__ = 93;
        assign(new_asy_dx,
          (dot_product(
             elt_multiply(
               rvalue(new_inf, "new_inf",
                 index_min_max(rvalue(idx1, "idx1", index_uni(i)), i)),
               rvalue(p_diag_if_asy, "p_diag_if_asy",
                 index_min_max(rvalue(idx1, "idx1", index_uni(i)), i))),
             rvalue(asy_rec_delay_rv, "asy_rec_delay_rv",
               index_min_max(rvalue(idx2, "idx2", index_uni(i)), Max_delay)))
            * (1 - rvalue(p_sym_if_inft, "p_sym_if_inft", index_uni(i)))),
          "assigning variable new_asy_dx", index_uni(i));
      }
      current_statement__ = 98;
      for (int i = 1; i <= N_days_tot; ++i) {
        current_statement__ = 96;
        assign(new_sym_dx,
          dot_product(
            elt_multiply(
              rvalue(new_sym, "new_sym",
                index_min_max(rvalue(idx1, "idx1", index_uni(i)), i)),
              rvalue(p_diag_if_sym, "p_diag_if_sym",
                index_min_max(rvalue(idx1, "idx1", index_uni(i)), i))),
            rvalue(sym_diag_delay_rv, "sym_diag_delay_rv",
              index_min_max(rvalue(idx2, "idx2", index_uni(i)), Max_delay))),
          "assigning variable new_sym_dx", index_uni(i));
      }
      current_statement__ = 101;
      for (int i = 1; i <= N_days_tot; ++i) {
        current_statement__ = 99;
        assign(dx_sym_sev,
          (dot_product(
             elt_multiply(
               rvalue(new_sym, "new_sym",
                 index_min_max(rvalue(idx1, "idx1", index_uni(i)), i)),
               rvalue(p_diag_if_sym, "p_diag_if_sym",
                 index_min_max(rvalue(idx1, "idx1", index_uni(i)), i))),
             rvalue(sym_prg_delay_rv, "sym_prg_delay_rv",
               index_min_max(rvalue(idx2, "idx2", index_uni(i)), Max_delay)))
            * rvalue(p_sev_if_symt, "p_sev_if_symt", index_uni(i))),
          "assigning variable dx_sym_sev", index_uni(i));
      }
      current_statement__ = 104;
      for (int i = 1; i <= N_days_tot; ++i) {
        current_statement__ = 102;
        assign(dx_sym_die,
          (dot_product(
             rvalue(dx_sym_sev, "dx_sym_sev",
               index_min_max(rvalue(idx1, "idx1", index_uni(i)), i)),
             rvalue(sev_prg_delay_rv, "sev_prg_delay_rv",
               index_min_max(rvalue(idx2, "idx2", index_uni(i)), Max_delay)))
            * rvalue(p_die_if_sevt, "p_die_if_sevt", index_uni(i))),
          "assigning variable dx_sym_die", index_uni(i));
      }
      current_statement__ = 107;
      for (int i = 1; i <= N_days_tot; ++i) {
        current_statement__ = 105;
        assign(new_sev_dx,
          (dot_product(
             subtract(
               rvalue(new_sev, "new_sev",
                 index_min_max(rvalue(idx1, "idx1", index_uni(i)), i)),
               rvalue(dx_sym_sev, "dx_sym_sev",
                 index_min_max(rvalue(idx1, "idx1", index_uni(i)), i))),
             rvalue(sev_diag_delay_rv, "sev_diag_delay_rv",
               index_min_max(rvalue(idx2, "idx2", index_uni(i)), Max_delay)))
            * p_diag_if_sev), "assigning variable new_sev_dx", index_uni(i));
      }
      current_statement__ = 110;
      for (int i = 1; i <= N_days_tot; ++i) {
        current_statement__ = 108;
        assign(dx_sev_die,
          ((dot_product(
              subtract(
                rvalue(new_sev, "new_sev",
                  index_min_max(rvalue(idx1, "idx1", index_uni(i)), i)),
                rvalue(dx_sym_sev, "dx_sym_sev",
                  index_min_max(rvalue(idx1, "idx1", index_uni(i)), i))),
              rvalue(sev_prg_delay_rv, "sev_prg_delay_rv",
                index_min_max(rvalue(idx2, "idx2", index_uni(i)), Max_delay)))
             * p_diag_if_sev) *
            rvalue(p_die_if_sevt, "p_die_if_sevt", index_uni(i))),
          "assigning variable dx_sev_die", index_uni(i));
      }
      current_statement__ = 111;
      assign(diag_all, add(add(new_asy_dx, new_sym_dx), new_sev_dx),
        "assigning variable diag_all");
      current_statement__ = 112;
      assign(new_die_dx, add(dx_sym_die, dx_sev_die),
        "assigning variable new_die_dx");
      current_statement__ = 119;
      if (logical_eq(obs_cas_rep, 1)) {
        current_statement__ = 117;
        for (int i = 1; i <= N_days_tot; ++i) {
          current_statement__ = 115;
          assign(occur_cas,
            dot_product(
              rvalue(diag_all, "diag_all",
                index_min_max(rvalue(idx1, "idx1", index_uni(i)), i)),
              rvalue(cas_rep_delay_rv, "cas_rep_delay_rv",
                index_min_max(rvalue(idx2, "idx2", index_uni(i)), Max_delay))),
            "assigning variable occur_cas", index_uni(i));
        }
      } else {
        current_statement__ = 113;
        assign(occur_cas, elt_multiply(diag_all, cas_cum_report_delay_rv),
          "assigning variable occur_cas");
      }
      current_statement__ = 126;
      if (logical_eq(obs_die_rep, 1)) {
        current_statement__ = 124;
        for (int i = 1; i <= N_days_tot; ++i) {
          current_statement__ = 122;
          assign(occur_die,
            dot_product(
              rvalue(new_die_dx, "new_die_dx",
                index_min_max(rvalue(idx1, "idx1", index_uni(i)), i)),
              rvalue(die_rep_delay_rv, "die_rep_delay_rv",
                index_min_max(rvalue(idx2, "idx2", index_uni(i)), Max_delay))),
            "assigning variable occur_die", index_uni(i));
        }
      } else {
        current_statement__ = 120;
        assign(occur_die, elt_multiply(new_die_dx, die_cum_report_delay_rv),
          "assigning variable occur_die");
      }
      current_statement__ = 127;
      phi_cas = pow(inv_sqrt_phi_c, -2);
      current_statement__ = 128;
      phi_die = pow(inv_sqrt_phi_d, -2);
      current_statement__ = 130;
      if (logical_eq(phi_cas, 0)) {
        current_statement__ = 129;
        phi_cas = 0.0000000001;
      } 
      current_statement__ = 132;
      if (logical_eq(phi_die, 0)) {
        current_statement__ = 131;
        phi_die = 0.0000000001;
      } 
      {
        int tmp_obs_cas;
        tmp_obs_cas = std::numeric_limits<int>::min();
        
        local_scalar_t__ tmp_occur_cas;
        tmp_occur_cas = DUMMY_VAR__;
        
        int tmp_obs_die;
        tmp_obs_die = std::numeric_limits<int>::min();
        
        local_scalar_t__ tmp_occur_die;
        tmp_occur_die = DUMMY_VAR__;
        
        local_scalar_t__ tmp_sum_die_pre;
        tmp_sum_die_pre = DUMMY_VAR__;
        
        local_scalar_t__ tmp_sum_cas_pre;
        tmp_sum_cas_pre = DUMMY_VAR__;
        
        current_statement__ = 249;
        lp_accum__.add(
          normal_lpdf<propto__>(log_new_inf_0, pri_log_new_inf_0_mu,
            pri_log_new_inf_0_sd));
        current_statement__ = 250;
        lp_accum__.add(
          normal_lpdf<propto__>(spl_par_rt, pri_logRt_mu, pri_logRt_sd));
        current_statement__ = 251;
        lp_accum__.add(
          gamma_lpdf<propto__>(serial_i, pri_serial_i_shap,
            pri_serial_i_rate));
        current_statement__ = 252;
        lp_accum__.add(
          normal_lpdf<propto__>(deriv1_spl_par_rt, 0, pri_deriv1_spl_par_sd));
        current_statement__ = 253;
        lp_accum__.add(
          normal_lpdf<propto__>(deriv2_spl_par_rt, 0, pri_deriv2_spl_par_sd));
        current_statement__ = 254;
        lp_accum__.add(
          lognormal_lpdf<propto__>(or_vac_inf, pri_log_or_mu, pri_log_or_sd));
        current_statement__ = 255;
        lp_accum__.add(
          beta_lpdf<propto__>(p_sym_if_inf, pri_p_sym_if_inf_a,
            pri_p_sym_if_inf_b));
        current_statement__ = 256;
        lp_accum__.add(
          beta_lpdf<propto__>(p_sev_if_sym, pri_p_sev_if_sym_a,
            pri_p_sev_if_sym_b));
        current_statement__ = 257;
        lp_accum__.add(
          beta_lpdf<propto__>(p_die_if_sev, pri_p_die_if_sev_a,
            pri_p_die_if_sev_b));
        current_statement__ = 258;
        lp_accum__.add(
          gamma_lpdf<propto__>(ifr_decl_OR, pri_ifr_decl_OR_a,
            pri_ifr_decl_OR_b));
        current_statement__ = 259;
        lp_accum__.add(
          beta_lpdf<propto__>(p_die_if_inf, pri_p_die_if_inf_a,
            pri_p_die_if_inf_b));
        current_statement__ = 260;
        lp_accum__.add(
          beta_lpdf<propto__>(rr_diag_asy_vs_sym, pri_rr_diag_asy_vs_sym_a,
            pri_rr_diag_asy_vs_sym_b));
        current_statement__ = 261;
        lp_accum__.add(
          beta_lpdf<propto__>(spl_par_sym_dx, pri_rr_diag_sym_vs_sev_a,
            pri_rr_diag_sym_vs_sev_b));
        current_statement__ = 262;
        lp_accum__.add(
          beta_lpdf<propto__>(p_diag_if_sev, pri_p_diag_if_sev_a,
            pri_p_diag_if_sev_b));
        current_statement__ = 263;
        lp_accum__.add(
          beta_lpdf<propto__>(scale_dx_delay_sym, scale_dx_delay_sym_a,
            scale_dx_delay_sym_b));
        current_statement__ = 264;
        lp_accum__.add(
          beta_lpdf<propto__>(scale_dx_delay_sev, scale_dx_delay_sev_a,
            scale_dx_delay_sev_b));
        current_statement__ = 265;
        lp_accum__.add(normal_lpdf<propto__>(inv_sqrt_phi_c, 0, 1));
        current_statement__ = 266;
        lp_accum__.add(normal_lpdf<propto__>(inv_sqrt_phi_d, 0, 1));
        current_statement__ = 267;
        lp_accum__.add(dirichlet_lpdf<propto__>(prob_vac, rep_vector(5, 3)));
        current_statement__ = 279;
        if (logical_eq(pre_period_zero, 1)) {
          current_statement__ = 277;
          if (logical_gt(N_days_before, 0)) {
            current_statement__ = 268;
            tmp_sum_cas_pre = sum(
                                rvalue(occur_cas, "occur_cas",
                                  index_min_max(1, N_days_before)));
            current_statement__ = 269;
            tmp_sum_die_pre = sum(
                                rvalue(occur_die, "occur_die",
                                  index_min_max(1, N_days_before)));
            current_statement__ = 271;
            if (logical_lte(tmp_sum_cas_pre, 0)) {
              current_statement__ = 270;
              tmp_sum_cas_pre = 0.0000000001;
            } 
            current_statement__ = 273;
            if (logical_lte(tmp_sum_die_pre, 0)) {
              current_statement__ = 272;
              tmp_sum_die_pre = 0.0000000001;
            } 
            current_statement__ = 274;
            lp_accum__.add(
              neg_binomial_2_lpmf<false>(0, tmp_sum_cas_pre, phi_cas));
            current_statement__ = 275;
            lp_accum__.add(
              neg_binomial_2_lpmf<false>(0, tmp_sum_die_pre, phi_die));
          } 
        } 
        current_statement__ = 297;
        if (logical_eq(cas_yes, 1)) {
          current_statement__ = 280;
          tmp_obs_cas = rvalue(obs_cas, "obs_cas", index_uni(1));
          current_statement__ = 281;
          tmp_occur_cas = rvalue(occur_cas, "occur_cas",
                            index_uni((1 + N_days_before)));
          current_statement__ = 295;
          for (int i = 1; i <= N_days; ++i) {
            current_statement__ = 283;
            if (logical_lte(tmp_occur_cas, 0)) {
              current_statement__ = 282;
              tmp_occur_cas = 0.000000001;
            } 
            current_statement__ = 285;
            if (logical_gte(i, N_days_av)) {
              current_statement__ = 284;
              lp_accum__.add(
                (neg_binomial_2_lpmf<false>(tmp_obs_cas, tmp_occur_cas,
                   phi_cas) / N_days_av));
            } 
            current_statement__ = 289;
            if (logical_gt(i, nda0)) {
              current_statement__ = 286;
              tmp_obs_cas = (tmp_obs_cas -
                              rvalue(obs_cas, "obs_cas",
                                index_uni((i - nda0))));
              current_statement__ = 287;
              tmp_occur_cas = (tmp_occur_cas -
                                rvalue(occur_cas, "occur_cas",
                                  index_uni(((i + N_days_before) - nda0))));
            } 
            current_statement__ = 293;
            if (logical_lt(i, N_days)) {
              current_statement__ = 290;
              tmp_obs_cas = (tmp_obs_cas +
                              rvalue(obs_cas, "obs_cas", index_uni((i + 1))));
              current_statement__ = 291;
              tmp_occur_cas = (tmp_occur_cas +
                                rvalue(occur_cas, "occur_cas",
                                  index_uni(((i + N_days_before) + 1))));
            } 
          }
        } 
        current_statement__ = 318;
        if (logical_eq(die_yes, 1)) {
          current_statement__ = 298;
          tmp_obs_die = rvalue(obs_die, "obs_die", index_uni(1));
          current_statement__ = 299;
          tmp_occur_die = rvalue(occur_die, "occur_die",
                            index_uni((1 + N_days_before)));
          current_statement__ = 316;
          for (int i = 1; i <= N_days; ++i) {
            current_statement__ = 301;
            if (logical_lte(tmp_occur_die, 0)) {
              current_statement__ = 300;
              tmp_occur_die = 0.000000001;
            } 
            current_statement__ = 304;
            if (logical_gt(i, lastDeathDate)) {
              break;
            } 
            current_statement__ = 306;
            if (logical_gte(i, N_days_av)) {
              current_statement__ = 305;
              lp_accum__.add(
                (neg_binomial_2_lpmf<false>(tmp_obs_die, tmp_occur_die,
                   phi_die) / N_days_av));
            } 
            current_statement__ = 310;
            if (logical_gt(i, nda0)) {
              current_statement__ = 307;
              tmp_obs_die = (tmp_obs_die -
                              rvalue(obs_die, "obs_die",
                                index_uni((i - nda0))));
              current_statement__ = 308;
              tmp_occur_die = (tmp_occur_die -
                                rvalue(occur_die, "occur_die",
                                  index_uni(((i + N_days_before) - nda0))));
            } 
            current_statement__ = 314;
            if (logical_lt(i, N_days)) {
              current_statement__ = 311;
              tmp_obs_die = (tmp_obs_die +
                              rvalue(obs_die, "obs_die", index_uni((i + 1))));
              current_statement__ = 312;
              tmp_occur_die = (tmp_occur_die +
                                rvalue(occur_die, "occur_die",
                                  index_uni(((i + N_days_before) + 1))));
            } 
          }
        } 
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "stan_program_default_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double log_new_inf_0;
      log_new_inf_0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      log_new_inf_0 = in__.template read<local_scalar_t__>();
      double serial_i;
      serial_i = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      serial_i = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                   3, 11, lp__);
      Eigen::Matrix<double, -1, 1> spl_par_rt;
      spl_par_rt = Eigen::Matrix<double, -1, 1>(N_spl_par_rt);
      stan::math::fill(spl_par_rt, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      spl_par_rt = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                     N_spl_par_rt);
      double p_sym_if_inf;
      p_sym_if_inf = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      p_sym_if_inf = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                       0, 1, lp__);
      double p_sev_if_sym;
      p_sev_if_sym = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      p_sev_if_sym = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                       0, 1, lp__);
      double p_die_if_sev;
      p_die_if_sev = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      p_die_if_sev = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                       0, 1, lp__);
      double ifr_decl_OR;
      ifr_decl_OR = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      ifr_decl_OR = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                      0, lp__);
      double scale_dx_delay_asy;
      scale_dx_delay_asy = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      scale_dx_delay_asy = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                             0, 1, lp__);
      double scale_dx_delay_sym;
      scale_dx_delay_sym = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      scale_dx_delay_sym = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                             0, 1, lp__);
      double scale_dx_delay_sev;
      scale_dx_delay_sev = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      scale_dx_delay_sev = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                             0, 1, lp__);
      double rr_diag_asy_vs_sym;
      rr_diag_asy_vs_sym = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 11;
      rr_diag_asy_vs_sym = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                             0, 1, lp__);
      double p_diag_if_sev;
      p_diag_if_sev = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 12;
      p_diag_if_sev = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                        0, 1, lp__);
      Eigen::Matrix<double, -1, 1> spl_par_sym_dx;
      spl_par_sym_dx = Eigen::Matrix<double, -1, 1>(N_spl_par_dx);
      stan::math::fill(spl_par_sym_dx, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 13;
      spl_par_sym_dx = in__.template read_constrain_lub<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                         0, 1, lp__, N_spl_par_dx);
      double or_vac_inf;
      or_vac_inf = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 14;
      or_vac_inf = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                     0, lp__);
      double inv_sqrt_phi_c;
      inv_sqrt_phi_c = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 15;
      inv_sqrt_phi_c = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                         0, lp__);
      double inv_sqrt_phi_d;
      inv_sqrt_phi_d = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 16;
      inv_sqrt_phi_d = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                         0, lp__);
      Eigen::Matrix<double, -1, 1> prob_vac;
      prob_vac = Eigen::Matrix<double, -1, 1>(3);
      stan::math::fill(prob_vac, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 17;
      prob_vac = in__.template read_constrain_simplex<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                   lp__, 3);
      Eigen::Matrix<double, -1, 1> log_new_inf;
      log_new_inf = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(log_new_inf, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> new_inf;
      new_inf = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(new_inf, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> deriv1_log_new_inf;
      deriv1_log_new_inf = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(deriv1_log_new_inf, std::numeric_limits<double>::quiet_NaN());
      
      
      double pop_uninf;
      pop_uninf = std::numeric_limits<double>::quiet_NaN();
      
      Eigen::Matrix<double, -1, 1> logRt0;
      logRt0 = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(logRt0, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> logRt;
      logRt = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(logRt, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> Rt;
      Rt = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(Rt, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> deriv1_spl_par_rt;
      deriv1_spl_par_rt = Eigen::Matrix<double, -1, 1>(deriv1_spl_par_rt_1dim__);
      stan::math::fill(deriv1_spl_par_rt, std::numeric_limits<double>::quiet_NaN());
      
      
      Eigen::Matrix<double, -1, 1> deriv2_spl_par_rt;
      deriv2_spl_par_rt = Eigen::Matrix<double, -1, 1>(deriv2_spl_par_rt_1dim__);
      stan::math::fill(deriv2_spl_par_rt, std::numeric_limits<double>::quiet_NaN());
      
      
      Eigen::Matrix<double, -1, 1> p_die_if_sevt;
      p_die_if_sevt = Eigen::Matrix<double, -1, 1>(N_ifr_adj);
      stan::math::fill(p_die_if_sevt, std::numeric_limits<double>::quiet_NaN());
      
      
      Eigen::Matrix<double, -1, 1> p_sev_if_symt;
      p_sev_if_symt = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(p_sev_if_symt, std::numeric_limits<double>::quiet_NaN());
      
      
      Eigen::Matrix<double, -1, 1> p_sym_if_inft;
      p_sym_if_inft = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(p_sym_if_inft, std::numeric_limits<double>::quiet_NaN());
      
      
      Eigen::Matrix<double, -1, 1> rr_diag_sym_vs_sev;
      rr_diag_sym_vs_sev = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(rr_diag_sym_vs_sev, std::numeric_limits<double>::quiet_NaN());
      
      
      Eigen::Matrix<double, -1, 1> p_diag_if_asy;
      p_diag_if_asy = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(p_diag_if_asy, std::numeric_limits<double>::quiet_NaN());
      
      
      Eigen::Matrix<double, -1, 1> p_diag_if_sym;
      p_diag_if_sym = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(p_diag_if_sym, std::numeric_limits<double>::quiet_NaN());
      
      
      Eigen::Matrix<double, -1, 1> sym_diag_delay_rv;
      sym_diag_delay_rv = Eigen::Matrix<double, -1, 1>(Max_delay);
      stan::math::fill(sym_diag_delay_rv, std::numeric_limits<double>::quiet_NaN());
      
      
      Eigen::Matrix<double, -1, 1> sev_diag_delay_rv;
      sev_diag_delay_rv = Eigen::Matrix<double, -1, 1>(Max_delay);
      stan::math::fill(sev_diag_delay_rv, std::numeric_limits<double>::quiet_NaN());
      
      
      double p_die_if_inf;
      p_die_if_inf = std::numeric_limits<double>::quiet_NaN();
      
      Eigen::Matrix<double, -1, 1> new_sym;
      new_sym = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(new_sym, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> new_sev;
      new_sev = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(new_sev, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> new_die;
      new_die = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(new_die, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> new_asy_dx;
      new_asy_dx = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(new_asy_dx, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> new_sym_dx;
      new_sym_dx = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(new_sym_dx, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> new_sev_dx;
      new_sev_dx = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(new_sev_dx, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> dx_sym_sev;
      dx_sym_sev = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(dx_sym_sev, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> dx_sym_die;
      dx_sym_die = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(dx_sym_die, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> dx_sev_die;
      dx_sev_die = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(dx_sev_die, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> diag_all;
      diag_all = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(diag_all, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> new_die_dx;
      new_die_dx = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(new_die_dx, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> occur_cas;
      occur_cas = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(occur_cas, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> occur_die;
      occur_die = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(occur_die, std::numeric_limits<double>::quiet_NaN());
      
      double phi_cas;
      phi_cas = std::numeric_limits<double>::quiet_NaN();
      
      double phi_die;
      phi_die = std::numeric_limits<double>::quiet_NaN();
      
      out__.write(log_new_inf_0);
      out__.write(serial_i);
      out__.write(spl_par_rt);
      out__.write(p_sym_if_inf);
      out__.write(p_sev_if_sym);
      out__.write(p_die_if_sev);
      out__.write(ifr_decl_OR);
      out__.write(scale_dx_delay_asy);
      out__.write(scale_dx_delay_sym);
      out__.write(scale_dx_delay_sev);
      out__.write(rr_diag_asy_vs_sym);
      out__.write(p_diag_if_sev);
      out__.write(spl_par_sym_dx);
      out__.write(or_vac_inf);
      out__.write(inv_sqrt_phi_c);
      out__.write(inv_sqrt_phi_d);
      out__.write(prob_vac);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 51;
      assign(p_die_if_sevt,
        multiply((p_die_if_sev * ifr_adj_fixed),
          add(1.0, multiply(ifr_adj, ifr_decl_OR))),
        "assigning variable p_die_if_sevt");
      current_statement__ = 56;
      for (int i = 1; i <= N_days_tot; ++i) {
        current_statement__ = 52;
        assign(p_die_if_sevt,
          (rvalue(p_die_if_sevt, "p_die_if_sevt", index_uni(i)) *
            pow(rvalue(ifr_vac_adj, "ifr_vac_adj", index_uni(i)),
              rvalue(prob_vac, "prob_vac", index_uni(1)))),
          "assigning variable p_die_if_sevt", index_uni(i));
        current_statement__ = 53;
        assign(p_sev_if_symt,
          (p_sev_if_sym *
            pow(rvalue(ifr_vac_adj, "ifr_vac_adj", index_uni(i)),
              rvalue(prob_vac, "prob_vac", index_uni(2)))),
          "assigning variable p_sev_if_symt", index_uni(i));
        current_statement__ = 54;
        assign(p_sym_if_inft,
          (p_sym_if_inf *
            pow(rvalue(ifr_vac_adj, "ifr_vac_adj", index_uni(i)),
              rvalue(prob_vac, "prob_vac", index_uni(3)))),
          "assigning variable p_sym_if_inft", index_uni(i));
      }
      current_statement__ = 57;
      assign(rr_diag_sym_vs_sev,
        inv_logit(multiply(spl_basis_dx, logit(spl_par_sym_dx))),
        "assigning variable rr_diag_sym_vs_sev");
      current_statement__ = 58;
      assign(p_diag_if_sym, multiply(p_diag_if_sev, rr_diag_sym_vs_sev),
        "assigning variable p_diag_if_sym");
      current_statement__ = 59;
      assign(p_diag_if_asy, multiply(p_diag_if_sym, rr_diag_asy_vs_sym),
        "assigning variable p_diag_if_asy");
      current_statement__ = 63;
      for (int i = 1; i <= Max_delay; ++i) {
        current_statement__ = 60;
        assign(sym_diag_delay_rv,
          (gamma_cdf((i + 0.0), sym_prg_delay_shap,
             (sym_prg_delay_rate / scale_dx_delay_sym)) -
            gamma_cdf((i - 1.0), sym_prg_delay_shap,
              (sym_prg_delay_rate / scale_dx_delay_sym))),
          "assigning variable sym_diag_delay_rv", index_uni(((1 + Max_delay)
                                                              - i)));
        current_statement__ = 61;
        assign(sev_diag_delay_rv,
          (gamma_cdf((i + 0.0), sev_prg_delay_shap,
             (sev_prg_delay_rate / scale_dx_delay_sev)) -
            gamma_cdf((i - 1.0), sev_prg_delay_shap,
              (sev_prg_delay_rate / scale_dx_delay_sev))),
          "assigning variable sev_diag_delay_rv", index_uni(((1 + Max_delay)
                                                              - i)));
      }
      current_statement__ = 64;
      p_die_if_inf = ((p_sym_if_inf * p_sev_if_sym) * p_die_if_sev);
      current_statement__ = 65;
      assign(logRt0, multiply(spl_basis_rt, spl_par_rt),
        "assigning variable logRt0");
      current_statement__ = 66;
      pop_uninf = pop_size;
      current_statement__ = 80;
      for (int i = 1; i <= N_days_tot; ++i) {
        current_statement__ = 71;
        if (logical_eq(i, 1)) {
          current_statement__ = 69;
          assign(logRt, rvalue(logRt0, "logRt0", index_uni(i)),
            "assigning variable logRt", index_uni(i));
        } else {
          current_statement__ = 67;
          assign(logRt,
            (rvalue(logRt0, "logRt0", index_uni(i)) +
              stan::math::log((pop_uninf / pop_size))),
            "assigning variable logRt", index_uni(i));
        }
        current_statement__ = 72;
        assign(deriv1_log_new_inf,
          (rvalue(logRt, "logRt", index_uni(i)) / serial_i),
          "assigning variable deriv1_log_new_inf", index_uni(i));
        current_statement__ = 73;
        assign(log_new_inf,
          (sum(
             rvalue(deriv1_log_new_inf, "deriv1_log_new_inf",
               index_min_max(1, i))) + log_new_inf_0),
          "assigning variable log_new_inf", index_uni(i));
        current_statement__ = 74;
        assign(new_inf,
          ((1 -
             stan::math::exp(
               (-stan::math::exp(
                   rvalue(log_new_inf, "log_new_inf", index_uni(i))) /
                 pop_uninf))) * pop_uninf),
          "assigning variable new_inf", index_uni(i));
        current_statement__ = 75;
        pop_uninf = (pop_uninf - rvalue(new_inf, "new_inf", index_uni(i)));
        current_statement__ = 78;
        if (logical_lt(pop_uninf, 1)) {
          current_statement__ = 76;
          pop_uninf = 1;
        } 
      }
      current_statement__ = 81;
      assign(Rt, stan::math::exp(logRt), "assigning variable Rt");
      current_statement__ = 82;
      assign(deriv2_spl_par_rt,
        subtract(
          subtract(
            multiply(
              rvalue(spl_par_rt, "spl_par_rt",
                index_min_max(2, (N_spl_par_rt - 1))), 2),
            rvalue(spl_par_rt, "spl_par_rt",
              index_min_max(1, (N_spl_par_rt - 2)))),
          rvalue(spl_par_rt, "spl_par_rt", index_min_max(3, N_spl_par_rt))),
        "assigning variable deriv2_spl_par_rt", index_min_max(1, (N_spl_par_rt
                                                                   - 2)));
      current_statement__ = 83;
      assign(deriv1_spl_par_rt,
        subtract(
          rvalue(spl_par_rt, "spl_par_rt", index_min_max(2, N_spl_par_rt)),
          rvalue(spl_par_rt, "spl_par_rt",
            index_min_max(1, (N_spl_par_rt - 1)))),
        "assigning variable deriv1_spl_par_rt", index_min_max(1, (N_spl_par_rt
                                                                   - 1)));
      current_statement__ = 86;
      for (int i = 1; i <= N_days_tot; ++i) {
        current_statement__ = 84;
        assign(new_sym,
          (dot_product(
             rvalue(new_inf, "new_inf",
               index_min_max(rvalue(idx1, "idx1", index_uni(i)), i)),
             rvalue(inf_prg_delay_rv, "inf_prg_delay_rv",
               index_min_max(rvalue(idx2, "idx2", index_uni(i)), Max_delay)))
            * rvalue(p_sym_if_inft, "p_sym_if_inft", index_uni(i))),
          "assigning variable new_sym", index_uni(i));
      }
      current_statement__ = 89;
      for (int i = 1; i <= N_days_tot; ++i) {
        current_statement__ = 87;
        assign(new_sev,
          (dot_product(
             rvalue(new_sym, "new_sym",
               index_min_max(rvalue(idx1, "idx1", index_uni(i)), i)),
             rvalue(sym_prg_delay_rv, "sym_prg_delay_rv",
               index_min_max(rvalue(idx2, "idx2", index_uni(i)), Max_delay)))
            * rvalue(p_sev_if_symt, "p_sev_if_symt", index_uni(i))),
          "assigning variable new_sev", index_uni(i));
      }
      current_statement__ = 92;
      for (int i = 1; i <= N_days_tot; ++i) {
        current_statement__ = 90;
        assign(new_die,
          (dot_product(
             rvalue(new_sev, "new_sev",
               index_min_max(rvalue(idx1, "idx1", index_uni(i)), i)),
             rvalue(sev_prg_delay_rv, "sev_prg_delay_rv",
               index_min_max(rvalue(idx2, "idx2", index_uni(i)), Max_delay)))
            * rvalue(p_die_if_sevt, "p_die_if_sevt", index_uni(i))),
          "assigning variable new_die", index_uni(i));
      }
      current_statement__ = 95;
      for (int i = 1; i <= N_days_tot; ++i) {
        current_statement__ = 93;
        assign(new_asy_dx,
          (dot_product(
             elt_multiply(
               rvalue(new_inf, "new_inf",
                 index_min_max(rvalue(idx1, "idx1", index_uni(i)), i)),
               rvalue(p_diag_if_asy, "p_diag_if_asy",
                 index_min_max(rvalue(idx1, "idx1", index_uni(i)), i))),
             rvalue(asy_rec_delay_rv, "asy_rec_delay_rv",
               index_min_max(rvalue(idx2, "idx2", index_uni(i)), Max_delay)))
            * (1 - rvalue(p_sym_if_inft, "p_sym_if_inft", index_uni(i)))),
          "assigning variable new_asy_dx", index_uni(i));
      }
      current_statement__ = 98;
      for (int i = 1; i <= N_days_tot; ++i) {
        current_statement__ = 96;
        assign(new_sym_dx,
          dot_product(
            elt_multiply(
              rvalue(new_sym, "new_sym",
                index_min_max(rvalue(idx1, "idx1", index_uni(i)), i)),
              rvalue(p_diag_if_sym, "p_diag_if_sym",
                index_min_max(rvalue(idx1, "idx1", index_uni(i)), i))),
            rvalue(sym_diag_delay_rv, "sym_diag_delay_rv",
              index_min_max(rvalue(idx2, "idx2", index_uni(i)), Max_delay))),
          "assigning variable new_sym_dx", index_uni(i));
      }
      current_statement__ = 101;
      for (int i = 1; i <= N_days_tot; ++i) {
        current_statement__ = 99;
        assign(dx_sym_sev,
          (dot_product(
             elt_multiply(
               rvalue(new_sym, "new_sym",
                 index_min_max(rvalue(idx1, "idx1", index_uni(i)), i)),
               rvalue(p_diag_if_sym, "p_diag_if_sym",
                 index_min_max(rvalue(idx1, "idx1", index_uni(i)), i))),
             rvalue(sym_prg_delay_rv, "sym_prg_delay_rv",
               index_min_max(rvalue(idx2, "idx2", index_uni(i)), Max_delay)))
            * rvalue(p_sev_if_symt, "p_sev_if_symt", index_uni(i))),
          "assigning variable dx_sym_sev", index_uni(i));
      }
      current_statement__ = 104;
      for (int i = 1; i <= N_days_tot; ++i) {
        current_statement__ = 102;
        assign(dx_sym_die,
          (dot_product(
             rvalue(dx_sym_sev, "dx_sym_sev",
               index_min_max(rvalue(idx1, "idx1", index_uni(i)), i)),
             rvalue(sev_prg_delay_rv, "sev_prg_delay_rv",
               index_min_max(rvalue(idx2, "idx2", index_uni(i)), Max_delay)))
            * rvalue(p_die_if_sevt, "p_die_if_sevt", index_uni(i))),
          "assigning variable dx_sym_die", index_uni(i));
      }
      current_statement__ = 107;
      for (int i = 1; i <= N_days_tot; ++i) {
        current_statement__ = 105;
        assign(new_sev_dx,
          (dot_product(
             subtract(
               rvalue(new_sev, "new_sev",
                 index_min_max(rvalue(idx1, "idx1", index_uni(i)), i)),
               rvalue(dx_sym_sev, "dx_sym_sev",
                 index_min_max(rvalue(idx1, "idx1", index_uni(i)), i))),
             rvalue(sev_diag_delay_rv, "sev_diag_delay_rv",
               index_min_max(rvalue(idx2, "idx2", index_uni(i)), Max_delay)))
            * p_diag_if_sev), "assigning variable new_sev_dx", index_uni(i));
      }
      current_statement__ = 110;
      for (int i = 1; i <= N_days_tot; ++i) {
        current_statement__ = 108;
        assign(dx_sev_die,
          ((dot_product(
              subtract(
                rvalue(new_sev, "new_sev",
                  index_min_max(rvalue(idx1, "idx1", index_uni(i)), i)),
                rvalue(dx_sym_sev, "dx_sym_sev",
                  index_min_max(rvalue(idx1, "idx1", index_uni(i)), i))),
              rvalue(sev_prg_delay_rv, "sev_prg_delay_rv",
                index_min_max(rvalue(idx2, "idx2", index_uni(i)), Max_delay)))
             * p_diag_if_sev) *
            rvalue(p_die_if_sevt, "p_die_if_sevt", index_uni(i))),
          "assigning variable dx_sev_die", index_uni(i));
      }
      current_statement__ = 111;
      assign(diag_all, add(add(new_asy_dx, new_sym_dx), new_sev_dx),
        "assigning variable diag_all");
      current_statement__ = 112;
      assign(new_die_dx, add(dx_sym_die, dx_sev_die),
        "assigning variable new_die_dx");
      current_statement__ = 119;
      if (logical_eq(obs_cas_rep, 1)) {
        current_statement__ = 117;
        for (int i = 1; i <= N_days_tot; ++i) {
          current_statement__ = 115;
          assign(occur_cas,
            dot_product(
              rvalue(diag_all, "diag_all",
                index_min_max(rvalue(idx1, "idx1", index_uni(i)), i)),
              rvalue(cas_rep_delay_rv, "cas_rep_delay_rv",
                index_min_max(rvalue(idx2, "idx2", index_uni(i)), Max_delay))),
            "assigning variable occur_cas", index_uni(i));
        }
      } else {
        current_statement__ = 113;
        assign(occur_cas, elt_multiply(diag_all, cas_cum_report_delay_rv),
          "assigning variable occur_cas");
      }
      current_statement__ = 126;
      if (logical_eq(obs_die_rep, 1)) {
        current_statement__ = 124;
        for (int i = 1; i <= N_days_tot; ++i) {
          current_statement__ = 122;
          assign(occur_die,
            dot_product(
              rvalue(new_die_dx, "new_die_dx",
                index_min_max(rvalue(idx1, "idx1", index_uni(i)), i)),
              rvalue(die_rep_delay_rv, "die_rep_delay_rv",
                index_min_max(rvalue(idx2, "idx2", index_uni(i)), Max_delay))),
            "assigning variable occur_die", index_uni(i));
        }
      } else {
        current_statement__ = 120;
        assign(occur_die, elt_multiply(new_die_dx, die_cum_report_delay_rv),
          "assigning variable occur_die");
      }
      current_statement__ = 127;
      phi_cas = pow(inv_sqrt_phi_c, -2);
      current_statement__ = 128;
      phi_die = pow(inv_sqrt_phi_d, -2);
      current_statement__ = 130;
      if (logical_eq(phi_cas, 0)) {
        current_statement__ = 129;
        phi_cas = 0.0000000001;
      } 
      current_statement__ = 132;
      if (logical_eq(phi_die, 0)) {
        current_statement__ = 131;
        phi_die = 0.0000000001;
      } 
      if (emit_transformed_parameters__) {
        out__.write(log_new_inf);
        out__.write(new_inf);
        out__.write(deriv1_log_new_inf);
        out__.write(pop_uninf);
        out__.write(logRt0);
        out__.write(logRt);
        out__.write(Rt);
        out__.write(deriv1_spl_par_rt);
        out__.write(deriv2_spl_par_rt);
        out__.write(p_die_if_sevt);
        out__.write(p_sev_if_symt);
        out__.write(p_sym_if_inft);
        out__.write(rr_diag_sym_vs_sev);
        out__.write(p_diag_if_asy);
        out__.write(p_diag_if_sym);
        out__.write(sym_diag_delay_rv);
        out__.write(sev_diag_delay_rv);
        out__.write(p_die_if_inf);
        out__.write(new_sym);
        out__.write(new_sev);
        out__.write(new_die);
        out__.write(new_asy_dx);
        out__.write(new_sym_dx);
        out__.write(new_sev_dx);
        out__.write(dx_sym_sev);
        out__.write(dx_sym_die);
        out__.write(dx_sev_die);
        out__.write(diag_all);
        out__.write(new_die_dx);
        out__.write(occur_cas);
        out__.write(occur_die);
        out__.write(phi_cas);
        out__.write(phi_die);
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<int> idx1b;
      idx1b = std::vector<int>(N_days_tot, std::numeric_limits<int>::min());
      
      std::vector<int> idx2b;
      idx2b = std::vector<int>(N_days_tot, std::numeric_limits<int>::min());
      
      double p_die_if_sym;
      p_die_if_sym = std::numeric_limits<double>::quiet_NaN();
      
      Eigen::Matrix<double, -1, 1> diag_cases;
      diag_cases = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(diag_cases, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> cumulative_incidence;
      cumulative_incidence = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(cumulative_incidence, std::numeric_limits<double>::quiet_NaN());
      
      
      Eigen::Matrix<double, -1, 1> sero_positive;
      sero_positive = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(sero_positive, std::numeric_limits<double>::quiet_NaN());
      
      
      Eigen::Matrix<double, -1, 1> pop_infectiousness;
      pop_infectiousness = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(pop_infectiousness, std::numeric_limits<double>::quiet_NaN());
      
      
      Eigen::Matrix<double, -1, 1> infect_dist_rv;
      infect_dist_rv = Eigen::Matrix<double, -1, 1>(Max_delay);
      stan::math::fill(infect_dist_rv, std::numeric_limits<double>::quiet_NaN());
      
      
      Eigen::Matrix<double, -1, 1> seropos_dist_rv;
      seropos_dist_rv = Eigen::Matrix<double, -1, 1>(500);
      stan::math::fill(seropos_dist_rv, std::numeric_limits<double>::quiet_NaN());
      
      
      Eigen::Matrix<double, -1, 1> vac_only;
      vac_only = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(vac_only, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> inf_only;
      inf_only = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(inf_only, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> both_only;
      both_only = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(both_only, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> immune_vac;
      immune_vac = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(immune_vac, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> immune_inf;
      immune_inf = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(immune_inf, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> immune_both;
      immune_both = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(immune_both, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> immune_waning;
      immune_waning = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(immune_waning, std::numeric_limits<double>::quiet_NaN());
      
      
      Eigen::Matrix<double, -1, 1> immune_sev_vac;
      immune_sev_vac = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(immune_sev_vac, std::numeric_limits<double>::quiet_NaN());
      
      
      Eigen::Matrix<double, -1, 1> immune_sev_inf;
      immune_sev_inf = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(immune_sev_inf, std::numeric_limits<double>::quiet_NaN());
      
      
      Eigen::Matrix<double, -1, 1> immune_sev_both;
      immune_sev_both = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(immune_sev_both, std::numeric_limits<double>::quiet_NaN());
      
      
      Eigen::Matrix<double, -1, 1> immune_sev_waning;
      immune_sev_waning = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(immune_sev_waning, std::numeric_limits<double>::quiet_NaN());
      
      
      Eigen::Matrix<double, -1, 1> vac_inf;
      vac_inf = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(vac_inf, std::numeric_limits<double>::quiet_NaN());
      
      double OR;
      OR = std::numeric_limits<double>::quiet_NaN();
      
      Eigen::Matrix<double, -1, 1> cum_p_inf;
      cum_p_inf = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(cum_p_inf, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> cum_p_inf_recent;
      cum_p_inf_recent = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(cum_p_inf_recent, std::numeric_limits<double>::quiet_NaN());
      
      
      Eigen::Matrix<double, -1, 1> cum_p_vac;
      cum_p_vac = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(cum_p_vac, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> cum_p_vac_recent;
      cum_p_vac_recent = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(cum_p_vac_recent, std::numeric_limits<double>::quiet_NaN());
      
      
      Eigen::Matrix<double, -1, 1> p_immune;
      p_immune = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(p_immune, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> p_immune_over12;
      p_immune_over12 = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(p_immune_over12, std::numeric_limits<double>::quiet_NaN());
      
      
      Eigen::Matrix<double, -1, 1> p_immune_recent;
      p_immune_recent = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(p_immune_recent, std::numeric_limits<double>::quiet_NaN());
      
      
      Eigen::Matrix<double, -1, 1> p_immune_recent_over12;
      p_immune_recent_over12 = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(p_immune_recent_over12, std::numeric_limits<double>::quiet_NaN());
      
      
      Eigen::Matrix<double, -1, 1> p_immune_independence;
      p_immune_independence = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(p_immune_independence, std::numeric_limits<double>::quiet_NaN());
      
      
      Eigen::Matrix<double, -1, 1> p_immune_independence_over12;
      p_immune_independence_over12 = Eigen::Matrix<double, -1, 1>(N_days_tot);
      stan::math::fill(p_immune_independence_over12, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 165;
      assign(cumulative_incidence, cumulative_sum(new_inf),
        "assigning variable cumulative_incidence");
      current_statement__ = 166;
      p_die_if_sym = (p_die_if_sev * p_sev_if_sym);
      current_statement__ = 167;
      assign(diag_cases, add(new_sym_dx, new_sev_dx),
        "assigning variable diag_cases");
      current_statement__ = 168;
      OR = or_vac_inf;
      current_statement__ = 169;
      assign(cum_p_inf, divide(cumulative_incidence, pop_size),
        "assigning variable cum_p_inf");
      current_statement__ = 191;
      for (int i = 1; i <= N_days_tot; ++i) {
        current_statement__ = 177;
        if (logical_lte(i, N_days_before)) {
          current_statement__ = 175;
          assign(cum_p_vac, 0, "assigning variable cum_p_vac", index_uni(i));
        } else {
          current_statement__ = 170;
          assign(cum_p_vac,
            (rvalue(obs_vac, "obs_vac", index_uni((i - N_days_before))) /
              (1.0 - pop_under12)),
            "assigning variable cum_p_vac", index_uni(i));
          current_statement__ = 173;
          if (logical_gt(rvalue(cum_p_vac, "cum_p_vac", index_uni(i)), .999)) {
            current_statement__ = 171;
            assign(cum_p_vac, .999,
              "assigning variable cum_p_vac", index_uni(i));
          } 
        }
        current_statement__ = 178;
        assign(cum_p_inf_recent,
          rvalue(cum_p_inf, "cum_p_inf", index_uni(i)),
          "assigning variable cum_p_inf_recent", index_uni(i));
        current_statement__ = 179;
        assign(cum_p_vac_recent,
          rvalue(cum_p_vac, "cum_p_vac", index_uni(i)),
          "assigning variable cum_p_vac_recent", index_uni(i));
        current_statement__ = 183;
        if (logical_gt(i, ndays_recent_imm)) {
          current_statement__ = 180;
          assign(cum_p_inf_recent,
            (rvalue(cum_p_inf_recent, "cum_p_inf_recent", index_uni(i)) -
              rvalue(cum_p_inf, "cum_p_inf",
                index_uni((i - ndays_recent_imm)))),
            "assigning variable cum_p_inf_recent", index_uni(i));
          current_statement__ = 181;
          assign(cum_p_vac_recent,
            (rvalue(cum_p_vac_recent, "cum_p_vac_recent", index_uni(i)) -
              rvalue(cum_p_vac, "cum_p_vac",
                index_uni((i - ndays_recent_imm)))),
            "assigning variable cum_p_vac_recent", index_uni(i));
        } 
        current_statement__ = 184;
        assign(p_immune_over12,
          solveOR(or_vac_inf, rvalue(cum_p_inf, "cum_p_inf", index_uni(i)),
            rvalue(cum_p_vac, "cum_p_vac", index_uni(i)), pstream__),
          "assigning variable p_immune_over12", index_uni(i));
        current_statement__ = 185;
        assign(p_immune_recent_over12,
          solveOR(or_vac_inf,
            rvalue(cum_p_inf_recent, "cum_p_inf_recent", index_uni(i)),
            rvalue(cum_p_vac_recent, "cum_p_vac_recent", index_uni(i)), pstream__),
          "assigning variable p_immune_recent_over12", index_uni(i));
        current_statement__ = 186;
        assign(p_immune_independence_over12,
          (1 -
            ((1 - rvalue(cum_p_inf, "cum_p_inf", index_uni(i))) *
              (1 - rvalue(cum_p_vac, "cum_p_vac", index_uni(i))))),
          "assigning variable p_immune_independence_over12", index_uni(i));
        current_statement__ = 187;
        assign(p_immune,
          ((rvalue(p_immune_over12, "p_immune_over12", index_uni(i)) *
             (1 - pop_under12)) +
            (rvalue(cum_p_inf, "cum_p_inf", index_uni(i)) * pop_under12)),
          "assigning variable p_immune", index_uni(i));
        current_statement__ = 188;
        assign(p_immune_recent,
          ((rvalue(p_immune_recent_over12, "p_immune_recent_over12",
              index_uni(i)) * (1 - pop_under12)) +
            (rvalue(cum_p_inf_recent, "cum_p_inf_recent", index_uni(i)) *
              pop_under12)),
          "assigning variable p_immune_recent", index_uni(i));
        current_statement__ = 189;
        assign(p_immune_independence,
          ((rvalue(p_immune_independence_over12,
              "p_immune_independence_over12", index_uni(i)) *
             (1 - pop_under12)) +
            (rvalue(cum_p_inf, "cum_p_inf", index_uni(i)) * pop_under12)),
          "assigning variable p_immune_independence", index_uni(i));
      }
      current_statement__ = 200;
      for (int i = 1; i <= N_days_tot; ++i) {
        current_statement__ = 198;
        if (logical_gt((i - 500), 0)) {
          current_statement__ = 195;
          assign(idx1b, ((i - 500) + 1),
            "assigning variable idx1b", index_uni(i));
          current_statement__ = 196;
          assign(idx2b, 1, "assigning variable idx2b", index_uni(i));
        } else {
          current_statement__ = 192;
          assign(idx1b, 1, "assigning variable idx1b", index_uni(i));
          current_statement__ = 193;
          assign(idx2b, ((500 - i) + 1),
            "assigning variable idx2b", index_uni(i));
        }
      }
      current_statement__ = 203;
      for (int i = 1; i <= Max_delay; ++i) {
        current_statement__ = 201;
        assign(infect_dist_rv,
          (gamma_cdf((i + 0.0), infect_dist_shap, infect_dist_rate) -
            gamma_cdf((i - 1.0), infect_dist_shap, infect_dist_rate)),
          "assigning variable infect_dist_rv", index_uni(((1 + Max_delay) -
                                                           i)));
      }
      current_statement__ = 206;
      for (int i = 1; i <= 500; ++i) {
        current_statement__ = 204;
        assign(seropos_dist_rv,
          (1.0 - gamma_cdf((i + 0.0), seropos_dist_shap, seropos_dist_rate)),
          "assigning variable seropos_dist_rv", index_uni(((1 + 500) - i)));
      }
      current_statement__ = 209;
      for (int i = 1; i <= N_days_tot; ++i) {
        current_statement__ = 207;
        assign(vac_inf,
          (((rvalue(cum_p_vac, "cum_p_vac", index_uni(i)) +
              rvalue(cum_p_inf, "cum_p_inf", index_uni(i))) -
             rvalue(p_immune, "p_immune", index_uni(i))) /
            rvalue(cum_p_inf, "cum_p_inf", index_uni(i))),
          "assigning variable vac_inf", index_uni(i));
      }
      current_statement__ = 236;
      for (int i = 1; i <= N_days_tot; ++i) {
        current_statement__ = 234;
        if (logical_eq(i, 1)) {
          current_statement__ = 222;
          assign(inf_only, rvalue(cum_p_inf, "cum_p_inf", index_uni(1)),
            "assigning variable inf_only", index_uni(1));
          current_statement__ = 223;
          assign(vac_only, rvalue(cum_p_vac, "cum_p_vac", index_uni(1)),
            "assigning variable vac_only", index_uni(1));
          current_statement__ = 224;
          assign(both_only,
            ((rvalue(vac_only, "vac_only", index_uni(1)) +
               rvalue(inf_only, "inf_only", index_uni(1))) -
              rvalue(p_immune, "p_immune", index_uni(1))),
            "assigning variable both_only", index_uni(1));
          current_statement__ = 225;
          assign(immune_vac,
            (rvalue(vac_only, "vac_only", index_uni(1)) *
              rvalue(waning_vacinf, "waning_vacinf", index_uni(1))),
            "assigning variable immune_vac", index_uni(1));
          current_statement__ = 226;
          assign(immune_inf,
            (rvalue(inf_only, "inf_only", index_uni(1)) *
              rvalue(waning_vacinf, "waning_vacinf", index_uni(1))),
            "assigning variable immune_inf", index_uni(1));
          current_statement__ = 227;
          assign(immune_both,
            (rvalue(both_only, "both_only", index_uni(1)) *
              rvalue(waning_both, "waning_both", index_uni(1))),
            "assigning variable immune_both", index_uni(1));
          current_statement__ = 228;
          assign(immune_waning,
            ((rvalue(immune_vac, "immune_vac", index_uni(1)) +
               rvalue(immune_inf, "immune_inf", index_uni(1))) +
              rvalue(immune_both, "immune_both", index_uni(1))),
            "assigning variable immune_waning", index_uni(1));
          current_statement__ = 229;
          assign(immune_sev_vac,
            (rvalue(vac_only, "vac_only", index_uni(1)) *
              rvalue(sev_vacinf, "sev_vacinf", index_uni(1))),
            "assigning variable immune_sev_vac", index_uni(1));
          current_statement__ = 230;
          assign(immune_sev_inf,
            (rvalue(inf_only, "inf_only", index_uni(1)) *
              rvalue(sev_vacinf, "sev_vacinf", index_uni(1))),
            "assigning variable immune_sev_inf", index_uni(1));
          current_statement__ = 231;
          assign(immune_sev_both,
            (rvalue(both_only, "both_only", index_uni(1)) *
              rvalue(sev_both, "sev_both", index_uni(1))),
            "assigning variable immune_sev_both", index_uni(1));
          current_statement__ = 232;
          assign(immune_sev_waning,
            ((rvalue(immune_sev_vac, "immune_sev_vac", index_uni(1)) +
               rvalue(immune_sev_inf, "immune_sev_inf", index_uni(1))) +
              rvalue(immune_sev_both, "immune_sev_both", index_uni(1))),
            "assigning variable immune_sev_waning", index_uni(1));
        } else {
          current_statement__ = 210;
          assign(inf_only,
            (rvalue(cum_p_inf, "cum_p_inf", index_uni(i)) -
              rvalue(cum_p_inf, "cum_p_inf", index_uni((i - 1)))),
            "assigning variable inf_only", index_uni(i));
          current_statement__ = 211;
          assign(vac_only,
            (rvalue(cum_p_vac, "cum_p_vac", index_uni(i)) -
              rvalue(cum_p_vac, "cum_p_vac", index_uni((i - 1)))),
            "assigning variable vac_only", index_uni(i));
          current_statement__ = 212;
          assign(both_only,
            ((rvalue(vac_only, "vac_only", index_uni(i)) +
               rvalue(inf_only, "inf_only", index_uni(i))) -
              (rvalue(p_immune, "p_immune", index_uni(i)) -
                rvalue(p_immune, "p_immune", index_uni((i - 1))))),
            "assigning variable both_only", index_uni(i));
          current_statement__ = 213;
          assign(immune_vac,
            dot_product(
              multiply(rvalue(vac_only, "vac_only", index_min_max(1, i)),
                (1 - rvalue(cum_p_inf, "cum_p_inf", index_uni(i)))),
              rvalue(waning_vacinf, "waning_vacinf", index_min_max(1, i))),
            "assigning variable immune_vac", index_uni(i));
          current_statement__ = 214;
          assign(immune_inf,
            dot_product(
              multiply(rvalue(inf_only, "inf_only", index_min_max(1, i)),
                (1 - rvalue(vac_inf, "vac_inf", index_uni(i)))),
              rvalue(waning_vacinf, "waning_vacinf", index_min_max(1, i))),
            "assigning variable immune_inf", index_uni(i));
          current_statement__ = 215;
          assign(immune_both,
            dot_product(rvalue(both_only, "both_only", index_min_max(1, i)),
              rvalue(waning_both, "waning_both", index_min_max(1, i))),
            "assigning variable immune_both", index_uni(i));
          current_statement__ = 216;
          assign(immune_waning,
            ((rvalue(immune_vac, "immune_vac", index_uni(i)) +
               rvalue(immune_inf, "immune_inf", index_uni(i))) +
              rvalue(immune_both, "immune_both", index_uni(i))),
            "assigning variable immune_waning", index_uni(i));
          current_statement__ = 217;
          assign(immune_sev_vac,
            dot_product(
              multiply(rvalue(vac_only, "vac_only", index_min_max(1, i)),
                (1 - rvalue(cum_p_inf, "cum_p_inf", index_uni(i)))),
              rvalue(sev_vacinf, "sev_vacinf", index_min_max(1, i))),
            "assigning variable immune_sev_vac", index_uni(i));
          current_statement__ = 218;
          assign(immune_sev_inf,
            dot_product(
              multiply(rvalue(inf_only, "inf_only", index_min_max(1, i)),
                (1 - rvalue(vac_inf, "vac_inf", index_uni(i)))),
              rvalue(sev_vacinf, "sev_vacinf", index_min_max(1, i))),
            "assigning variable immune_sev_inf", index_uni(i));
          current_statement__ = 219;
          assign(immune_sev_both,
            dot_product(rvalue(both_only, "both_only", index_min_max(1, i)),
              rvalue(sev_both, "sev_both", index_min_max(1, i))),
            "assigning variable immune_sev_both", index_uni(i));
          current_statement__ = 220;
          assign(immune_sev_waning,
            ((rvalue(immune_sev_vac, "immune_sev_vac", index_uni(i)) +
               rvalue(immune_sev_inf, "immune_sev_inf", index_uni(i))) +
              rvalue(immune_sev_both, "immune_sev_both", index_uni(i))),
            "assigning variable immune_sev_waning", index_uni(i));
        }
      }
      current_statement__ = 239;
      for (int i = 1; i <= N_days_tot; ++i) {
        current_statement__ = 237;
        assign(pop_infectiousness,
          dot_product(
            rvalue(new_inf, "new_inf",
              index_min_max(rvalue(idx1, "idx1", index_uni(i)), i)),
            rvalue(infect_dist_rv, "infect_dist_rv",
              index_min_max(rvalue(idx2, "idx2", index_uni(i)), Max_delay))),
          "assigning variable pop_infectiousness", index_uni(i));
      }
      current_statement__ = 242;
      for (int i = 1; i <= N_days_tot; ++i) {
        current_statement__ = 240;
        assign(sero_positive,
          dot_product(
            rvalue(new_inf, "new_inf",
              index_min_max(rvalue(idx1b, "idx1b", index_uni(i)), i)),
            rvalue(seropos_dist_rv, "seropos_dist_rv",
              index_min_max(rvalue(idx2b, "idx2b", index_uni(i)), 500))),
          "assigning variable sero_positive", index_uni(i));
      }
      out__.write(idx1b);
      out__.write(idx2b);
      out__.write(p_die_if_sym);
      out__.write(diag_cases);
      out__.write(cumulative_incidence);
      out__.write(sero_positive);
      out__.write(pop_infectiousness);
      out__.write(infect_dist_rv);
      out__.write(seropos_dist_rv);
      out__.write(vac_only);
      out__.write(inf_only);
      out__.write(both_only);
      out__.write(immune_vac);
      out__.write(immune_inf);
      out__.write(immune_both);
      out__.write(immune_waning);
      out__.write(immune_sev_vac);
      out__.write(immune_sev_inf);
      out__.write(immune_sev_both);
      out__.write(immune_sev_waning);
      out__.write(vac_inf);
      out__.write(OR);
      out__.write(cum_p_inf);
      out__.write(cum_p_inf_recent);
      out__.write(cum_p_vac);
      out__.write(cum_p_vac_recent);
      out__.write(p_immune);
      out__.write(p_immune_over12);
      out__.write(p_immune_recent);
      out__.write(p_immune_recent_over12);
      out__.write(p_immune_independence);
      out__.write(p_immune_independence_over12);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      local_scalar_t__ log_new_inf_0;
      log_new_inf_0 = DUMMY_VAR__;
      
      log_new_inf_0 = in__.read<local_scalar_t__>();
      out__.write(log_new_inf_0);
      local_scalar_t__ serial_i;
      serial_i = DUMMY_VAR__;
      
      serial_i = in__.read<local_scalar_t__>();
      out__.write_free_lub(3, 11, serial_i);
      Eigen::Matrix<local_scalar_t__, -1, 1> spl_par_rt;
      spl_par_rt = Eigen::Matrix<local_scalar_t__, -1, 1>(N_spl_par_rt);
      stan::math::fill(spl_par_rt, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N_spl_par_rt; ++sym1__) {
        assign(spl_par_rt, in__.read<local_scalar_t__>(),
          "assigning variable spl_par_rt", index_uni(sym1__));
      }
      out__.write(spl_par_rt);
      local_scalar_t__ p_sym_if_inf;
      p_sym_if_inf = DUMMY_VAR__;
      
      p_sym_if_inf = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, p_sym_if_inf);
      local_scalar_t__ p_sev_if_sym;
      p_sev_if_sym = DUMMY_VAR__;
      
      p_sev_if_sym = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, p_sev_if_sym);
      local_scalar_t__ p_die_if_sev;
      p_die_if_sev = DUMMY_VAR__;
      
      p_die_if_sev = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, p_die_if_sev);
      local_scalar_t__ ifr_decl_OR;
      ifr_decl_OR = DUMMY_VAR__;
      
      ifr_decl_OR = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, ifr_decl_OR);
      local_scalar_t__ scale_dx_delay_asy;
      scale_dx_delay_asy = DUMMY_VAR__;
      
      scale_dx_delay_asy = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, scale_dx_delay_asy);
      local_scalar_t__ scale_dx_delay_sym;
      scale_dx_delay_sym = DUMMY_VAR__;
      
      scale_dx_delay_sym = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, scale_dx_delay_sym);
      local_scalar_t__ scale_dx_delay_sev;
      scale_dx_delay_sev = DUMMY_VAR__;
      
      scale_dx_delay_sev = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, scale_dx_delay_sev);
      local_scalar_t__ rr_diag_asy_vs_sym;
      rr_diag_asy_vs_sym = DUMMY_VAR__;
      
      rr_diag_asy_vs_sym = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, rr_diag_asy_vs_sym);
      local_scalar_t__ p_diag_if_sev;
      p_diag_if_sev = DUMMY_VAR__;
      
      p_diag_if_sev = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, p_diag_if_sev);
      Eigen::Matrix<local_scalar_t__, -1, 1> spl_par_sym_dx;
      spl_par_sym_dx = Eigen::Matrix<local_scalar_t__, -1, 1>(N_spl_par_dx);
      stan::math::fill(spl_par_sym_dx, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N_spl_par_dx; ++sym1__) {
        assign(spl_par_sym_dx, in__.read<local_scalar_t__>(),
          "assigning variable spl_par_sym_dx", index_uni(sym1__));
      }
      out__.write_free_lub(0, 1, spl_par_sym_dx);
      local_scalar_t__ or_vac_inf;
      or_vac_inf = DUMMY_VAR__;
      
      or_vac_inf = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, or_vac_inf);
      local_scalar_t__ inv_sqrt_phi_c;
      inv_sqrt_phi_c = DUMMY_VAR__;
      
      inv_sqrt_phi_c = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, inv_sqrt_phi_c);
      local_scalar_t__ inv_sqrt_phi_d;
      inv_sqrt_phi_d = DUMMY_VAR__;
      
      inv_sqrt_phi_d = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, inv_sqrt_phi_d);
      Eigen::Matrix<local_scalar_t__, -1, 1> prob_vac;
      prob_vac = Eigen::Matrix<local_scalar_t__, -1, 1>(3);
      stan::math::fill(prob_vac, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        assign(prob_vac, in__.read<local_scalar_t__>(),
          "assigning variable prob_vac", index_uni(sym1__));
      }
      out__.write_free_simplex(prob_vac);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"log_new_inf_0", "serial_i",
      "spl_par_rt", "p_sym_if_inf", "p_sev_if_sym", "p_die_if_sev",
      "ifr_decl_OR", "scale_dx_delay_asy", "scale_dx_delay_sym",
      "scale_dx_delay_sev", "rr_diag_asy_vs_sym", "p_diag_if_sev",
      "spl_par_sym_dx", "or_vac_inf", "inv_sqrt_phi_c", "inv_sqrt_phi_d",
      "prob_vac", "log_new_inf", "new_inf", "deriv1_log_new_inf",
      "pop_uninf", "logRt0", "logRt", "Rt", "deriv1_spl_par_rt",
      "deriv2_spl_par_rt", "p_die_if_sevt", "p_sev_if_symt", "p_sym_if_inft",
      "rr_diag_sym_vs_sev", "p_diag_if_asy", "p_diag_if_sym",
      "sym_diag_delay_rv", "sev_diag_delay_rv", "p_die_if_inf", "new_sym",
      "new_sev", "new_die", "new_asy_dx", "new_sym_dx", "new_sev_dx",
      "dx_sym_sev", "dx_sym_die", "dx_sev_die", "diag_all", "new_die_dx",
      "occur_cas", "occur_die", "phi_cas", "phi_die", "idx1b", "idx2b",
      "p_die_if_sym", "diag_cases", "cumulative_incidence", "sero_positive",
      "pop_infectiousness", "infect_dist_rv", "seropos_dist_rv", "vac_only",
      "inf_only", "both_only", "immune_vac", "immune_inf", "immune_both",
      "immune_waning", "immune_sev_vac", "immune_sev_inf", "immune_sev_both",
      "immune_sev_waning", "vac_inf", "OR", "cum_p_inf", "cum_p_inf_recent",
      "cum_p_vac", "cum_p_vac_recent", "p_immune", "p_immune_over12",
      "p_immune_recent", "p_immune_recent_over12", "p_immune_independence",
      "p_immune_independence_over12"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(N_spl_par_rt)},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(N_spl_par_dx)},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(3)},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{static_cast<size_t>(deriv1_spl_par_rt_1dim__)},
      std::vector<size_t>{static_cast<size_t>(deriv2_spl_par_rt_1dim__)},
      std::vector<size_t>{static_cast<size_t>(N_ifr_adj)},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{static_cast<size_t>(Max_delay)},
      std::vector<size_t>{static_cast<size_t>(Max_delay)},
      std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{static_cast<size_t>(Max_delay)},
      std::vector<size_t>{static_cast<size_t>(500)},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)},
      std::vector<size_t>{static_cast<size_t>(N_days_tot)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "log_new_inf_0");
    param_names__.emplace_back(std::string() + "serial_i");
    for (int sym1__ = 1; sym1__ <= N_spl_par_rt; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "spl_par_rt" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "p_sym_if_inf");
    param_names__.emplace_back(std::string() + "p_sev_if_sym");
    param_names__.emplace_back(std::string() + "p_die_if_sev");
    param_names__.emplace_back(std::string() + "ifr_decl_OR");
    param_names__.emplace_back(std::string() + "scale_dx_delay_asy");
    param_names__.emplace_back(std::string() + "scale_dx_delay_sym");
    param_names__.emplace_back(std::string() + "scale_dx_delay_sev");
    param_names__.emplace_back(std::string() + "rr_diag_asy_vs_sym");
    param_names__.emplace_back(std::string() + "p_diag_if_sev");
    for (int sym1__ = 1; sym1__ <= N_spl_par_dx; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "spl_par_sym_dx" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "or_vac_inf");
    param_names__.emplace_back(std::string() + "inv_sqrt_phi_c");
    param_names__.emplace_back(std::string() + "inv_sqrt_phi_d");
    for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "prob_vac" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_new_inf" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "new_inf" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "deriv1_log_new_inf" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "pop_uninf");
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "logRt0" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "logRt" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Rt" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= deriv1_spl_par_rt_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "deriv1_spl_par_rt" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= deriv2_spl_par_rt_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "deriv2_spl_par_rt" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_ifr_adj; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "p_die_if_sevt" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "p_sev_if_symt" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "p_sym_if_inft" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "rr_diag_sym_vs_sev" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "p_diag_if_asy" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "p_diag_if_sym" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= Max_delay; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sym_diag_delay_rv" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= Max_delay; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sev_diag_delay_rv" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "p_die_if_inf");
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "new_sym" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "new_sev" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "new_die" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "new_asy_dx" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "new_sym_dx" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "new_sev_dx" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "dx_sym_sev" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "dx_sym_die" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "dx_sev_die" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "diag_all" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "new_die_dx" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "occur_cas" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "occur_die" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "phi_cas");
      param_names__.emplace_back(std::string() + "phi_die");
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "idx1b" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "idx2b" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "p_die_if_sym");
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "diag_cases" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cumulative_incidence" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sero_positive" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "pop_infectiousness" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= Max_delay; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "infect_dist_rv" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 500; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "seropos_dist_rv" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "vac_only" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "inf_only" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "both_only" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "immune_vac" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "immune_inf" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "immune_both" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "immune_waning" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "immune_sev_vac" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "immune_sev_inf" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "immune_sev_both" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "immune_sev_waning" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "vac_inf" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "OR");
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cum_p_inf" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cum_p_inf_recent" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cum_p_vac" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cum_p_vac_recent" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "p_immune" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "p_immune_over12" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "p_immune_recent" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "p_immune_recent_over12" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "p_immune_independence" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "p_immune_independence_over12" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "log_new_inf_0");
    param_names__.emplace_back(std::string() + "serial_i");
    for (int sym1__ = 1; sym1__ <= N_spl_par_rt; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "spl_par_rt" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "p_sym_if_inf");
    param_names__.emplace_back(std::string() + "p_sev_if_sym");
    param_names__.emplace_back(std::string() + "p_die_if_sev");
    param_names__.emplace_back(std::string() + "ifr_decl_OR");
    param_names__.emplace_back(std::string() + "scale_dx_delay_asy");
    param_names__.emplace_back(std::string() + "scale_dx_delay_sym");
    param_names__.emplace_back(std::string() + "scale_dx_delay_sev");
    param_names__.emplace_back(std::string() + "rr_diag_asy_vs_sym");
    param_names__.emplace_back(std::string() + "p_diag_if_sev");
    for (int sym1__ = 1; sym1__ <= N_spl_par_dx; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "spl_par_sym_dx" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "or_vac_inf");
    param_names__.emplace_back(std::string() + "inv_sqrt_phi_c");
    param_names__.emplace_back(std::string() + "inv_sqrt_phi_d");
    for (int sym1__ = 1; sym1__ <= (3 - 1); ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "prob_vac" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_new_inf" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "new_inf" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "deriv1_log_new_inf" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "pop_uninf");
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "logRt0" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "logRt" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Rt" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= deriv1_spl_par_rt_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "deriv1_spl_par_rt" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= deriv2_spl_par_rt_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "deriv2_spl_par_rt" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_ifr_adj; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "p_die_if_sevt" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "p_sev_if_symt" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "p_sym_if_inft" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "rr_diag_sym_vs_sev" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "p_diag_if_asy" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "p_diag_if_sym" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= Max_delay; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sym_diag_delay_rv" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= Max_delay; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sev_diag_delay_rv" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "p_die_if_inf");
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "new_sym" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "new_sev" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "new_die" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "new_asy_dx" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "new_sym_dx" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "new_sev_dx" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "dx_sym_sev" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "dx_sym_die" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "dx_sev_die" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "diag_all" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "new_die_dx" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "occur_cas" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "occur_die" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "phi_cas");
      param_names__.emplace_back(std::string() + "phi_die");
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "idx1b" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "idx2b" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "p_die_if_sym");
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "diag_cases" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cumulative_incidence" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sero_positive" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "pop_infectiousness" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= Max_delay; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "infect_dist_rv" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 500; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "seropos_dist_rv" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "vac_only" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "inf_only" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "both_only" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "immune_vac" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "immune_inf" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "immune_both" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "immune_waning" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "immune_sev_vac" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "immune_sev_inf" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "immune_sev_both" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "immune_sev_waning" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "vac_inf" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "OR");
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cum_p_inf" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cum_p_inf_recent" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cum_p_vac" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cum_p_vac_recent" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "p_immune" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "p_immune_over12" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "p_immune_recent" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "p_immune_recent_over12" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "p_immune_independence" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_days_tot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "p_immune_independence_over12" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"log_new_inf_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"serial_i\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"spl_par_rt\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_spl_par_rt) + "},\"block\":\"parameters\"},{\"name\":\"p_sym_if_inf\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p_sev_if_sym\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p_die_if_sev\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ifr_decl_OR\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"scale_dx_delay_asy\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"scale_dx_delay_sym\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"scale_dx_delay_sev\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rr_diag_asy_vs_sym\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p_diag_if_sev\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"spl_par_sym_dx\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_spl_par_dx) + "},\"block\":\"parameters\"},{\"name\":\"or_vac_inf\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"inv_sqrt_phi_c\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"inv_sqrt_phi_d\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prob_vac\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(3) + "},\"block\":\"parameters\"},{\"name\":\"log_new_inf\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"new_inf\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"deriv1_log_new_inf\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"pop_uninf\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"logRt0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"logRt\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Rt\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"deriv1_spl_par_rt\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(deriv1_spl_par_rt_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"deriv2_spl_par_rt\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(deriv2_spl_par_rt_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p_die_if_sevt\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_ifr_adj) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p_sev_if_symt\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p_sym_if_inft\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"rr_diag_sym_vs_sev\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p_diag_if_asy\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p_diag_if_sym\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sym_diag_delay_rv\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Max_delay) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sev_diag_delay_rv\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Max_delay) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p_die_if_inf\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"new_sym\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"new_sev\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"new_die\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"new_asy_dx\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"new_sym_dx\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"new_sev_dx\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"dx_sym_sev\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"dx_sym_die\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"dx_sev_die\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"diag_all\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"new_die_dx\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"occur_cas\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"occur_die\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"phi_cas\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"phi_die\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"idx1b\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_days_tot) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"idx2b\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_days_tot) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"p_die_if_sym\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"diag_cases\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"cumulative_incidence\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"sero_positive\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"pop_infectiousness\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"infect_dist_rv\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Max_delay) + "},\"block\":\"generated_quantities\"},{\"name\":\"seropos_dist_rv\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(500) + "},\"block\":\"generated_quantities\"},{\"name\":\"vac_only\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"inf_only\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"both_only\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"immune_vac\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"immune_inf\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"immune_both\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"immune_waning\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"immune_sev_vac\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"immune_sev_inf\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"immune_sev_both\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"immune_sev_waning\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"vac_inf\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"OR\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"cum_p_inf\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"cum_p_inf_recent\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"cum_p_vac\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"cum_p_vac_recent\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"p_immune\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"p_immune_over12\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"p_immune_recent\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"p_immune_recent_over12\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"p_immune_independence\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"p_immune_independence_over12\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"log_new_inf_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"serial_i\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"spl_par_rt\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_spl_par_rt) + "},\"block\":\"parameters\"},{\"name\":\"p_sym_if_inf\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p_sev_if_sym\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p_die_if_sev\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ifr_decl_OR\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"scale_dx_delay_asy\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"scale_dx_delay_sym\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"scale_dx_delay_sev\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rr_diag_asy_vs_sym\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p_diag_if_sev\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"spl_par_sym_dx\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_spl_par_dx) + "},\"block\":\"parameters\"},{\"name\":\"or_vac_inf\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"inv_sqrt_phi_c\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"inv_sqrt_phi_d\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prob_vac\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string((3 - 1)) + "},\"block\":\"parameters\"},{\"name\":\"log_new_inf\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"new_inf\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"deriv1_log_new_inf\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"pop_uninf\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"logRt0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"logRt\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Rt\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"deriv1_spl_par_rt\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(deriv1_spl_par_rt_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"deriv2_spl_par_rt\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(deriv2_spl_par_rt_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p_die_if_sevt\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_ifr_adj) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p_sev_if_symt\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p_sym_if_inft\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"rr_diag_sym_vs_sev\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p_diag_if_asy\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p_diag_if_sym\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sym_diag_delay_rv\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Max_delay) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sev_diag_delay_rv\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Max_delay) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p_die_if_inf\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"new_sym\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"new_sev\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"new_die\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"new_asy_dx\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"new_sym_dx\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"new_sev_dx\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"dx_sym_sev\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"dx_sym_die\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"dx_sev_die\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"diag_all\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"new_die_dx\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"occur_cas\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"occur_die\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"phi_cas\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"phi_die\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"idx1b\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_days_tot) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"idx2b\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_days_tot) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"p_die_if_sym\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"diag_cases\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"cumulative_incidence\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"sero_positive\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"pop_infectiousness\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"infect_dist_rv\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Max_delay) + "},\"block\":\"generated_quantities\"},{\"name\":\"seropos_dist_rv\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(500) + "},\"block\":\"generated_quantities\"},{\"name\":\"vac_only\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"inf_only\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"both_only\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"immune_vac\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"immune_inf\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"immune_both\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"immune_waning\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"immune_sev_vac\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"immune_sev_inf\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"immune_sev_both\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"immune_sev_waning\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"vac_inf\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"OR\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"cum_p_inf\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"cum_p_inf_recent\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"cum_p_vac\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"cum_p_vac_recent\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"p_immune\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"p_immune_over12\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"p_immune_recent\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"p_immune_recent_over12\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"p_immune_independence\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"},{\"name\":\"p_immune_independence_over12\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_days_tot) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((((((((((1 + 1) + N_spl_par_rt) + 1) + 1) + 1) + 1) + 1) + 1) + 1) +
          1) + 1) + N_spl_par_dx) + 1) + 1) + 1) + 3);
      const size_t num_transformed = 
  ((((((((((((((((((((((((((((((((N_days_tot + N_days_tot) + N_days_tot) + 1)
                                + N_days_tot) + N_days_tot) + N_days_tot) +
                             deriv1_spl_par_rt_1dim__) +
                            deriv2_spl_par_rt_1dim__) + N_ifr_adj) +
                          N_days_tot) + N_days_tot) + N_days_tot) +
                       N_days_tot) + N_days_tot) + Max_delay) + Max_delay) +
                   1) + N_days_tot) + N_days_tot) + N_days_tot) + N_days_tot)
              + N_days_tot) + N_days_tot) + N_days_tot) + N_days_tot) +
          N_days_tot) + N_days_tot) + N_days_tot) + N_days_tot) + N_days_tot)
     + 1) + 1);
      const size_t num_gen_quantities = (((((((((((((((((((((((((((((((N_days_tot
                                                                    +
                                                                    N_days_tot)
                                                                    + 1) +
                                                                    N_days_tot)
                                                                    +
                                                                    N_days_tot)
                                                                    +
                                                                    N_days_tot)
                                                                    +
                                                                    N_days_tot)
                                                                    +
                                                                    Max_delay)
                                                                    + 500) +
                                                                    N_days_tot)
                                                                    +
                                                                    N_days_tot)
                                                                    +
                                                                    N_days_tot)
                                                                    +
                                                                    N_days_tot)
                                                                    +
                                                                    N_days_tot)
                                                                    +
                                                                    N_days_tot)
                                                                    +
                                                                    N_days_tot)
                                                                    +
                                                                    N_days_tot)
                                                                    +
                                                                    N_days_tot)
                                                                    +
                                                                    N_days_tot)
                                                                    +
                                                                    N_days_tot)
                                                                    +
                                                                    N_days_tot)
                                                                    + 1) +
                                                                   N_days_tot)
                                                                  +
                                                                  N_days_tot)
                                                                 +
                                                                 N_days_tot)
                                                                + N_days_tot)
                                                               + N_days_tot)
                                                              + N_days_tot) +
                                                             N_days_tot) +
                                                            N_days_tot) +
                                                           N_days_tot) +
                                                          N_days_tot);
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((((((((((1 + 1) + N_spl_par_rt) + 1) + 1) + 1) + 1) + 1) + 1) + 1) +
          1) + 1) + N_spl_par_dx) + 1) + 1) + 1) + 3);
      const size_t num_transformed = 
  ((((((((((((((((((((((((((((((((N_days_tot + N_days_tot) + N_days_tot) + 1)
                                + N_days_tot) + N_days_tot) + N_days_tot) +
                             deriv1_spl_par_rt_1dim__) +
                            deriv2_spl_par_rt_1dim__) + N_ifr_adj) +
                          N_days_tot) + N_days_tot) + N_days_tot) +
                       N_days_tot) + N_days_tot) + Max_delay) + Max_delay) +
                   1) + N_days_tot) + N_days_tot) + N_days_tot) + N_days_tot)
              + N_days_tot) + N_days_tot) + N_days_tot) + N_days_tot) +
          N_days_tot) + N_days_tot) + N_days_tot) + N_days_tot) + N_days_tot)
     + 1) + 1);
      const size_t num_gen_quantities = (((((((((((((((((((((((((((((((N_days_tot
                                                                    +
                                                                    N_days_tot)
                                                                    + 1) +
                                                                    N_days_tot)
                                                                    +
                                                                    N_days_tot)
                                                                    +
                                                                    N_days_tot)
                                                                    +
                                                                    N_days_tot)
                                                                    +
                                                                    Max_delay)
                                                                    + 500) +
                                                                    N_days_tot)
                                                                    +
                                                                    N_days_tot)
                                                                    +
                                                                    N_days_tot)
                                                                    +
                                                                    N_days_tot)
                                                                    +
                                                                    N_days_tot)
                                                                    +
                                                                    N_days_tot)
                                                                    +
                                                                    N_days_tot)
                                                                    +
                                                                    N_days_tot)
                                                                    +
                                                                    N_days_tot)
                                                                    +
                                                                    N_days_tot)
                                                                    +
                                                                    N_days_tot)
                                                                    +
                                                                    N_days_tot)
                                                                    + 1) +
                                                                   N_days_tot)
                                                                  +
                                                                  N_days_tot)
                                                                 +
                                                                 N_days_tot)
                                                                + N_days_tot)
                                                               + N_days_tot)
                                                              + N_days_tot) +
                                                             N_days_tot) +
                                                            N_days_tot) +
                                                           N_days_tot) +
                                                          N_days_tot);
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 17> names__{"log_new_inf_0",
      "serial_i", "spl_par_rt", "p_sym_if_inf", "p_sev_if_sym",
      "p_die_if_sev", "ifr_decl_OR", "scale_dx_delay_asy",
      "scale_dx_delay_sym", "scale_dx_delay_sev", "rr_diag_asy_vs_sym",
      "p_diag_if_sev", "spl_par_sym_dx", "or_vac_inf", "inv_sqrt_phi_c",
      "inv_sqrt_phi_d", "prob_vac"};
      const std::array<Eigen::Index, 17> constrain_param_sizes__{1, 1,
       N_spl_par_rt, 1, 1, 1, 1, 1, 1, 1, 1, 1, N_spl_par_dx, 1, 1, 1, 
       3};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}

using stan_model = stan_program_default_model_namespace::stan_program_default_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return stan_program_default_model_namespace::profiles__;
}

#endif


