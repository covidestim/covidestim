// Generated by rstantools.  Do not edit by hand.

/*
    rstanexample is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rstanexample is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rstanexample.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_stan_program_default_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_stan_program_default");
    reader.add_event(1182, 1180, "end", "model_stan_program_default");
    return reader;
}
template <bool propto, typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
beta_log_lpdf(const T0__& ltheta,
                  const T1__& a,
                  const T2__& b, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 11;
        return stan::math::promote_scalar<fun_return_scalar_t__>(((((a - 1) * ltheta) + ((b - 1) * log1m_exp(ltheta))) - lbeta(a, b)));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
beta_log_lpdf(const T0__& ltheta,
                  const T1__& a,
                  const T2__& b, std::ostream* pstream__) {
    return beta_log_lpdf<false>(ltheta,a,b, pstream__);
}
struct beta_log_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& ltheta,
                  const T1__& a,
                  const T2__& b, std::ostream* pstream__) const {
        return beta_log_lpdf(ltheta, a, b, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
beta_log_lupdf(const T0__& ltheta,
                   const T1__& a,
                   const T2__& b, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 17;
        return stan::math::promote_scalar<fun_return_scalar_t__>((((a - 1) * ltheta) + ((b - 1) * log1m_exp(ltheta))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct beta_log_lupdf_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& ltheta,
                   const T1__& a,
                   const T2__& b, std::ostream* pstream__) const {
        return beta_log_lupdf(ltheta, a, b, pstream__);
    }
};
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
vlog_sum_exp(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& a,
                 const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& b, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 21;
        int l(0);
        (void) l;  // dummy to suppress unused var warning
        stan::math::fill(l, std::numeric_limits<int>::min());
        stan::math::assign(l,rows(a));
        current_statement_begin__ = 22;
        validate_non_negative_index("result", "l", l);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> result(l);
        stan::math::initialize(result, DUMMY_VAR__);
        stan::math::fill(result, DUMMY_VAR__);
        current_statement_begin__ = 24;
        if (as_bool(logical_neq(rows(a), rows(b)))) {
            current_statement_begin__ = 25;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "nrow(a) must be equal to nrow(b). lengths were: ";
            errmsg_stream__ << rows(a);
            errmsg_stream__ << ", ";
            errmsg_stream__ << rows(b);
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 27;
        for (int i = 1; i <= l; ++i) {
            current_statement_begin__ = 28;
            stan::model::assign(result, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        log_sum_exp(get_base1(a, i, "a", 1), get_base1(b, i, "b", 1)), 
                        "assigning variable result");
        }
        current_statement_begin__ = 30;
        return stan::math::promote_scalar<fun_return_scalar_t__>(result);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct vlog_sum_exp_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& a,
                 const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& b, std::ostream* pstream__) const {
        return vlog_sum_exp(a, b, pstream__);
    }
};
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
vlog_diff_exp(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& a,
                  const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& b, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 34;
        int l(0);
        (void) l;  // dummy to suppress unused var warning
        stan::math::fill(l, std::numeric_limits<int>::min());
        stan::math::assign(l,rows(a));
        current_statement_begin__ = 35;
        validate_non_negative_index("result", "l", l);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> result(l);
        stan::math::initialize(result, DUMMY_VAR__);
        stan::math::fill(result, DUMMY_VAR__);
        current_statement_begin__ = 37;
        if (as_bool(logical_neq(rows(a), rows(b)))) {
            current_statement_begin__ = 38;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "nrow(a) must be equal to nrow(b). lengths were: ";
            errmsg_stream__ << rows(a);
            errmsg_stream__ << ", ";
            errmsg_stream__ << rows(b);
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 40;
        for (int i = 1; i <= l; ++i) {
            current_statement_begin__ = 41;
            if (as_bool(logical_gte(get_base1(b, i, "b", 1), get_base1(a, i, "a", 1)))) {
                current_statement_begin__ = 42;
                std::stringstream errmsg_stream__;
                errmsg_stream__ << "b[i] was greater than a[i]. b[";
                errmsg_stream__ << i;
                errmsg_stream__ << "]=";
                errmsg_stream__ << get_base1(b, i, "b", 1);
                errmsg_stream__ << ", a[";
                errmsg_stream__ << i;
                errmsg_stream__ << "]=";
                errmsg_stream__ << get_base1(a, i, "a", 1);
                throw std::domain_error(errmsg_stream__.str());
            }
            current_statement_begin__ = 44;
            stan::model::assign(result, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        log_diff_exp(get_base1(a, i, "a", 1), get_base1(b, i, "b", 1)), 
                        "assigning variable result");
        }
        current_statement_begin__ = 47;
        return stan::math::promote_scalar<fun_return_scalar_t__>(result);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct vlog_diff_exp_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& a,
                  const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& b, std::ostream* pstream__) const {
        return vlog_diff_exp(a, b, pstream__);
    }
};
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
lconv1d(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& lx,
            const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& kernel, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 51;
        int nk(0);
        (void) nk;  // dummy to suppress unused var warning
        stan::math::fill(nk, std::numeric_limits<int>::min());
        stan::math::assign(nk,rows(kernel));
        current_statement_begin__ = 52;
        int nx(0);
        (void) nx;  // dummy to suppress unused var warning
        stan::math::fill(nx, std::numeric_limits<int>::min());
        stan::math::assign(nx,rows(lx));
        current_statement_begin__ = 53;
        validate_non_negative_index("X", "nx", nx);
        validate_non_negative_index("X", "nk", nk);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> X(nx, nk);
        stan::math::initialize(X, DUMMY_VAR__);
        stan::math::fill(X, DUMMY_VAR__);
        current_statement_begin__ = 54;
        validate_non_negative_index("K", "nx", nx);
        validate_non_negative_index("K", "nk", nk);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(nx, nk);
        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K, DUMMY_VAR__);
        current_statement_begin__ = 55;
        validate_non_negative_index("S", "nx", nx);
        validate_non_negative_index("S", "nk", nk);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> S(nx, nk);
        stan::math::initialize(S, DUMMY_VAR__);
        stan::math::fill(S, DUMMY_VAR__);
        current_statement_begin__ = 56;
        validate_non_negative_index("r", "nx", nx);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> r(nx);
        stan::math::initialize(r, DUMMY_VAR__);
        stan::math::fill(r, DUMMY_VAR__);
        current_statement_begin__ = 58;
        if (as_bool(logical_lt(nx, nk))) {
            current_statement_begin__ = 59;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "nrow(x) must be >= nrow(kernel). x had nrow = ";
            errmsg_stream__ << nx;
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 80;
        for (int i = 1; i <= nk; ++i) {
            current_statement_begin__ = 87;
            if (as_bool(logical_lt(i, nk))) {
                current_statement_begin__ = 88;
                stan::model::assign(X, 
                            stan::model::cons_list(stan::model::index_min_max(1, (nk - i)), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                            rep_vector(0, (nk - i)), 
                            "assigning variable X");
            }
            current_statement_begin__ = 94;
            stan::model::assign(X, 
                        stan::model::cons_list(stan::model::index_min_max(((nk - i) + 1), nx), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                        stan::model::rvalue(lx, stan::model::cons_list(stan::model::index_min_max(1, ((nx - nk) + i)), stan::model::nil_index_list()), "lx"), 
                        "assigning variable X");
        }
        current_statement_begin__ = 101;
        stan::math::assign(K, rep_matrix(transpose(stan::math::log(kernel)), nx));
        current_statement_begin__ = 104;
        stan::math::assign(S, add(X, K));
        current_statement_begin__ = 109;
        for (int i = 1; i <= nx; ++i) {
            current_statement_begin__ = 110;
            if (as_bool(logical_lt(i, nk))) {
                current_statement_begin__ = 111;
                stan::model::assign(r, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            log_sum_exp(stan::model::rvalue(S, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_min_max(((nk - i) + 1), nk), stan::model::nil_index_list())), "S")), 
                            "assigning variable r");
            } else {
                current_statement_begin__ = 113;
                stan::model::assign(r, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            log_sum_exp(stan::model::rvalue(S, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "S")), 
                            "assigning variable r");
            }
        }
        current_statement_begin__ = 117;
        return stan::math::promote_scalar<fun_return_scalar_t__>(r);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct lconv1d_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& lx,
            const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& kernel, std::ostream* pstream__) const {
        return lconv1d(lx, kernel, pstream__);
    }
};
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
conv1d(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
           const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& kernel, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 121;
        int nk(0);
        (void) nk;  // dummy to suppress unused var warning
        stan::math::fill(nk, std::numeric_limits<int>::min());
        stan::math::assign(nk,rows(kernel));
        current_statement_begin__ = 122;
        int nx(0);
        (void) nx;  // dummy to suppress unused var warning
        stan::math::fill(nx, std::numeric_limits<int>::min());
        stan::math::assign(nx,rows(x));
        current_statement_begin__ = 123;
        validate_non_negative_index("X", "nx", nx);
        validate_non_negative_index("X", "nk", nk);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> X(nx, nk);
        stan::math::initialize(X, DUMMY_VAR__);
        stan::math::fill(X, DUMMY_VAR__);
        current_statement_begin__ = 125;
        if (as_bool(logical_lt(nx, nk))) {
            current_statement_begin__ = 126;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "nrow(x) must be >= nrow(kernel). x had nrow =";
            errmsg_stream__ << nx;
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 137;
        for (int i = 1; i <= nk; ++i) {
            current_statement_begin__ = 144;
            if (as_bool(logical_lt(i, nk))) {
                current_statement_begin__ = 145;
                stan::model::assign(X, 
                            stan::model::cons_list(stan::model::index_min_max(1, (nk - i)), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                            rep_vector(0, (nk - i)), 
                            "assigning variable X");
            }
            current_statement_begin__ = 151;
            stan::model::assign(X, 
                        stan::model::cons_list(stan::model::index_min_max(((nk - i) + 1), nx), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                        stan::model::rvalue(x, stan::model::cons_list(stan::model::index_min_max(1, ((nx - nk) + i)), stan::model::nil_index_list()), "x"), 
                        "assigning variable X");
        }
        current_statement_begin__ = 154;
        return stan::math::promote_scalar<fun_return_scalar_t__>(multiply(X, kernel));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct conv1d_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
           const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& kernel, std::ostream* pstream__) const {
        return conv1d(x, kernel, pstream__);
    }
};
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
custom_softplus_scalar(const T0__& log_val,
                           const T1__& log_ceiling, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 158;
        return stan::math::promote_scalar<fun_return_scalar_t__>((-(1) * log_sum_exp(0, (-(1) * (log_val - log_ceiling)))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct custom_softplus_scalar_functor__ {
    template <typename T0__, typename T1__>
        typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const T0__& log_val,
                           const T1__& log_ceiling, std::ostream* pstream__) const {
        return custom_softplus_scalar(log_val, log_ceiling, pstream__);
    }
};
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
vcustom_softplus_scalar(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& a,
                            const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& b, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 162;
        int l(0);
        (void) l;  // dummy to suppress unused var warning
        stan::math::fill(l, std::numeric_limits<int>::min());
        stan::math::assign(l,rows(a));
        current_statement_begin__ = 163;
        validate_non_negative_index("result", "l", l);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> result(l);
        stan::math::initialize(result, DUMMY_VAR__);
        stan::math::fill(result, DUMMY_VAR__);
        current_statement_begin__ = 165;
        if (as_bool(logical_neq(rows(a), rows(b)))) {
            current_statement_begin__ = 166;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "nrow(a) must be equal to nrow(b). lengths were: ";
            errmsg_stream__ << rows(a);
            errmsg_stream__ << ", ";
            errmsg_stream__ << rows(b);
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 168;
        for (int i = 1; i <= l; ++i) {
            current_statement_begin__ = 169;
            stan::model::assign(result, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        custom_softplus_scalar(get_base1(a, i, "a", 1), get_base1(b, i, "b", 1), pstream__), 
                        "assigning variable result");
        }
        current_statement_begin__ = 171;
        return stan::math::promote_scalar<fun_return_scalar_t__>(result);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct vcustom_softplus_scalar_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& a,
                            const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& b, std::ostream* pstream__) const {
        return vcustom_softplus_scalar(a, b, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_stan_program_default
  : public stan::model::model_base_crtp<model_stan_program_default> {
private:
        int N_days;
        int N_days_before;
        int Max_delay;
        std::vector<int> obs_cas;
        std::vector<int> obs_die;
        double pop_size;
        int N_ifr_adj;
        vector_d ifr_adj;
        vector_d ifr_vac_adj;
        double pri_ifr_decl_OR_a;
        double pri_ifr_decl_OR_b;
        double pri_rr_decl_sev_a;
        double pri_rr_decl_sev_b;
        double pri_rr_decl_die_a;
        double pri_rr_decl_die_b;
        double ifr_adj_fixed;
        double infect_dist_rate;
        double infect_dist_shap;
        double seropos_dist_rate;
        double seropos_dist_shap;
        int N_spl_par_rt;
        int N_spl_par_dx;
        matrix_d spl_basis_rt;
        matrix_d spl_basis_dx;
        double inf_prg_delay_shap;
        double inf_prg_delay_rate;
        double asy_rec_delay_shap;
        double asy_rec_delay_rate;
        double sym_prg_delay_shap;
        double sym_prg_delay_rate;
        double sev_prg_delay_shap;
        double sev_prg_delay_rate;
        double cas_rep_delay_shap;
        double cas_rep_delay_rate;
        double die_rep_delay_shap;
        double die_rep_delay_rate;
        int pre_period_zero;
        int cas_yes;
        int die_yes;
        int obs_cas_rep;
        int obs_die_rep;
        int N_days_av;
        int lastDeathDate;
        int lastCaseDate;
        int reinfection;
        int reinf_delay1;
        int reinf_delay2;
        vector_d reinf_prob;
        double pri_log_new_inf_0_mu;
        double pri_log_new_inf_0_sd;
        double pri_serial_i_shap;
        double pri_serial_i_rate;
        double pri_serial_i_omi_shap;
        double pri_serial_i_omi_rate;
        double pri_p_sym_if_inf_a;
        double pri_p_sym_if_inf_b;
        double pri_new_p_sym_if_inf_a;
        double pri_new_p_sym_if_inf_b;
        double pri_p_sev_if_sym_a;
        double pri_p_sev_if_sym_b;
        double pri_p_die_if_sev_a;
        double pri_p_die_if_sev_b;
        double pri_p_die_if_inf_a;
        double pri_p_die_if_inf_b;
        double pri_rr_diag_asy_vs_sym_a;
        double pri_rr_diag_asy_vs_sym_b;
        double pri_rr_diag_sym_vs_sev_a;
        double pri_rr_diag_sym_vs_sev_b;
        double pri_p_diag_if_sev_a;
        double pri_p_diag_if_sev_b;
        double scale_dx_delay_sym_a;
        double scale_dx_delay_sym_b;
        double scale_dx_delay_sev_a;
        double scale_dx_delay_sev_b;
        int omicron_adjust;
        double Omicron_takeover_mean;
        double Omicron_takeover_sd;
        double sd_omicron_delay;
        int N_days_tot;
        std::vector<int> obs_cas_mvs;
        std::vector<int> obs_die_mvs;
        int nda0;
        vector_d inf_prg_delay_rv;
        vector_d asy_rec_delay_rv;
        vector_d sym_prg_delay_rv;
        vector_d sev_prg_delay_rv;
        vector_d cas_rep_delay_rv;
        vector_d die_rep_delay_rv;
        vector_d cas_cum_report_delay_rv;
        vector_d die_cum_report_delay_rv;
public:
    model_stan_program_default(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_stan_program_default(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_stan_program_default_namespace::model_stan_program_default";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 177;
            context__.validate_dims("data initialization", "N_days", "int", context__.to_vec());
            N_days = int(0);
            vals_i__ = context__.vals_i("N_days");
            pos__ = 0;
            N_days = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_days", N_days, 0);
            current_statement_begin__ = 178;
            context__.validate_dims("data initialization", "N_days_before", "int", context__.to_vec());
            N_days_before = int(0);
            vals_i__ = context__.vals_i("N_days_before");
            pos__ = 0;
            N_days_before = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_days_before", N_days_before, 0);
            current_statement_begin__ = 179;
            context__.validate_dims("data initialization", "Max_delay", "int", context__.to_vec());
            Max_delay = int(0);
            vals_i__ = context__.vals_i("Max_delay");
            pos__ = 0;
            Max_delay = vals_i__[pos__++];
            check_greater_or_equal(function__, "Max_delay", Max_delay, 0);
            current_statement_begin__ = 181;
            validate_non_negative_index("obs_cas", "N_days", N_days);
            context__.validate_dims("data initialization", "obs_cas", "int", context__.to_vec(N_days));
            obs_cas = std::vector<int>(N_days, int(0));
            vals_i__ = context__.vals_i("obs_cas");
            pos__ = 0;
            size_t obs_cas_k_0_max__ = N_days;
            for (size_t k_0__ = 0; k_0__ < obs_cas_k_0_max__; ++k_0__) {
                obs_cas[k_0__] = vals_i__[pos__++];
            }
            size_t obs_cas_i_0_max__ = N_days;
            for (size_t i_0__ = 0; i_0__ < obs_cas_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "obs_cas[i_0__]", obs_cas[i_0__], 0);
            }
            current_statement_begin__ = 182;
            validate_non_negative_index("obs_die", "N_days", N_days);
            context__.validate_dims("data initialization", "obs_die", "int", context__.to_vec(N_days));
            obs_die = std::vector<int>(N_days, int(0));
            vals_i__ = context__.vals_i("obs_die");
            pos__ = 0;
            size_t obs_die_k_0_max__ = N_days;
            for (size_t k_0__ = 0; k_0__ < obs_die_k_0_max__; ++k_0__) {
                obs_die[k_0__] = vals_i__[pos__++];
            }
            size_t obs_die_i_0_max__ = N_days;
            for (size_t i_0__ = 0; i_0__ < obs_die_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "obs_die[i_0__]", obs_die[i_0__], 0);
            }
            current_statement_begin__ = 183;
            context__.validate_dims("data initialization", "pop_size", "double", context__.to_vec());
            pop_size = double(0);
            vals_r__ = context__.vals_r("pop_size");
            pos__ = 0;
            pop_size = vals_r__[pos__++];
            check_greater_or_equal(function__, "pop_size", pop_size, 0);
            current_statement_begin__ = 185;
            context__.validate_dims("data initialization", "N_ifr_adj", "int", context__.to_vec());
            N_ifr_adj = int(0);
            vals_i__ = context__.vals_i("N_ifr_adj");
            pos__ = 0;
            N_ifr_adj = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_ifr_adj", N_ifr_adj, 0);
            current_statement_begin__ = 186;
            validate_non_negative_index("ifr_adj", "N_ifr_adj", N_ifr_adj);
            context__.validate_dims("data initialization", "ifr_adj", "vector_d", context__.to_vec(N_ifr_adj));
            ifr_adj = Eigen::Matrix<double, Eigen::Dynamic, 1>(N_ifr_adj);
            vals_r__ = context__.vals_r("ifr_adj");
            pos__ = 0;
            size_t ifr_adj_j_1_max__ = N_ifr_adj;
            for (size_t j_1__ = 0; j_1__ < ifr_adj_j_1_max__; ++j_1__) {
                ifr_adj(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "ifr_adj", ifr_adj, 0);
            current_statement_begin__ = 187;
            validate_non_negative_index("ifr_vac_adj", "(N_days + N_days_before)", (N_days + N_days_before));
            context__.validate_dims("data initialization", "ifr_vac_adj", "vector_d", context__.to_vec((N_days + N_days_before)));
            ifr_vac_adj = Eigen::Matrix<double, Eigen::Dynamic, 1>((N_days + N_days_before));
            vals_r__ = context__.vals_r("ifr_vac_adj");
            pos__ = 0;
            size_t ifr_vac_adj_j_1_max__ = (N_days + N_days_before);
            for (size_t j_1__ = 0; j_1__ < ifr_vac_adj_j_1_max__; ++j_1__) {
                ifr_vac_adj(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "ifr_vac_adj", ifr_vac_adj, 0);
            check_less_or_equal(function__, "ifr_vac_adj", ifr_vac_adj, 1);
            current_statement_begin__ = 189;
            context__.validate_dims("data initialization", "pri_ifr_decl_OR_a", "double", context__.to_vec());
            pri_ifr_decl_OR_a = double(0);
            vals_r__ = context__.vals_r("pri_ifr_decl_OR_a");
            pos__ = 0;
            pri_ifr_decl_OR_a = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_ifr_decl_OR_a", pri_ifr_decl_OR_a, 0);
            current_statement_begin__ = 190;
            context__.validate_dims("data initialization", "pri_ifr_decl_OR_b", "double", context__.to_vec());
            pri_ifr_decl_OR_b = double(0);
            vals_r__ = context__.vals_r("pri_ifr_decl_OR_b");
            pos__ = 0;
            pri_ifr_decl_OR_b = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_ifr_decl_OR_b", pri_ifr_decl_OR_b, 0);
            current_statement_begin__ = 191;
            context__.validate_dims("data initialization", "pri_rr_decl_sev_a", "double", context__.to_vec());
            pri_rr_decl_sev_a = double(0);
            vals_r__ = context__.vals_r("pri_rr_decl_sev_a");
            pos__ = 0;
            pri_rr_decl_sev_a = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_rr_decl_sev_a", pri_rr_decl_sev_a, 0);
            current_statement_begin__ = 192;
            context__.validate_dims("data initialization", "pri_rr_decl_sev_b", "double", context__.to_vec());
            pri_rr_decl_sev_b = double(0);
            vals_r__ = context__.vals_r("pri_rr_decl_sev_b");
            pos__ = 0;
            pri_rr_decl_sev_b = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_rr_decl_sev_b", pri_rr_decl_sev_b, 0);
            current_statement_begin__ = 193;
            context__.validate_dims("data initialization", "pri_rr_decl_die_a", "double", context__.to_vec());
            pri_rr_decl_die_a = double(0);
            vals_r__ = context__.vals_r("pri_rr_decl_die_a");
            pos__ = 0;
            pri_rr_decl_die_a = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_rr_decl_die_a", pri_rr_decl_die_a, 0);
            current_statement_begin__ = 194;
            context__.validate_dims("data initialization", "pri_rr_decl_die_b", "double", context__.to_vec());
            pri_rr_decl_die_b = double(0);
            vals_r__ = context__.vals_r("pri_rr_decl_die_b");
            pos__ = 0;
            pri_rr_decl_die_b = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_rr_decl_die_b", pri_rr_decl_die_b, 0);
            current_statement_begin__ = 195;
            context__.validate_dims("data initialization", "ifr_adj_fixed", "double", context__.to_vec());
            ifr_adj_fixed = double(0);
            vals_r__ = context__.vals_r("ifr_adj_fixed");
            pos__ = 0;
            ifr_adj_fixed = vals_r__[pos__++];
            check_greater_or_equal(function__, "ifr_adj_fixed", ifr_adj_fixed, 0);
            current_statement_begin__ = 197;
            context__.validate_dims("data initialization", "infect_dist_rate", "double", context__.to_vec());
            infect_dist_rate = double(0);
            vals_r__ = context__.vals_r("infect_dist_rate");
            pos__ = 0;
            infect_dist_rate = vals_r__[pos__++];
            check_greater_or_equal(function__, "infect_dist_rate", infect_dist_rate, 0);
            current_statement_begin__ = 198;
            context__.validate_dims("data initialization", "infect_dist_shap", "double", context__.to_vec());
            infect_dist_shap = double(0);
            vals_r__ = context__.vals_r("infect_dist_shap");
            pos__ = 0;
            infect_dist_shap = vals_r__[pos__++];
            check_greater_or_equal(function__, "infect_dist_shap", infect_dist_shap, 0);
            current_statement_begin__ = 199;
            context__.validate_dims("data initialization", "seropos_dist_rate", "double", context__.to_vec());
            seropos_dist_rate = double(0);
            vals_r__ = context__.vals_r("seropos_dist_rate");
            pos__ = 0;
            seropos_dist_rate = vals_r__[pos__++];
            check_greater_or_equal(function__, "seropos_dist_rate", seropos_dist_rate, 0);
            current_statement_begin__ = 200;
            context__.validate_dims("data initialization", "seropos_dist_shap", "double", context__.to_vec());
            seropos_dist_shap = double(0);
            vals_r__ = context__.vals_r("seropos_dist_shap");
            pos__ = 0;
            seropos_dist_shap = vals_r__[pos__++];
            check_greater_or_equal(function__, "seropos_dist_shap", seropos_dist_shap, 0);
            current_statement_begin__ = 204;
            context__.validate_dims("data initialization", "N_spl_par_rt", "int", context__.to_vec());
            N_spl_par_rt = int(0);
            vals_i__ = context__.vals_i("N_spl_par_rt");
            pos__ = 0;
            N_spl_par_rt = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_spl_par_rt", N_spl_par_rt, 0);
            current_statement_begin__ = 205;
            context__.validate_dims("data initialization", "N_spl_par_dx", "int", context__.to_vec());
            N_spl_par_dx = int(0);
            vals_i__ = context__.vals_i("N_spl_par_dx");
            pos__ = 0;
            N_spl_par_dx = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_spl_par_dx", N_spl_par_dx, 0);
            current_statement_begin__ = 206;
            validate_non_negative_index("spl_basis_rt", "(N_days + N_days_before)", (N_days + N_days_before));
            validate_non_negative_index("spl_basis_rt", "N_spl_par_rt", N_spl_par_rt);
            context__.validate_dims("data initialization", "spl_basis_rt", "matrix_d", context__.to_vec((N_days + N_days_before),N_spl_par_rt));
            spl_basis_rt = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>((N_days + N_days_before), N_spl_par_rt);
            vals_r__ = context__.vals_r("spl_basis_rt");
            pos__ = 0;
            size_t spl_basis_rt_j_2_max__ = N_spl_par_rt;
            size_t spl_basis_rt_j_1_max__ = (N_days + N_days_before);
            for (size_t j_2__ = 0; j_2__ < spl_basis_rt_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < spl_basis_rt_j_1_max__; ++j_1__) {
                    spl_basis_rt(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 207;
            validate_non_negative_index("spl_basis_dx", "(N_days + N_days_before)", (N_days + N_days_before));
            validate_non_negative_index("spl_basis_dx", "N_spl_par_dx", N_spl_par_dx);
            context__.validate_dims("data initialization", "spl_basis_dx", "matrix_d", context__.to_vec((N_days + N_days_before),N_spl_par_dx));
            spl_basis_dx = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>((N_days + N_days_before), N_spl_par_dx);
            vals_r__ = context__.vals_r("spl_basis_dx");
            pos__ = 0;
            size_t spl_basis_dx_j_2_max__ = N_spl_par_dx;
            size_t spl_basis_dx_j_1_max__ = (N_days + N_days_before);
            for (size_t j_2__ = 0; j_2__ < spl_basis_dx_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < spl_basis_dx_j_1_max__; ++j_1__) {
                    spl_basis_dx(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 211;
            context__.validate_dims("data initialization", "inf_prg_delay_shap", "double", context__.to_vec());
            inf_prg_delay_shap = double(0);
            vals_r__ = context__.vals_r("inf_prg_delay_shap");
            pos__ = 0;
            inf_prg_delay_shap = vals_r__[pos__++];
            check_greater_or_equal(function__, "inf_prg_delay_shap", inf_prg_delay_shap, 0);
            current_statement_begin__ = 212;
            context__.validate_dims("data initialization", "inf_prg_delay_rate", "double", context__.to_vec());
            inf_prg_delay_rate = double(0);
            vals_r__ = context__.vals_r("inf_prg_delay_rate");
            pos__ = 0;
            inf_prg_delay_rate = vals_r__[pos__++];
            check_greater_or_equal(function__, "inf_prg_delay_rate", inf_prg_delay_rate, 0);
            current_statement_begin__ = 213;
            context__.validate_dims("data initialization", "asy_rec_delay_shap", "double", context__.to_vec());
            asy_rec_delay_shap = double(0);
            vals_r__ = context__.vals_r("asy_rec_delay_shap");
            pos__ = 0;
            asy_rec_delay_shap = vals_r__[pos__++];
            check_greater_or_equal(function__, "asy_rec_delay_shap", asy_rec_delay_shap, 0);
            current_statement_begin__ = 214;
            context__.validate_dims("data initialization", "asy_rec_delay_rate", "double", context__.to_vec());
            asy_rec_delay_rate = double(0);
            vals_r__ = context__.vals_r("asy_rec_delay_rate");
            pos__ = 0;
            asy_rec_delay_rate = vals_r__[pos__++];
            check_greater_or_equal(function__, "asy_rec_delay_rate", asy_rec_delay_rate, 0);
            current_statement_begin__ = 215;
            context__.validate_dims("data initialization", "sym_prg_delay_shap", "double", context__.to_vec());
            sym_prg_delay_shap = double(0);
            vals_r__ = context__.vals_r("sym_prg_delay_shap");
            pos__ = 0;
            sym_prg_delay_shap = vals_r__[pos__++];
            check_greater_or_equal(function__, "sym_prg_delay_shap", sym_prg_delay_shap, 0);
            current_statement_begin__ = 216;
            context__.validate_dims("data initialization", "sym_prg_delay_rate", "double", context__.to_vec());
            sym_prg_delay_rate = double(0);
            vals_r__ = context__.vals_r("sym_prg_delay_rate");
            pos__ = 0;
            sym_prg_delay_rate = vals_r__[pos__++];
            check_greater_or_equal(function__, "sym_prg_delay_rate", sym_prg_delay_rate, 0);
            current_statement_begin__ = 217;
            context__.validate_dims("data initialization", "sev_prg_delay_shap", "double", context__.to_vec());
            sev_prg_delay_shap = double(0);
            vals_r__ = context__.vals_r("sev_prg_delay_shap");
            pos__ = 0;
            sev_prg_delay_shap = vals_r__[pos__++];
            check_greater_or_equal(function__, "sev_prg_delay_shap", sev_prg_delay_shap, 0);
            current_statement_begin__ = 218;
            context__.validate_dims("data initialization", "sev_prg_delay_rate", "double", context__.to_vec());
            sev_prg_delay_rate = double(0);
            vals_r__ = context__.vals_r("sev_prg_delay_rate");
            pos__ = 0;
            sev_prg_delay_rate = vals_r__[pos__++];
            check_greater_or_equal(function__, "sev_prg_delay_rate", sev_prg_delay_rate, 0);
            current_statement_begin__ = 221;
            context__.validate_dims("data initialization", "cas_rep_delay_shap", "double", context__.to_vec());
            cas_rep_delay_shap = double(0);
            vals_r__ = context__.vals_r("cas_rep_delay_shap");
            pos__ = 0;
            cas_rep_delay_shap = vals_r__[pos__++];
            check_greater_or_equal(function__, "cas_rep_delay_shap", cas_rep_delay_shap, 0);
            current_statement_begin__ = 222;
            context__.validate_dims("data initialization", "cas_rep_delay_rate", "double", context__.to_vec());
            cas_rep_delay_rate = double(0);
            vals_r__ = context__.vals_r("cas_rep_delay_rate");
            pos__ = 0;
            cas_rep_delay_rate = vals_r__[pos__++];
            check_greater_or_equal(function__, "cas_rep_delay_rate", cas_rep_delay_rate, 0);
            current_statement_begin__ = 223;
            context__.validate_dims("data initialization", "die_rep_delay_shap", "double", context__.to_vec());
            die_rep_delay_shap = double(0);
            vals_r__ = context__.vals_r("die_rep_delay_shap");
            pos__ = 0;
            die_rep_delay_shap = vals_r__[pos__++];
            check_greater_or_equal(function__, "die_rep_delay_shap", die_rep_delay_shap, 0);
            current_statement_begin__ = 224;
            context__.validate_dims("data initialization", "die_rep_delay_rate", "double", context__.to_vec());
            die_rep_delay_rate = double(0);
            vals_r__ = context__.vals_r("die_rep_delay_rate");
            pos__ = 0;
            die_rep_delay_rate = vals_r__[pos__++];
            check_greater_or_equal(function__, "die_rep_delay_rate", die_rep_delay_rate, 0);
            current_statement_begin__ = 228;
            context__.validate_dims("data initialization", "pre_period_zero", "int", context__.to_vec());
            pre_period_zero = int(0);
            vals_i__ = context__.vals_i("pre_period_zero");
            pos__ = 0;
            pre_period_zero = vals_i__[pos__++];
            check_greater_or_equal(function__, "pre_period_zero", pre_period_zero, 0);
            check_less_or_equal(function__, "pre_period_zero", pre_period_zero, 1);
            current_statement_begin__ = 231;
            context__.validate_dims("data initialization", "cas_yes", "int", context__.to_vec());
            cas_yes = int(0);
            vals_i__ = context__.vals_i("cas_yes");
            pos__ = 0;
            cas_yes = vals_i__[pos__++];
            check_greater_or_equal(function__, "cas_yes", cas_yes, 0);
            check_less_or_equal(function__, "cas_yes", cas_yes, 1);
            current_statement_begin__ = 232;
            context__.validate_dims("data initialization", "die_yes", "int", context__.to_vec());
            die_yes = int(0);
            vals_i__ = context__.vals_i("die_yes");
            pos__ = 0;
            die_yes = vals_i__[pos__++];
            check_greater_or_equal(function__, "die_yes", die_yes, 0);
            check_less_or_equal(function__, "die_yes", die_yes, 1);
            current_statement_begin__ = 235;
            context__.validate_dims("data initialization", "obs_cas_rep", "int", context__.to_vec());
            obs_cas_rep = int(0);
            vals_i__ = context__.vals_i("obs_cas_rep");
            pos__ = 0;
            obs_cas_rep = vals_i__[pos__++];
            check_greater_or_equal(function__, "obs_cas_rep", obs_cas_rep, 0);
            check_less_or_equal(function__, "obs_cas_rep", obs_cas_rep, 1);
            current_statement_begin__ = 236;
            context__.validate_dims("data initialization", "obs_die_rep", "int", context__.to_vec());
            obs_die_rep = int(0);
            vals_i__ = context__.vals_i("obs_die_rep");
            pos__ = 0;
            obs_die_rep = vals_i__[pos__++];
            check_greater_or_equal(function__, "obs_die_rep", obs_die_rep, 0);
            check_less_or_equal(function__, "obs_die_rep", obs_die_rep, 1);
            current_statement_begin__ = 240;
            context__.validate_dims("data initialization", "N_days_av", "int", context__.to_vec());
            N_days_av = int(0);
            vals_i__ = context__.vals_i("N_days_av");
            pos__ = 0;
            N_days_av = vals_i__[pos__++];
            current_statement_begin__ = 243;
            context__.validate_dims("data initialization", "lastDeathDate", "int", context__.to_vec());
            lastDeathDate = int(0);
            vals_i__ = context__.vals_i("lastDeathDate");
            pos__ = 0;
            lastDeathDate = vals_i__[pos__++];
            check_greater_or_equal(function__, "lastDeathDate", lastDeathDate, 0);
            current_statement_begin__ = 246;
            context__.validate_dims("data initialization", "lastCaseDate", "int", context__.to_vec());
            lastCaseDate = int(0);
            vals_i__ = context__.vals_i("lastCaseDate");
            pos__ = 0;
            lastCaseDate = vals_i__[pos__++];
            check_greater_or_equal(function__, "lastCaseDate", lastCaseDate, 0);
            current_statement_begin__ = 249;
            context__.validate_dims("data initialization", "reinfection", "int", context__.to_vec());
            reinfection = int(0);
            vals_i__ = context__.vals_i("reinfection");
            pos__ = 0;
            reinfection = vals_i__[pos__++];
            check_greater_or_equal(function__, "reinfection", reinfection, 0);
            current_statement_begin__ = 250;
            context__.validate_dims("data initialization", "reinf_delay1", "int", context__.to_vec());
            reinf_delay1 = int(0);
            vals_i__ = context__.vals_i("reinf_delay1");
            pos__ = 0;
            reinf_delay1 = vals_i__[pos__++];
            check_greater_or_equal(function__, "reinf_delay1", reinf_delay1, 0);
            current_statement_begin__ = 251;
            context__.validate_dims("data initialization", "reinf_delay2", "int", context__.to_vec());
            reinf_delay2 = int(0);
            vals_i__ = context__.vals_i("reinf_delay2");
            pos__ = 0;
            reinf_delay2 = vals_i__[pos__++];
            check_greater_or_equal(function__, "reinf_delay2", reinf_delay2, 0);
            current_statement_begin__ = 252;
            validate_non_negative_index("reinf_prob", "2", 2);
            context__.validate_dims("data initialization", "reinf_prob", "vector_d", context__.to_vec(2));
            reinf_prob = Eigen::Matrix<double, Eigen::Dynamic, 1>(2);
            vals_r__ = context__.vals_r("reinf_prob");
            pos__ = 0;
            size_t reinf_prob_j_1_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < reinf_prob_j_1_max__; ++j_1__) {
                reinf_prob(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "reinf_prob", reinf_prob, 0);
            check_less_or_equal(function__, "reinf_prob", reinf_prob, 1);
            current_statement_begin__ = 257;
            context__.validate_dims("data initialization", "pri_log_new_inf_0_mu", "double", context__.to_vec());
            pri_log_new_inf_0_mu = double(0);
            vals_r__ = context__.vals_r("pri_log_new_inf_0_mu");
            pos__ = 0;
            pri_log_new_inf_0_mu = vals_r__[pos__++];
            current_statement_begin__ = 258;
            context__.validate_dims("data initialization", "pri_log_new_inf_0_sd", "double", context__.to_vec());
            pri_log_new_inf_0_sd = double(0);
            vals_r__ = context__.vals_r("pri_log_new_inf_0_sd");
            pos__ = 0;
            pri_log_new_inf_0_sd = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_log_new_inf_0_sd", pri_log_new_inf_0_sd, 0);
            current_statement_begin__ = 259;
            context__.validate_dims("data initialization", "pri_serial_i_shap", "double", context__.to_vec());
            pri_serial_i_shap = double(0);
            vals_r__ = context__.vals_r("pri_serial_i_shap");
            pos__ = 0;
            pri_serial_i_shap = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_serial_i_shap", pri_serial_i_shap, 0);
            current_statement_begin__ = 260;
            context__.validate_dims("data initialization", "pri_serial_i_rate", "double", context__.to_vec());
            pri_serial_i_rate = double(0);
            vals_r__ = context__.vals_r("pri_serial_i_rate");
            pos__ = 0;
            pri_serial_i_rate = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_serial_i_rate", pri_serial_i_rate, 0);
            current_statement_begin__ = 261;
            context__.validate_dims("data initialization", "pri_serial_i_omi_shap", "double", context__.to_vec());
            pri_serial_i_omi_shap = double(0);
            vals_r__ = context__.vals_r("pri_serial_i_omi_shap");
            pos__ = 0;
            pri_serial_i_omi_shap = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_serial_i_omi_shap", pri_serial_i_omi_shap, 0);
            current_statement_begin__ = 262;
            context__.validate_dims("data initialization", "pri_serial_i_omi_rate", "double", context__.to_vec());
            pri_serial_i_omi_rate = double(0);
            vals_r__ = context__.vals_r("pri_serial_i_omi_rate");
            pos__ = 0;
            pri_serial_i_omi_rate = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_serial_i_omi_rate", pri_serial_i_omi_rate, 0);
            current_statement_begin__ = 265;
            context__.validate_dims("data initialization", "pri_p_sym_if_inf_a", "double", context__.to_vec());
            pri_p_sym_if_inf_a = double(0);
            vals_r__ = context__.vals_r("pri_p_sym_if_inf_a");
            pos__ = 0;
            pri_p_sym_if_inf_a = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_p_sym_if_inf_a", pri_p_sym_if_inf_a, 0);
            current_statement_begin__ = 266;
            context__.validate_dims("data initialization", "pri_p_sym_if_inf_b", "double", context__.to_vec());
            pri_p_sym_if_inf_b = double(0);
            vals_r__ = context__.vals_r("pri_p_sym_if_inf_b");
            pos__ = 0;
            pri_p_sym_if_inf_b = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_p_sym_if_inf_b", pri_p_sym_if_inf_b, 0);
            current_statement_begin__ = 267;
            context__.validate_dims("data initialization", "pri_new_p_sym_if_inf_a", "double", context__.to_vec());
            pri_new_p_sym_if_inf_a = double(0);
            vals_r__ = context__.vals_r("pri_new_p_sym_if_inf_a");
            pos__ = 0;
            pri_new_p_sym_if_inf_a = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_new_p_sym_if_inf_a", pri_new_p_sym_if_inf_a, 0);
            current_statement_begin__ = 268;
            context__.validate_dims("data initialization", "pri_new_p_sym_if_inf_b", "double", context__.to_vec());
            pri_new_p_sym_if_inf_b = double(0);
            vals_r__ = context__.vals_r("pri_new_p_sym_if_inf_b");
            pos__ = 0;
            pri_new_p_sym_if_inf_b = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_new_p_sym_if_inf_b", pri_new_p_sym_if_inf_b, 0);
            current_statement_begin__ = 269;
            context__.validate_dims("data initialization", "pri_p_sev_if_sym_a", "double", context__.to_vec());
            pri_p_sev_if_sym_a = double(0);
            vals_r__ = context__.vals_r("pri_p_sev_if_sym_a");
            pos__ = 0;
            pri_p_sev_if_sym_a = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_p_sev_if_sym_a", pri_p_sev_if_sym_a, 0);
            current_statement_begin__ = 270;
            context__.validate_dims("data initialization", "pri_p_sev_if_sym_b", "double", context__.to_vec());
            pri_p_sev_if_sym_b = double(0);
            vals_r__ = context__.vals_r("pri_p_sev_if_sym_b");
            pos__ = 0;
            pri_p_sev_if_sym_b = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_p_sev_if_sym_b", pri_p_sev_if_sym_b, 0);
            current_statement_begin__ = 271;
            context__.validate_dims("data initialization", "pri_p_die_if_sev_a", "double", context__.to_vec());
            pri_p_die_if_sev_a = double(0);
            vals_r__ = context__.vals_r("pri_p_die_if_sev_a");
            pos__ = 0;
            pri_p_die_if_sev_a = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_p_die_if_sev_a", pri_p_die_if_sev_a, 0);
            current_statement_begin__ = 272;
            context__.validate_dims("data initialization", "pri_p_die_if_sev_b", "double", context__.to_vec());
            pri_p_die_if_sev_b = double(0);
            vals_r__ = context__.vals_r("pri_p_die_if_sev_b");
            pos__ = 0;
            pri_p_die_if_sev_b = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_p_die_if_sev_b", pri_p_die_if_sev_b, 0);
            current_statement_begin__ = 275;
            context__.validate_dims("data initialization", "pri_p_die_if_inf_a", "double", context__.to_vec());
            pri_p_die_if_inf_a = double(0);
            vals_r__ = context__.vals_r("pri_p_die_if_inf_a");
            pos__ = 0;
            pri_p_die_if_inf_a = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_p_die_if_inf_a", pri_p_die_if_inf_a, 0);
            current_statement_begin__ = 276;
            context__.validate_dims("data initialization", "pri_p_die_if_inf_b", "double", context__.to_vec());
            pri_p_die_if_inf_b = double(0);
            vals_r__ = context__.vals_r("pri_p_die_if_inf_b");
            pos__ = 0;
            pri_p_die_if_inf_b = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_p_die_if_inf_b", pri_p_die_if_inf_b, 0);
            current_statement_begin__ = 280;
            context__.validate_dims("data initialization", "pri_rr_diag_asy_vs_sym_a", "double", context__.to_vec());
            pri_rr_diag_asy_vs_sym_a = double(0);
            vals_r__ = context__.vals_r("pri_rr_diag_asy_vs_sym_a");
            pos__ = 0;
            pri_rr_diag_asy_vs_sym_a = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_rr_diag_asy_vs_sym_a", pri_rr_diag_asy_vs_sym_a, 0);
            current_statement_begin__ = 281;
            context__.validate_dims("data initialization", "pri_rr_diag_asy_vs_sym_b", "double", context__.to_vec());
            pri_rr_diag_asy_vs_sym_b = double(0);
            vals_r__ = context__.vals_r("pri_rr_diag_asy_vs_sym_b");
            pos__ = 0;
            pri_rr_diag_asy_vs_sym_b = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_rr_diag_asy_vs_sym_b", pri_rr_diag_asy_vs_sym_b, 0);
            current_statement_begin__ = 284;
            context__.validate_dims("data initialization", "pri_rr_diag_sym_vs_sev_a", "double", context__.to_vec());
            pri_rr_diag_sym_vs_sev_a = double(0);
            vals_r__ = context__.vals_r("pri_rr_diag_sym_vs_sev_a");
            pos__ = 0;
            pri_rr_diag_sym_vs_sev_a = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_rr_diag_sym_vs_sev_a", pri_rr_diag_sym_vs_sev_a, 0);
            current_statement_begin__ = 285;
            context__.validate_dims("data initialization", "pri_rr_diag_sym_vs_sev_b", "double", context__.to_vec());
            pri_rr_diag_sym_vs_sev_b = double(0);
            vals_r__ = context__.vals_r("pri_rr_diag_sym_vs_sev_b");
            pos__ = 0;
            pri_rr_diag_sym_vs_sev_b = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_rr_diag_sym_vs_sev_b", pri_rr_diag_sym_vs_sev_b, 0);
            current_statement_begin__ = 288;
            context__.validate_dims("data initialization", "pri_p_diag_if_sev_a", "double", context__.to_vec());
            pri_p_diag_if_sev_a = double(0);
            vals_r__ = context__.vals_r("pri_p_diag_if_sev_a");
            pos__ = 0;
            pri_p_diag_if_sev_a = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_p_diag_if_sev_a", pri_p_diag_if_sev_a, 0);
            current_statement_begin__ = 289;
            context__.validate_dims("data initialization", "pri_p_diag_if_sev_b", "double", context__.to_vec());
            pri_p_diag_if_sev_b = double(0);
            vals_r__ = context__.vals_r("pri_p_diag_if_sev_b");
            pos__ = 0;
            pri_p_diag_if_sev_b = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_p_diag_if_sev_b", pri_p_diag_if_sev_b, 0);
            current_statement_begin__ = 293;
            context__.validate_dims("data initialization", "scale_dx_delay_sym_a", "double", context__.to_vec());
            scale_dx_delay_sym_a = double(0);
            vals_r__ = context__.vals_r("scale_dx_delay_sym_a");
            pos__ = 0;
            scale_dx_delay_sym_a = vals_r__[pos__++];
            check_greater_or_equal(function__, "scale_dx_delay_sym_a", scale_dx_delay_sym_a, 0);
            current_statement_begin__ = 294;
            context__.validate_dims("data initialization", "scale_dx_delay_sym_b", "double", context__.to_vec());
            scale_dx_delay_sym_b = double(0);
            vals_r__ = context__.vals_r("scale_dx_delay_sym_b");
            pos__ = 0;
            scale_dx_delay_sym_b = vals_r__[pos__++];
            check_greater_or_equal(function__, "scale_dx_delay_sym_b", scale_dx_delay_sym_b, 0);
            current_statement_begin__ = 295;
            context__.validate_dims("data initialization", "scale_dx_delay_sev_a", "double", context__.to_vec());
            scale_dx_delay_sev_a = double(0);
            vals_r__ = context__.vals_r("scale_dx_delay_sev_a");
            pos__ = 0;
            scale_dx_delay_sev_a = vals_r__[pos__++];
            check_greater_or_equal(function__, "scale_dx_delay_sev_a", scale_dx_delay_sev_a, 0);
            current_statement_begin__ = 296;
            context__.validate_dims("data initialization", "scale_dx_delay_sev_b", "double", context__.to_vec());
            scale_dx_delay_sev_b = double(0);
            vals_r__ = context__.vals_r("scale_dx_delay_sev_b");
            pos__ = 0;
            scale_dx_delay_sev_b = vals_r__[pos__++];
            check_greater_or_equal(function__, "scale_dx_delay_sev_b", scale_dx_delay_sev_b, 0);
            current_statement_begin__ = 299;
            context__.validate_dims("data initialization", "omicron_adjust", "int", context__.to_vec());
            omicron_adjust = int(0);
            vals_i__ = context__.vals_i("omicron_adjust");
            pos__ = 0;
            omicron_adjust = vals_i__[pos__++];
            check_greater_or_equal(function__, "omicron_adjust", omicron_adjust, 0);
            check_less_or_equal(function__, "omicron_adjust", omicron_adjust, 1);
            current_statement_begin__ = 300;
            context__.validate_dims("data initialization", "Omicron_takeover_mean", "double", context__.to_vec());
            Omicron_takeover_mean = double(0);
            vals_r__ = context__.vals_r("Omicron_takeover_mean");
            pos__ = 0;
            Omicron_takeover_mean = vals_r__[pos__++];
            current_statement_begin__ = 301;
            context__.validate_dims("data initialization", "Omicron_takeover_sd", "double", context__.to_vec());
            Omicron_takeover_sd = double(0);
            vals_r__ = context__.vals_r("Omicron_takeover_sd");
            pos__ = 0;
            Omicron_takeover_sd = vals_r__[pos__++];
            check_greater_or_equal(function__, "Omicron_takeover_sd", Omicron_takeover_sd, 0);
            current_statement_begin__ = 302;
            context__.validate_dims("data initialization", "sd_omicron_delay", "double", context__.to_vec());
            sd_omicron_delay = double(0);
            vals_r__ = context__.vals_r("sd_omicron_delay");
            pos__ = 0;
            sd_omicron_delay = vals_r__[pos__++];
            check_greater_or_equal(function__, "sd_omicron_delay", sd_omicron_delay, 0);
            // initialize transformed data variables
            current_statement_begin__ = 311;
            N_days_tot = int(0);
            stan::math::fill(N_days_tot, std::numeric_limits<int>::min());
            current_statement_begin__ = 314;
            validate_non_negative_index("obs_cas_mvs", "N_days", N_days);
            obs_cas_mvs = std::vector<int>(N_days, int(0));
            stan::math::fill(obs_cas_mvs, std::numeric_limits<int>::min());
            current_statement_begin__ = 315;
            validate_non_negative_index("obs_die_mvs", "N_days", N_days);
            obs_die_mvs = std::vector<int>(N_days, int(0));
            stan::math::fill(obs_die_mvs, std::numeric_limits<int>::min());
            current_statement_begin__ = 316;
            nda0 = int(0);
            stan::math::fill(nda0, std::numeric_limits<int>::min());
            stan::math::assign(nda0,(N_days_av - 1));
            current_statement_begin__ = 319;
            validate_non_negative_index("inf_prg_delay_rv", "Max_delay", Max_delay);
            inf_prg_delay_rv = Eigen::Matrix<double, Eigen::Dynamic, 1>(Max_delay);
            stan::math::fill(inf_prg_delay_rv, DUMMY_VAR__);
            current_statement_begin__ = 320;
            validate_non_negative_index("asy_rec_delay_rv", "Max_delay", Max_delay);
            asy_rec_delay_rv = Eigen::Matrix<double, Eigen::Dynamic, 1>(Max_delay);
            stan::math::fill(asy_rec_delay_rv, DUMMY_VAR__);
            current_statement_begin__ = 321;
            validate_non_negative_index("sym_prg_delay_rv", "Max_delay", Max_delay);
            sym_prg_delay_rv = Eigen::Matrix<double, Eigen::Dynamic, 1>(Max_delay);
            stan::math::fill(sym_prg_delay_rv, DUMMY_VAR__);
            current_statement_begin__ = 322;
            validate_non_negative_index("sev_prg_delay_rv", "Max_delay", Max_delay);
            sev_prg_delay_rv = Eigen::Matrix<double, Eigen::Dynamic, 1>(Max_delay);
            stan::math::fill(sev_prg_delay_rv, DUMMY_VAR__);
            current_statement_begin__ = 325;
            validate_non_negative_index("cas_rep_delay_rv", "Max_delay", Max_delay);
            cas_rep_delay_rv = Eigen::Matrix<double, Eigen::Dynamic, 1>(Max_delay);
            stan::math::fill(cas_rep_delay_rv, DUMMY_VAR__);
            current_statement_begin__ = 326;
            validate_non_negative_index("die_rep_delay_rv", "Max_delay", Max_delay);
            die_rep_delay_rv = Eigen::Matrix<double, Eigen::Dynamic, 1>(Max_delay);
            stan::math::fill(die_rep_delay_rv, DUMMY_VAR__);
            current_statement_begin__ = 329;
            validate_non_negative_index("cas_cum_report_delay_rv", "(N_days + N_days_before)", (N_days + N_days_before));
            cas_cum_report_delay_rv = Eigen::Matrix<double, Eigen::Dynamic, 1>((N_days + N_days_before));
            stan::math::fill(cas_cum_report_delay_rv, DUMMY_VAR__);
            current_statement_begin__ = 330;
            validate_non_negative_index("die_cum_report_delay_rv", "(N_days + N_days_before)", (N_days + N_days_before));
            die_cum_report_delay_rv = Eigen::Matrix<double, Eigen::Dynamic, 1>((N_days + N_days_before));
            stan::math::fill(die_cum_report_delay_rv, DUMMY_VAR__);
            // execute transformed data statements
            current_statement_begin__ = 334;
            stan::math::assign(N_days_tot, (N_days + N_days_before));
            current_statement_begin__ = 337;
            for (int i = 1; i <= N_days; ++i) {
                current_statement_begin__ = 338;
                if (as_bool(logical_lt(i, N_days_av))) {
                    current_statement_begin__ = 339;
                    stan::model::assign(obs_cas_mvs, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                0, 
                                "assigning variable obs_cas_mvs");
                    current_statement_begin__ = 340;
                    stan::model::assign(obs_die_mvs, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                0, 
                                "assigning variable obs_die_mvs");
                } else {
                    current_statement_begin__ = 342;
                    stan::model::assign(obs_cas_mvs, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                sum(stan::model::rvalue(obs_cas, stan::model::cons_list(stan::model::index_min_max((i - nda0), i), stan::model::nil_index_list()), "obs_cas")), 
                                "assigning variable obs_cas_mvs");
                    current_statement_begin__ = 343;
                    stan::model::assign(obs_die_mvs, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                sum(stan::model::rvalue(obs_die, stan::model::cons_list(stan::model::index_min_max((i - nda0), i), stan::model::nil_index_list()), "obs_die")), 
                                "assigning variable obs_die_mvs");
                }
            }
            current_statement_begin__ = 349;
            for (int i = 1; i <= Max_delay; ++i) {
                current_statement_begin__ = 350;
                stan::model::assign(inf_prg_delay_rv, 
                            stan::model::cons_list(stan::model::index_uni(((1 + Max_delay) - i)), stan::model::nil_index_list()), 
                            (gamma_cdf(i, inf_prg_delay_shap, inf_prg_delay_rate) - gamma_cdf((i - 1), inf_prg_delay_shap, inf_prg_delay_rate)), 
                            "assigning variable inf_prg_delay_rv");
                current_statement_begin__ = 354;
                stan::model::assign(asy_rec_delay_rv, 
                            stan::model::cons_list(stan::model::index_uni(((1 + Max_delay) - i)), stan::model::nil_index_list()), 
                            (gamma_cdf(i, asy_rec_delay_shap, (asy_rec_delay_rate * 2)) - gamma_cdf((i - 1), asy_rec_delay_shap, (asy_rec_delay_rate * 2))), 
                            "assigning variable asy_rec_delay_rv");
                current_statement_begin__ = 360;
                stan::model::assign(sym_prg_delay_rv, 
                            stan::model::cons_list(stan::model::index_uni(((1 + Max_delay) - i)), stan::model::nil_index_list()), 
                            (gamma_cdf(i, sym_prg_delay_shap, sym_prg_delay_rate) - gamma_cdf((i - 1), sym_prg_delay_shap, sym_prg_delay_rate)), 
                            "assigning variable sym_prg_delay_rv");
                current_statement_begin__ = 364;
                stan::model::assign(sev_prg_delay_rv, 
                            stan::model::cons_list(stan::model::index_uni(((1 + Max_delay) - i)), stan::model::nil_index_list()), 
                            (gamma_cdf(i, sev_prg_delay_shap, sev_prg_delay_rate) - gamma_cdf((i - 1), sev_prg_delay_shap, sev_prg_delay_rate)), 
                            "assigning variable sev_prg_delay_rv");
            }
            current_statement_begin__ = 371;
            for (int i = 1; i <= Max_delay; ++i) {
                current_statement_begin__ = 372;
                stan::model::assign(cas_rep_delay_rv, 
                            stan::model::cons_list(stan::model::index_uni(((1 + Max_delay) - i)), stan::model::nil_index_list()), 
                            (gamma_cdf(i, cas_rep_delay_shap, cas_rep_delay_rate) - gamma_cdf((i - 1), cas_rep_delay_shap, cas_rep_delay_rate)), 
                            "assigning variable cas_rep_delay_rv");
                current_statement_begin__ = 376;
                stan::model::assign(die_rep_delay_rv, 
                            stan::model::cons_list(stan::model::index_uni(((1 + Max_delay) - i)), stan::model::nil_index_list()), 
                            (gamma_cdf(i, die_rep_delay_shap, die_rep_delay_rate) - gamma_cdf((i - 1), die_rep_delay_shap, die_rep_delay_rate)), 
                            "assigning variable die_rep_delay_rv");
            }
            current_statement_begin__ = 382;
            stan::math::assign(inf_prg_delay_rv, divide(inf_prg_delay_rv, sum(inf_prg_delay_rv)));
            current_statement_begin__ = 383;
            stan::math::assign(asy_rec_delay_rv, divide(asy_rec_delay_rv, sum(asy_rec_delay_rv)));
            current_statement_begin__ = 384;
            stan::math::assign(sym_prg_delay_rv, divide(sym_prg_delay_rv, sum(sym_prg_delay_rv)));
            current_statement_begin__ = 385;
            stan::math::assign(sev_prg_delay_rv, divide(sev_prg_delay_rv, sum(sev_prg_delay_rv)));
            current_statement_begin__ = 386;
            stan::math::assign(cas_rep_delay_rv, divide(cas_rep_delay_rv, sum(cas_rep_delay_rv)));
            current_statement_begin__ = 387;
            stan::math::assign(die_rep_delay_rv, divide(die_rep_delay_rv, sum(die_rep_delay_rv)));
            current_statement_begin__ = 390;
            for (int i = 1; i <= N_days_tot; ++i) {
                current_statement_begin__ = 391;
                if (as_bool(logical_lt(i, Max_delay))) {
                    current_statement_begin__ = 392;
                    stan::model::assign(cas_cum_report_delay_rv, 
                                stan::model::cons_list(stan::model::index_uni(((1 + N_days_tot) - i)), stan::model::nil_index_list()), 
                                gamma_cdf(i, cas_rep_delay_shap, cas_rep_delay_rate), 
                                "assigning variable cas_cum_report_delay_rv");
                    current_statement_begin__ = 393;
                    stan::model::assign(die_cum_report_delay_rv, 
                                stan::model::cons_list(stan::model::index_uni(((1 + N_days_tot) - i)), stan::model::nil_index_list()), 
                                gamma_cdf(i, die_rep_delay_shap, die_rep_delay_rate), 
                                "assigning variable die_cum_report_delay_rv");
                } else {
                    current_statement_begin__ = 395;
                    stan::model::assign(cas_cum_report_delay_rv, 
                                stan::model::cons_list(stan::model::index_uni(((1 + N_days_tot) - i)), stan::model::nil_index_list()), 
                                1.0, 
                                "assigning variable cas_cum_report_delay_rv");
                    current_statement_begin__ = 396;
                    stan::model::assign(die_cum_report_delay_rv, 
                                stan::model::cons_list(stan::model::index_uni(((1 + N_days_tot) - i)), stan::model::nil_index_list()), 
                                1.0, 
                                "assigning variable die_cum_report_delay_rv");
                }
            }
            // validate transformed data
            current_statement_begin__ = 314;
            size_t obs_cas_mvs_i_0_max__ = N_days;
            for (size_t i_0__ = 0; i_0__ < obs_cas_mvs_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "obs_cas_mvs[i_0__]", obs_cas_mvs[i_0__], 0);
            }
            current_statement_begin__ = 315;
            size_t obs_die_mvs_i_0_max__ = N_days;
            for (size_t i_0__ = 0; i_0__ < obs_die_mvs_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "obs_die_mvs[i_0__]", obs_die_mvs[i_0__], 0);
            }
            current_statement_begin__ = 316;
            check_greater_or_equal(function__, "nda0", nda0, 0);
            current_statement_begin__ = 319;
            check_greater_or_equal(function__, "inf_prg_delay_rv", inf_prg_delay_rv, 0);
            current_statement_begin__ = 320;
            check_greater_or_equal(function__, "asy_rec_delay_rv", asy_rec_delay_rv, 0);
            current_statement_begin__ = 321;
            check_greater_or_equal(function__, "sym_prg_delay_rv", sym_prg_delay_rv, 0);
            current_statement_begin__ = 322;
            check_greater_or_equal(function__, "sev_prg_delay_rv", sev_prg_delay_rv, 0);
            current_statement_begin__ = 325;
            check_greater_or_equal(function__, "cas_rep_delay_rv", cas_rep_delay_rv, 0);
            current_statement_begin__ = 326;
            check_greater_or_equal(function__, "die_rep_delay_rv", die_rep_delay_rv, 0);
            current_statement_begin__ = 329;
            check_greater_or_equal(function__, "cas_cum_report_delay_rv", cas_cum_report_delay_rv, 0);
            current_statement_begin__ = 330;
            check_greater_or_equal(function__, "die_cum_report_delay_rv", die_cum_report_delay_rv, 0);
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 405;
            num_params_r__ += 1;
            current_statement_begin__ = 406;
            num_params_r__ += 1;
            current_statement_begin__ = 412;
            validate_non_negative_index("spl_par_rt_raw", "N_spl_par_rt", N_spl_par_rt);
            num_params_r__ += N_spl_par_rt;
            current_statement_begin__ = 416;
            num_params_r__ += 1;
            current_statement_begin__ = 417;
            num_params_r__ += 1;
            current_statement_begin__ = 418;
            num_params_r__ += 1;
            current_statement_begin__ = 419;
            num_params_r__ += 1;
            current_statement_begin__ = 421;
            num_params_r__ += 1;
            current_statement_begin__ = 423;
            num_params_r__ += 1;
            current_statement_begin__ = 425;
            num_params_r__ += 1;
            current_statement_begin__ = 428;
            num_params_r__ += 1;
            current_statement_begin__ = 432;
            num_params_r__ += 1;
            current_statement_begin__ = 433;
            num_params_r__ += 1;
            current_statement_begin__ = 436;
            num_params_r__ += 1;
            current_statement_begin__ = 437;
            num_params_r__ += 1;
            current_statement_begin__ = 439;
            validate_non_negative_index("spl_par_sym_dx", "N_spl_par_dx", N_spl_par_dx);
            num_params_r__ += N_spl_par_dx;
            current_statement_begin__ = 443;
            num_params_r__ += 1;
            current_statement_begin__ = 444;
            num_params_r__ += 1;
            current_statement_begin__ = 448;
            num_params_r__ += 1;
            current_statement_begin__ = 452;
            validate_non_negative_index("prob_vac", "3", 3);
            num_params_r__ += (3 - 1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_stan_program_default() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 405;
        if (!(context__.contains_r("log_new_inf_0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable log_new_inf_0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("log_new_inf_0");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "log_new_inf_0", "double", context__.to_vec());
        double log_new_inf_0(0);
        log_new_inf_0 = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(-(5), stan::math::log(1000), log_new_inf_0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable log_new_inf_0: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 406;
        if (!(context__.contains_r("serial_i")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable serial_i missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("serial_i");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "serial_i", "double", context__.to_vec());
        double serial_i(0);
        serial_i = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(3, 11, serial_i);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable serial_i: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 412;
        if (!(context__.contains_r("spl_par_rt_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable spl_par_rt_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("spl_par_rt_raw");
        pos__ = 0U;
        validate_non_negative_index("spl_par_rt_raw", "N_spl_par_rt", N_spl_par_rt);
        context__.validate_dims("parameter initialization", "spl_par_rt_raw", "vector_d", context__.to_vec(N_spl_par_rt));
        Eigen::Matrix<double, Eigen::Dynamic, 1> spl_par_rt_raw(N_spl_par_rt);
        size_t spl_par_rt_raw_j_1_max__ = N_spl_par_rt;
        for (size_t j_1__ = 0; j_1__ < spl_par_rt_raw_j_1_max__; ++j_1__) {
            spl_par_rt_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(0.001, 5, spl_par_rt_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable spl_par_rt_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 416;
        if (!(context__.contains_r("log_p_sym_if_inf")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable log_p_sym_if_inf missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("log_p_sym_if_inf");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "log_p_sym_if_inf", "double", context__.to_vec());
        double log_p_sym_if_inf(0);
        log_p_sym_if_inf = vals_r__[pos__++];
        try {
            writer__.scalar_ub_unconstrain(0, log_p_sym_if_inf);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable log_p_sym_if_inf: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 417;
        if (!(context__.contains_r("log_p_sym_if_inf_omi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable log_p_sym_if_inf_omi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("log_p_sym_if_inf_omi");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "log_p_sym_if_inf_omi", "double", context__.to_vec());
        double log_p_sym_if_inf_omi(0);
        log_p_sym_if_inf_omi = vals_r__[pos__++];
        try {
            writer__.scalar_ub_unconstrain(0, log_p_sym_if_inf_omi);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable log_p_sym_if_inf_omi: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 418;
        if (!(context__.contains_r("log_p_sev_if_sym")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable log_p_sev_if_sym missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("log_p_sev_if_sym");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "log_p_sev_if_sym", "double", context__.to_vec());
        double log_p_sev_if_sym(0);
        log_p_sev_if_sym = vals_r__[pos__++];
        try {
            writer__.scalar_ub_unconstrain(0, log_p_sev_if_sym);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable log_p_sev_if_sym: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 419;
        if (!(context__.contains_r("log_p_die_if_sev")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable log_p_die_if_sev missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("log_p_die_if_sev");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "log_p_die_if_sev", "double", context__.to_vec());
        double log_p_die_if_sev(0);
        log_p_die_if_sev = vals_r__[pos__++];
        try {
            writer__.scalar_ub_unconstrain(0, log_p_die_if_sev);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable log_p_die_if_sev: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 421;
        if (!(context__.contains_r("ifr_decl_OR")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable ifr_decl_OR missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("ifr_decl_OR");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "ifr_decl_OR", "double", context__.to_vec());
        double ifr_decl_OR(0);
        ifr_decl_OR = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0.001, 4, ifr_decl_OR);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable ifr_decl_OR: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 423;
        if (!(context__.contains_r("rr_decl_sev")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable rr_decl_sev missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("rr_decl_sev");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "rr_decl_sev", "double", context__.to_vec());
        double rr_decl_sev(0);
        rr_decl_sev = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0.01, 0.3, rr_decl_sev);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable rr_decl_sev: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 425;
        if (!(context__.contains_r("rr_decl_die")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable rr_decl_die missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("rr_decl_die");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "rr_decl_die", "double", context__.to_vec());
        double rr_decl_die(0);
        rr_decl_die = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0.0001, 0.25, rr_decl_die);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable rr_decl_die: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 428;
        if (!(context__.contains_r("omicron_delay")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable omicron_delay missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("omicron_delay");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "omicron_delay", "double", context__.to_vec());
        double omicron_delay(0);
        omicron_delay = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(-(60), 60, omicron_delay);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable omicron_delay: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 432;
        if (!(context__.contains_r("log_scale_dx_delay_sym")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable log_scale_dx_delay_sym missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("log_scale_dx_delay_sym");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "log_scale_dx_delay_sym", "double", context__.to_vec());
        double log_scale_dx_delay_sym(0);
        log_scale_dx_delay_sym = vals_r__[pos__++];
        try {
            writer__.scalar_ub_unconstrain(0, log_scale_dx_delay_sym);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable log_scale_dx_delay_sym: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 433;
        if (!(context__.contains_r("log_scale_dx_delay_sev")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable log_scale_dx_delay_sev missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("log_scale_dx_delay_sev");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "log_scale_dx_delay_sev", "double", context__.to_vec());
        double log_scale_dx_delay_sev(0);
        log_scale_dx_delay_sev = vals_r__[pos__++];
        try {
            writer__.scalar_ub_unconstrain(0, log_scale_dx_delay_sev);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable log_scale_dx_delay_sev: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 436;
        if (!(context__.contains_r("log_rr_diag_asy_vs_sym")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable log_rr_diag_asy_vs_sym missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("log_rr_diag_asy_vs_sym");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "log_rr_diag_asy_vs_sym", "double", context__.to_vec());
        double log_rr_diag_asy_vs_sym(0);
        log_rr_diag_asy_vs_sym = vals_r__[pos__++];
        try {
            writer__.scalar_ub_unconstrain(0, log_rr_diag_asy_vs_sym);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable log_rr_diag_asy_vs_sym: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 437;
        if (!(context__.contains_r("log_p_diag_if_sev")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable log_p_diag_if_sev missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("log_p_diag_if_sev");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "log_p_diag_if_sev", "double", context__.to_vec());
        double log_p_diag_if_sev(0);
        log_p_diag_if_sev = vals_r__[pos__++];
        try {
            writer__.scalar_ub_unconstrain(0, log_p_diag_if_sev);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable log_p_diag_if_sev: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 439;
        if (!(context__.contains_r("spl_par_sym_dx")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable spl_par_sym_dx missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("spl_par_sym_dx");
        pos__ = 0U;
        validate_non_negative_index("spl_par_sym_dx", "N_spl_par_dx", N_spl_par_dx);
        context__.validate_dims("parameter initialization", "spl_par_sym_dx", "vector_d", context__.to_vec(N_spl_par_dx));
        Eigen::Matrix<double, Eigen::Dynamic, 1> spl_par_sym_dx(N_spl_par_dx);
        size_t spl_par_sym_dx_j_1_max__ = N_spl_par_dx;
        for (size_t j_1__ = 0; j_1__ < spl_par_sym_dx_j_1_max__; ++j_1__) {
            spl_par_sym_dx(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(0.001, 0.999, spl_par_sym_dx);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable spl_par_sym_dx: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 443;
        if (!(context__.contains_r("inv_sqrt_phi_c")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable inv_sqrt_phi_c missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("inv_sqrt_phi_c");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "inv_sqrt_phi_c", "double", context__.to_vec());
        double inv_sqrt_phi_c(0);
        inv_sqrt_phi_c = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0.001, 15, inv_sqrt_phi_c);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable inv_sqrt_phi_c: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 444;
        if (!(context__.contains_r("inv_sqrt_phi_d")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable inv_sqrt_phi_d missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("inv_sqrt_phi_d");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "inv_sqrt_phi_d", "double", context__.to_vec());
        double inv_sqrt_phi_d(0);
        inv_sqrt_phi_d = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0.001, 15, inv_sqrt_phi_d);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable inv_sqrt_phi_d: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 448;
        if (!(context__.contains_r("log_p_reinf")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable log_p_reinf missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("log_p_reinf");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "log_p_reinf", "double", context__.to_vec());
        double log_p_reinf(0);
        log_p_reinf = vals_r__[pos__++];
        try {
            writer__.scalar_ub_unconstrain(0, log_p_reinf);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable log_p_reinf: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 452;
        if (!(context__.contains_r("prob_vac")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable prob_vac missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("prob_vac");
        pos__ = 0U;
        validate_non_negative_index("prob_vac", "3", 3);
        context__.validate_dims("parameter initialization", "prob_vac", "vector_d", context__.to_vec(3));
        Eigen::Matrix<double, Eigen::Dynamic, 1> prob_vac(3);
        size_t prob_vac_j_1_max__ = 3;
        for (size_t j_1__ = 0; j_1__ < prob_vac_j_1_max__; ++j_1__) {
            prob_vac(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.simplex_unconstrain(prob_vac);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable prob_vac: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 405;
            local_scalar_t__ log_new_inf_0;
            (void) log_new_inf_0;  // dummy to suppress unused var warning
            if (jacobian__)
                log_new_inf_0 = in__.scalar_lub_constrain(-(5), stan::math::log(1000), lp__);
            else
                log_new_inf_0 = in__.scalar_lub_constrain(-(5), stan::math::log(1000));
            current_statement_begin__ = 406;
            local_scalar_t__ serial_i;
            (void) serial_i;  // dummy to suppress unused var warning
            if (jacobian__)
                serial_i = in__.scalar_lub_constrain(3, 11, lp__);
            else
                serial_i = in__.scalar_lub_constrain(3, 11);
            current_statement_begin__ = 412;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> spl_par_rt_raw;
            (void) spl_par_rt_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                spl_par_rt_raw = in__.vector_lub_constrain(0.001, 5, N_spl_par_rt, lp__);
            else
                spl_par_rt_raw = in__.vector_lub_constrain(0.001, 5, N_spl_par_rt);
            current_statement_begin__ = 416;
            local_scalar_t__ log_p_sym_if_inf;
            (void) log_p_sym_if_inf;  // dummy to suppress unused var warning
            if (jacobian__)
                log_p_sym_if_inf = in__.scalar_ub_constrain(0, lp__);
            else
                log_p_sym_if_inf = in__.scalar_ub_constrain(0);
            current_statement_begin__ = 417;
            local_scalar_t__ log_p_sym_if_inf_omi;
            (void) log_p_sym_if_inf_omi;  // dummy to suppress unused var warning
            if (jacobian__)
                log_p_sym_if_inf_omi = in__.scalar_ub_constrain(0, lp__);
            else
                log_p_sym_if_inf_omi = in__.scalar_ub_constrain(0);
            current_statement_begin__ = 418;
            local_scalar_t__ log_p_sev_if_sym;
            (void) log_p_sev_if_sym;  // dummy to suppress unused var warning
            if (jacobian__)
                log_p_sev_if_sym = in__.scalar_ub_constrain(0, lp__);
            else
                log_p_sev_if_sym = in__.scalar_ub_constrain(0);
            current_statement_begin__ = 419;
            local_scalar_t__ log_p_die_if_sev;
            (void) log_p_die_if_sev;  // dummy to suppress unused var warning
            if (jacobian__)
                log_p_die_if_sev = in__.scalar_ub_constrain(0, lp__);
            else
                log_p_die_if_sev = in__.scalar_ub_constrain(0);
            current_statement_begin__ = 421;
            local_scalar_t__ ifr_decl_OR;
            (void) ifr_decl_OR;  // dummy to suppress unused var warning
            if (jacobian__)
                ifr_decl_OR = in__.scalar_lub_constrain(0.001, 4, lp__);
            else
                ifr_decl_OR = in__.scalar_lub_constrain(0.001, 4);
            current_statement_begin__ = 423;
            local_scalar_t__ rr_decl_sev;
            (void) rr_decl_sev;  // dummy to suppress unused var warning
            if (jacobian__)
                rr_decl_sev = in__.scalar_lub_constrain(0.01, 0.3, lp__);
            else
                rr_decl_sev = in__.scalar_lub_constrain(0.01, 0.3);
            current_statement_begin__ = 425;
            local_scalar_t__ rr_decl_die;
            (void) rr_decl_die;  // dummy to suppress unused var warning
            if (jacobian__)
                rr_decl_die = in__.scalar_lub_constrain(0.0001, 0.25, lp__);
            else
                rr_decl_die = in__.scalar_lub_constrain(0.0001, 0.25);
            current_statement_begin__ = 428;
            local_scalar_t__ omicron_delay;
            (void) omicron_delay;  // dummy to suppress unused var warning
            if (jacobian__)
                omicron_delay = in__.scalar_lub_constrain(-(60), 60, lp__);
            else
                omicron_delay = in__.scalar_lub_constrain(-(60), 60);
            current_statement_begin__ = 432;
            local_scalar_t__ log_scale_dx_delay_sym;
            (void) log_scale_dx_delay_sym;  // dummy to suppress unused var warning
            if (jacobian__)
                log_scale_dx_delay_sym = in__.scalar_ub_constrain(0, lp__);
            else
                log_scale_dx_delay_sym = in__.scalar_ub_constrain(0);
            current_statement_begin__ = 433;
            local_scalar_t__ log_scale_dx_delay_sev;
            (void) log_scale_dx_delay_sev;  // dummy to suppress unused var warning
            if (jacobian__)
                log_scale_dx_delay_sev = in__.scalar_ub_constrain(0, lp__);
            else
                log_scale_dx_delay_sev = in__.scalar_ub_constrain(0);
            current_statement_begin__ = 436;
            local_scalar_t__ log_rr_diag_asy_vs_sym;
            (void) log_rr_diag_asy_vs_sym;  // dummy to suppress unused var warning
            if (jacobian__)
                log_rr_diag_asy_vs_sym = in__.scalar_ub_constrain(0, lp__);
            else
                log_rr_diag_asy_vs_sym = in__.scalar_ub_constrain(0);
            current_statement_begin__ = 437;
            local_scalar_t__ log_p_diag_if_sev;
            (void) log_p_diag_if_sev;  // dummy to suppress unused var warning
            if (jacobian__)
                log_p_diag_if_sev = in__.scalar_ub_constrain(0, lp__);
            else
                log_p_diag_if_sev = in__.scalar_ub_constrain(0);
            current_statement_begin__ = 439;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> spl_par_sym_dx;
            (void) spl_par_sym_dx;  // dummy to suppress unused var warning
            if (jacobian__)
                spl_par_sym_dx = in__.vector_lub_constrain(0.001, 0.999, N_spl_par_dx, lp__);
            else
                spl_par_sym_dx = in__.vector_lub_constrain(0.001, 0.999, N_spl_par_dx);
            current_statement_begin__ = 443;
            local_scalar_t__ inv_sqrt_phi_c;
            (void) inv_sqrt_phi_c;  // dummy to suppress unused var warning
            if (jacobian__)
                inv_sqrt_phi_c = in__.scalar_lub_constrain(0.001, 15, lp__);
            else
                inv_sqrt_phi_c = in__.scalar_lub_constrain(0.001, 15);
            current_statement_begin__ = 444;
            local_scalar_t__ inv_sqrt_phi_d;
            (void) inv_sqrt_phi_d;  // dummy to suppress unused var warning
            if (jacobian__)
                inv_sqrt_phi_d = in__.scalar_lub_constrain(0.001, 15, lp__);
            else
                inv_sqrt_phi_d = in__.scalar_lub_constrain(0.001, 15);
            current_statement_begin__ = 448;
            local_scalar_t__ log_p_reinf;
            (void) log_p_reinf;  // dummy to suppress unused var warning
            if (jacobian__)
                log_p_reinf = in__.scalar_ub_constrain(0, lp__);
            else
                log_p_reinf = in__.scalar_ub_constrain(0);
            current_statement_begin__ = 452;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> prob_vac;
            (void) prob_vac;  // dummy to suppress unused var warning
            if (jacobian__)
                prob_vac = in__.simplex_constrain(3, lp__);
            else
                prob_vac = in__.simplex_constrain(3);
            // transformed parameters
            current_statement_begin__ = 459;
            validate_non_negative_index("log_new_inf", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_new_inf(N_days_tot);
            stan::math::initialize(log_new_inf, DUMMY_VAR__);
            stan::math::fill(log_new_inf, DUMMY_VAR__);
            current_statement_begin__ = 462;
            local_scalar_t__ log_frac_sus;
            (void) log_frac_sus;  // dummy to suppress unused var warning
            stan::math::initialize(log_frac_sus, DUMMY_VAR__);
            stan::math::fill(log_frac_sus, DUMMY_VAR__);
            current_statement_begin__ = 468;
            local_scalar_t__ log_frac_new_inf;
            (void) log_frac_new_inf;  // dummy to suppress unused var warning
            stan::math::initialize(log_frac_new_inf, DUMMY_VAR__);
            stan::math::fill(log_frac_new_inf, DUMMY_VAR__);
            current_statement_begin__ = 472;
            local_scalar_t__ log_pop_sus;
            (void) log_pop_sus;  // dummy to suppress unused var warning
            stan::math::initialize(log_pop_sus, DUMMY_VAR__);
            stan::math::fill(log_pop_sus, DUMMY_VAR__);
            current_statement_begin__ = 474;
            validate_non_negative_index("log_serial_i_comb", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_serial_i_comb(N_days_tot);
            stan::math::initialize(log_serial_i_comb, DUMMY_VAR__);
            stan::math::fill(log_serial_i_comb, DUMMY_VAR__);
            current_statement_begin__ = 478;
            validate_non_negative_index("Rt0", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> Rt0(N_days_tot);
            stan::math::initialize(Rt0, DUMMY_VAR__);
            stan::math::fill(Rt0, DUMMY_VAR__);
            current_statement_begin__ = 480;
            validate_non_negative_index("logRt", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> logRt(N_days_tot);
            stan::math::initialize(logRt, DUMMY_VAR__);
            stan::math::fill(logRt, DUMMY_VAR__);
            current_statement_begin__ = 486;
            validate_non_negative_index("log_p_die_if_sevt", "N_ifr_adj", N_ifr_adj);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_p_die_if_sevt(N_ifr_adj);
            stan::math::initialize(log_p_die_if_sevt, DUMMY_VAR__);
            stan::math::fill(log_p_die_if_sevt, DUMMY_VAR__);
            current_statement_begin__ = 487;
            validate_non_negative_index("log_p_sev_if_symt", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_p_sev_if_symt(N_days_tot);
            stan::math::initialize(log_p_sev_if_symt, DUMMY_VAR__);
            stan::math::fill(log_p_sev_if_symt, DUMMY_VAR__);
            current_statement_begin__ = 488;
            validate_non_negative_index("log_p_sym_if_inft", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_p_sym_if_inft(N_days_tot);
            stan::math::initialize(log_p_sym_if_inft, DUMMY_VAR__);
            stan::math::fill(log_p_sym_if_inft, DUMMY_VAR__);
            current_statement_begin__ = 489;
            validate_non_negative_index("log_p_sym_if_inft_omi", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_p_sym_if_inft_omi(N_days_tot);
            stan::math::initialize(log_p_sym_if_inft_omi, DUMMY_VAR__);
            stan::math::fill(log_p_sym_if_inft_omi, DUMMY_VAR__);
            current_statement_begin__ = 492;
            local_scalar_t__ log_rr_sym_if_inf;
            (void) log_rr_sym_if_inf;  // dummy to suppress unused var warning
            stan::math::initialize(log_rr_sym_if_inf, DUMMY_VAR__);
            stan::math::fill(log_rr_sym_if_inf, DUMMY_VAR__);
            current_statement_begin__ = 493;
            local_scalar_t__ log_rr_sev_if_sym;
            (void) log_rr_sev_if_sym;  // dummy to suppress unused var warning
            stan::math::initialize(log_rr_sev_if_sym, DUMMY_VAR__);
            stan::math::fill(log_rr_sev_if_sym, DUMMY_VAR__);
            current_statement_begin__ = 494;
            local_scalar_t__ rr_die_if_sev;
            (void) rr_die_if_sev;  // dummy to suppress unused var warning
            stan::math::initialize(rr_die_if_sev, DUMMY_VAR__);
            stan::math::fill(rr_die_if_sev, DUMMY_VAR__);
            current_statement_begin__ = 498;
            validate_non_negative_index("rr_diag_sym_vs_sev", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> rr_diag_sym_vs_sev(N_days_tot);
            stan::math::initialize(rr_diag_sym_vs_sev, DUMMY_VAR__);
            stan::math::fill(rr_diag_sym_vs_sev, DUMMY_VAR__);
            current_statement_begin__ = 499;
            validate_non_negative_index("log_p_diag_if_asy", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_p_diag_if_asy(N_days_tot);
            stan::math::initialize(log_p_diag_if_asy, DUMMY_VAR__);
            stan::math::fill(log_p_diag_if_asy, DUMMY_VAR__);
            current_statement_begin__ = 500;
            validate_non_negative_index("log_p_diag_if_sym", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_p_diag_if_sym(N_days_tot);
            stan::math::initialize(log_p_diag_if_sym, DUMMY_VAR__);
            stan::math::fill(log_p_diag_if_sym, DUMMY_VAR__);
            current_statement_begin__ = 504;
            validate_non_negative_index("sym_diag_delay_rv", "Max_delay", Max_delay);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sym_diag_delay_rv(Max_delay);
            stan::math::initialize(sym_diag_delay_rv, DUMMY_VAR__);
            stan::math::fill(sym_diag_delay_rv, DUMMY_VAR__);
            current_statement_begin__ = 505;
            validate_non_negative_index("sev_diag_delay_rv", "Max_delay", Max_delay);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sev_diag_delay_rv(Max_delay);
            stan::math::initialize(sev_diag_delay_rv, DUMMY_VAR__);
            stan::math::fill(sev_diag_delay_rv, DUMMY_VAR__);
            current_statement_begin__ = 509;
            local_scalar_t__ log_p_die_if_inf;
            (void) log_p_die_if_inf;  // dummy to suppress unused var warning
            stan::math::initialize(log_p_die_if_inf, DUMMY_VAR__);
            stan::math::fill(log_p_die_if_inf, DUMMY_VAR__);
            current_statement_begin__ = 513;
            validate_non_negative_index("log_new_sym", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_new_sym(N_days_tot);
            stan::math::initialize(log_new_sym, DUMMY_VAR__);
            stan::math::fill(log_new_sym, DUMMY_VAR__);
            current_statement_begin__ = 515;
            validate_non_negative_index("log_new_sev", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_new_sev(N_days_tot);
            stan::math::initialize(log_new_sev, DUMMY_VAR__);
            stan::math::fill(log_new_sev, DUMMY_VAR__);
            current_statement_begin__ = 517;
            validate_non_negative_index("log_new_die", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_new_die(N_days_tot);
            stan::math::initialize(log_new_die, DUMMY_VAR__);
            stan::math::fill(log_new_die, DUMMY_VAR__);
            current_statement_begin__ = 521;
            validate_non_negative_index("log_new_asy_dx", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_new_asy_dx(N_days_tot);
            stan::math::initialize(log_new_asy_dx, DUMMY_VAR__);
            stan::math::fill(log_new_asy_dx, DUMMY_VAR__);
            current_statement_begin__ = 523;
            validate_non_negative_index("log_new_sym_dx", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_new_sym_dx(N_days_tot);
            stan::math::initialize(log_new_sym_dx, DUMMY_VAR__);
            stan::math::fill(log_new_sym_dx, DUMMY_VAR__);
            current_statement_begin__ = 525;
            validate_non_negative_index("log_new_sev_dx", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_new_sev_dx(N_days_tot);
            stan::math::initialize(log_new_sev_dx, DUMMY_VAR__);
            stan::math::fill(log_new_sev_dx, DUMMY_VAR__);
            current_statement_begin__ = 529;
            validate_non_negative_index("log_dx_sym_sev", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_dx_sym_sev(N_days_tot);
            stan::math::initialize(log_dx_sym_sev, DUMMY_VAR__);
            stan::math::fill(log_dx_sym_sev, DUMMY_VAR__);
            current_statement_begin__ = 531;
            validate_non_negative_index("log_dx_sym_die", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_dx_sym_die(N_days_tot);
            stan::math::initialize(log_dx_sym_die, DUMMY_VAR__);
            stan::math::fill(log_dx_sym_die, DUMMY_VAR__);
            current_statement_begin__ = 533;
            validate_non_negative_index("log_dx_sev_die", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_dx_sev_die(N_days_tot);
            stan::math::initialize(log_dx_sev_die, DUMMY_VAR__);
            stan::math::fill(log_dx_sev_die, DUMMY_VAR__);
            current_statement_begin__ = 537;
            validate_non_negative_index("log_diag_all", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_diag_all(N_days_tot);
            stan::math::initialize(log_diag_all, DUMMY_VAR__);
            stan::math::fill(log_diag_all, DUMMY_VAR__);
            current_statement_begin__ = 539;
            validate_non_negative_index("log_new_die_dx", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_new_die_dx(N_days_tot);
            stan::math::initialize(log_new_die_dx, DUMMY_VAR__);
            stan::math::fill(log_new_die_dx, DUMMY_VAR__);
            current_statement_begin__ = 544;
            validate_non_negative_index("log_occur_cas", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_occur_cas(N_days_tot);
            stan::math::initialize(log_occur_cas, DUMMY_VAR__);
            stan::math::fill(log_occur_cas, DUMMY_VAR__);
            current_statement_begin__ = 546;
            validate_non_negative_index("log_occur_die", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_occur_die(N_days_tot);
            stan::math::initialize(log_occur_die, DUMMY_VAR__);
            stan::math::fill(log_occur_die, DUMMY_VAR__);
            current_statement_begin__ = 551;
            validate_non_negative_index("log_occur_cas_mvs", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_occur_cas_mvs(N_days_tot);
            stan::math::initialize(log_occur_cas_mvs, DUMMY_VAR__);
            stan::math::fill(log_occur_cas_mvs, DUMMY_VAR__);
            current_statement_begin__ = 552;
            validate_non_negative_index("log_occur_die_mvs", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_occur_die_mvs(N_days_tot);
            stan::math::initialize(log_occur_die_mvs, DUMMY_VAR__);
            stan::math::fill(log_occur_die_mvs, DUMMY_VAR__);
            current_statement_begin__ = 555;
            validate_non_negative_index("log_ifr_omi_rv", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_ifr_omi_rv(N_days_tot);
            stan::math::initialize(log_ifr_omi_rv, DUMMY_VAR__);
            stan::math::fill(log_ifr_omi_rv, DUMMY_VAR__);
            current_statement_begin__ = 556;
            validate_non_negative_index("log_ifr_omi_rv_sev", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_ifr_omi_rv_sev(N_days_tot);
            stan::math::initialize(log_ifr_omi_rv_sev, DUMMY_VAR__);
            stan::math::fill(log_ifr_omi_rv_sev, DUMMY_VAR__);
            current_statement_begin__ = 557;
            validate_non_negative_index("log_ifr_omi_rv_die", "N_days_tot", N_days_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_ifr_omi_rv_die(N_days_tot);
            stan::math::initialize(log_ifr_omi_rv_die, DUMMY_VAR__);
            stan::math::fill(log_ifr_omi_rv_die, DUMMY_VAR__);
            current_statement_begin__ = 561;
            local_scalar_t__ phi_cas;
            (void) phi_cas;  // dummy to suppress unused var warning
            stan::math::initialize(phi_cas, DUMMY_VAR__);
            stan::math::fill(phi_cas, DUMMY_VAR__);
            current_statement_begin__ = 562;
            local_scalar_t__ phi_die;
            (void) phi_die;  // dummy to suppress unused var warning
            stan::math::initialize(phi_die, DUMMY_VAR__);
            stan::math::fill(phi_die, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 638;
            for (int i = 1; i <= N_days_tot; ++i) {
                current_statement_begin__ = 639;
                stan::model::assign(log_ifr_omi_rv, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            normal_cdf(i, (Omicron_takeover_mean + omicron_delay), Omicron_takeover_sd), 
                            "assigning variable log_ifr_omi_rv");
                current_statement_begin__ = 640;
                stan::model::assign(log_ifr_omi_rv_die, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            normal_cdf(i, ((((Omicron_takeover_mean + omicron_delay) + 6) + 7) + 9), Omicron_takeover_sd), 
                            "assigning variable log_ifr_omi_rv_die");
                current_statement_begin__ = 641;
                stan::model::assign(log_ifr_omi_rv_sev, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            normal_cdf(i, (((Omicron_takeover_mean + omicron_delay) + 6) + 7), Omicron_takeover_sd), 
                            "assigning variable log_ifr_omi_rv_sev");
            }
            current_statement_begin__ = 644;
            stan::math::assign(log_ifr_omi_rv, multiply(log_ifr_omi_rv, 0.95));
            current_statement_begin__ = 645;
            stan::math::assign(log_ifr_omi_rv_die, multiply(log_ifr_omi_rv_die, 0.95));
            current_statement_begin__ = 646;
            stan::math::assign(log_ifr_omi_rv_sev, multiply(log_ifr_omi_rv_sev, 0.95));
            current_statement_begin__ = 647;
            stan::math::assign(log_ifr_omi_rv, add(log_ifr_omi_rv, 0.001));
            current_statement_begin__ = 648;
            stan::math::assign(log_ifr_omi_rv_die, add(log_ifr_omi_rv_die, 0.001));
            current_statement_begin__ = 649;
            stan::math::assign(log_ifr_omi_rv_sev, add(log_ifr_omi_rv_sev, 0.001));
            current_statement_begin__ = 650;
            stan::math::assign(log_ifr_omi_rv, stan::math::log(log_ifr_omi_rv));
            current_statement_begin__ = 651;
            stan::math::assign(log_ifr_omi_rv_die, stan::math::log(log_ifr_omi_rv_die));
            current_statement_begin__ = 652;
            stan::math::assign(log_ifr_omi_rv_sev, stan::math::log(log_ifr_omi_rv_sev));
            current_statement_begin__ = 655;
            for (int i = 1; i <= N_days_tot; ++i) {
                current_statement_begin__ = 656;
                stan::model::assign(log_serial_i_comb, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            log_sum_exp((stan::math::log(serial_i) + log1m_exp(get_base1(log_ifr_omi_rv, i, "log_ifr_omi_rv", 1))), (stan::math::log(2.5) + get_base1(log_ifr_omi_rv, i, "log_ifr_omi_rv", 1))), 
                            "assigning variable log_serial_i_comb");
            }
            current_statement_begin__ = 664;
            stan::math::assign(log_rr_sym_if_inf, (log_p_sym_if_inf_omi - log_p_sym_if_inf));
            current_statement_begin__ = 665;
            stan::math::assign(log_rr_sev_if_sym, (stan::math::log(rr_decl_sev) - log_rr_sym_if_inf));
            current_statement_begin__ = 666;
            stan::math::assign(rr_die_if_sev, (rr_decl_die / rr_decl_sev));
            current_statement_begin__ = 670;
            stan::math::assign(log_p_die_if_sevt, add((log_p_die_if_sev + stan::math::log(ifr_adj_fixed)), stan::math::log1p(multiply(ifr_adj, ifr_decl_OR))));
            current_statement_begin__ = 672;
            for (int i = 1; i <= N_days_tot; ++i) {
                current_statement_begin__ = 674;
                stan::model::assign(log_p_die_if_sevt, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((get_base1(log_p_die_if_sevt, i, "log_p_die_if_sevt", 1) + (get_base1(prob_vac, 1, "prob_vac", 1) * stan::math::log(get_base1(ifr_vac_adj, i, "ifr_vac_adj", 1)))) + stan::math::log((1 - (stan::math::exp(get_base1(log_ifr_omi_rv_die, i, "log_ifr_omi_rv_die", 1)) * (1 - rr_die_if_sev))))), 
                            "assigning variable log_p_die_if_sevt");
                current_statement_begin__ = 679;
                stan::model::assign(log_p_sev_if_symt, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((log_p_sev_if_sym + (get_base1(prob_vac, 2, "prob_vac", 1) * stan::math::log(get_base1(ifr_vac_adj, i, "ifr_vac_adj", 1)))) + stan::math::log((1 - (stan::math::exp(get_base1(log_ifr_omi_rv_sev, i, "log_ifr_omi_rv_sev", 1)) * (1 - stan::math::exp(log_rr_sev_if_sym)))))), 
                            "assigning variable log_p_sev_if_symt");
                current_statement_begin__ = 683;
                stan::model::assign(log_p_sym_if_inft, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (log_p_sym_if_inf + (get_base1(prob_vac, 3, "prob_vac", 1) * stan::math::log(get_base1(ifr_vac_adj, i, "ifr_vac_adj", 1)))), 
                            "assigning variable log_p_sym_if_inft");
                current_statement_begin__ = 684;
                stan::model::assign(log_p_sym_if_inft_omi, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (log_p_sym_if_inf_omi + (get_base1(prob_vac, 3, "prob_vac", 1) * stan::math::log(get_base1(ifr_vac_adj, i, "ifr_vac_adj", 1)))), 
                            "assigning variable log_p_sym_if_inft_omi");
            }
            current_statement_begin__ = 689;
            stan::math::assign(rr_diag_sym_vs_sev, inv_logit(multiply(spl_basis_dx, logit(spl_par_sym_dx))));
            current_statement_begin__ = 692;
            stan::math::assign(log_p_diag_if_sym, add(log_p_diag_if_sev, stan::math::log(rr_diag_sym_vs_sev)));
            current_statement_begin__ = 693;
            stan::math::assign(log_p_diag_if_asy, add(log_p_diag_if_sym, log_rr_diag_asy_vs_sym));
            {
            current_statement_begin__ = 704;
            validate_non_negative_index("sym_delay_gammas", "(Max_delay + 1)", (Max_delay + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sym_delay_gammas((Max_delay + 1));
            stan::math::initialize(sym_delay_gammas, DUMMY_VAR__);
            stan::math::fill(sym_delay_gammas, DUMMY_VAR__);
            current_statement_begin__ = 705;
            validate_non_negative_index("sev_delay_gammas", "(Max_delay + 1)", (Max_delay + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sev_delay_gammas((Max_delay + 1));
            stan::math::initialize(sev_delay_gammas, DUMMY_VAR__);
            stan::math::fill(sev_delay_gammas, DUMMY_VAR__);
            current_statement_begin__ = 706;
            for (int i = 1; i <= (Max_delay + 1); ++i) {
                current_statement_begin__ = 707;
                stan::model::assign(sym_delay_gammas, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            gamma_cdf((i - 1), sym_prg_delay_shap, (sym_prg_delay_rate / stan::math::exp(log_scale_dx_delay_sym))), 
                            "assigning variable sym_delay_gammas");
                current_statement_begin__ = 708;
                stan::model::assign(sev_delay_gammas, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            gamma_cdf((i - 1), sev_prg_delay_shap, (sev_prg_delay_rate / stan::math::exp(log_scale_dx_delay_sev))), 
                            "assigning variable sev_delay_gammas");
            }
            current_statement_begin__ = 714;
            for (int i = 1; i <= Max_delay; ++i) {
                current_statement_begin__ = 715;
                stan::model::assign(sym_diag_delay_rv, 
                            stan::model::cons_list(stan::model::index_uni(((1 + Max_delay) - i)), stan::model::nil_index_list()), 
                            (get_base1(sym_delay_gammas, (i + 1), "sym_delay_gammas", 1) - get_base1(sym_delay_gammas, i, "sym_delay_gammas", 1)), 
                            "assigning variable sym_diag_delay_rv");
                current_statement_begin__ = 716;
                stan::model::assign(sev_diag_delay_rv, 
                            stan::model::cons_list(stan::model::index_uni(((1 + Max_delay) - i)), stan::model::nil_index_list()), 
                            (get_base1(sev_delay_gammas, (i + 1), "sev_delay_gammas", 1) - get_base1(sev_delay_gammas, i, "sev_delay_gammas", 1)), 
                            "assigning variable sev_diag_delay_rv");
            }
            }
            current_statement_begin__ = 724;
            stan::math::assign(log_p_die_if_inf, ((log_p_sym_if_inf + log_p_sev_if_sym) + log_p_die_if_sev));
            current_statement_begin__ = 731;
            stan::math::assign(Rt0, multiply(spl_basis_rt, spl_par_rt_raw));
            current_statement_begin__ = 732;
            stan::math::assign(log_pop_sus, stan::math::log(pop_size));
            current_statement_begin__ = 738;
            stan::math::assign(log_frac_sus, stan::math::log(0.9999999999));
            current_statement_begin__ = 740;
            for (int i = 1; i <= N_days_tot; ++i) {
                current_statement_begin__ = 741;
                stan::model::assign(logRt, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((stan::math::log(get_base1(Rt0, i, "Rt0", 1)) + log_pop_sus) - stan::math::log(pop_size)), 
                            "assigning variable logRt");
                current_statement_begin__ = 743;
                if (as_bool(logical_gt(i, 1))) {
                    current_statement_begin__ = 747;
                    stan::math::assign(log_frac_new_inf, custom_softplus_scalar((get_base1(log_new_inf, (i - 1), "log_new_inf", 1) + ((1 / stan::math::exp(get_base1(log_serial_i_comb, i, "log_serial_i_comb", 1))) * get_base1(logRt, i, "logRt", 1))), log_pop_sus, pstream__));
                    current_statement_begin__ = 752;
                    stan::model::assign(log_new_inf, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (log_frac_new_inf + log_pop_sus), 
                                "assigning variable log_new_inf");
                } else if (as_bool(logical_eq(i, 1))) {
                    current_statement_begin__ = 759;
                    stan::math::assign(log_frac_new_inf, custom_softplus_scalar((log_new_inf_0 + ((1 / stan::math::exp(get_base1(log_serial_i_comb, i, "log_serial_i_comb", 1))) * get_base1(logRt, i, "logRt", 1))), log_pop_sus, pstream__));
                    current_statement_begin__ = 767;
                    stan::model::assign(log_new_inf, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (log_frac_new_inf + log_pop_sus), 
                                "assigning variable log_new_inf");
                }
                current_statement_begin__ = 771;
                stan::math::assign(log_frac_sus, log_sum_exp((log_frac_sus + log1m_exp(log_frac_new_inf)), ((log_p_reinf + get_base1(log_ifr_omi_rv, i, "log_ifr_omi_rv", 1)) + log1m_exp(log_frac_sus))));
                current_statement_begin__ = 790;
                stan::math::assign(log_pop_sus, (log_frac_sus + stan::math::log(pop_size)));
            }
            current_statement_begin__ = 804;
            stan::math::assign(log_new_sym, vlog_sum_exp(add(log_p_sym_if_inft, lconv1d(add(log_new_inf, log1m_exp(log_ifr_omi_rv)), inf_prg_delay_rv, pstream__)), add(log_p_sym_if_inft_omi, lconv1d(add(log_new_inf, log_ifr_omi_rv), inf_prg_delay_rv, pstream__)), pstream__));
            current_statement_begin__ = 813;
            stan::math::assign(log_new_sev, add(log_p_sev_if_symt, lconv1d(log_new_sym, sym_prg_delay_rv, pstream__)));
            current_statement_begin__ = 820;
            stan::math::assign(log_new_die, add(stan::model::rvalue(log_p_die_if_sevt, stan::model::cons_list(stan::model::index_min_max(1, N_days_tot), stan::model::nil_index_list()), "log_p_die_if_sevt"), lconv1d(log_new_sev, sev_prg_delay_rv, pstream__)));
            current_statement_begin__ = 839;
            stan::math::assign(log_new_asy_dx, add(log1m_exp(log_p_sym_if_inft), lconv1d(add(log_new_inf, log_p_diag_if_asy), asy_rec_delay_rv, pstream__)));
            current_statement_begin__ = 854;
            stan::math::assign(log_new_sym_dx, lconv1d(add(log_p_diag_if_sym, log_new_sym), sym_diag_delay_rv, pstream__));
            current_statement_begin__ = 868;
            stan::math::assign(log_dx_sym_sev, add(log_p_sev_if_symt, lconv1d(add(log_p_diag_if_sym, log_new_sym), sym_prg_delay_rv, pstream__)));
            current_statement_begin__ = 877;
            stan::math::assign(log_dx_sym_die, add(stan::model::rvalue(log_p_die_if_sevt, stan::model::cons_list(stan::model::index_min_max(1, N_days_tot), stan::model::nil_index_list()), "log_p_die_if_sevt"), lconv1d(log_dx_sym_sev, sev_prg_delay_rv, pstream__)));
            current_statement_begin__ = 889;
            stan::math::assign(log_new_sev_dx, add(log_p_diag_if_sev, lconv1d(vlog_diff_exp(log_new_sev, add(log_new_sev, vcustom_softplus_scalar(log_dx_sym_sev, log_new_sev, pstream__)), pstream__), sev_diag_delay_rv, pstream__)));
            current_statement_begin__ = 914;
            stan::math::assign(log_dx_sev_die, add(add(log_p_die_if_sev, stan::model::rvalue(log_p_die_if_sevt, stan::model::cons_list(stan::model::index_min_max(1, N_days_tot), stan::model::nil_index_list()), "log_p_die_if_sevt")), lconv1d(vlog_diff_exp(log_new_sev, add(log_new_sev, vcustom_softplus_scalar(log_dx_sym_sev, log_new_sev, pstream__)), pstream__), sev_prg_delay_rv, pstream__)));
            current_statement_begin__ = 936;
            stan::math::assign(log_diag_all, vlog_sum_exp(log_new_asy_dx, vlog_sum_exp(log_new_sym_dx, log_new_sev_dx, pstream__), pstream__));
            current_statement_begin__ = 948;
            stan::math::assign(log_new_die_dx, vlog_sum_exp(log_dx_sym_die, log_dx_sev_die, pstream__));
            current_statement_begin__ = 959;
            if (as_bool(logical_eq(obs_cas_rep, 1))) {
                current_statement_begin__ = 964;
                stan::math::assign(log_occur_cas, lconv1d(log_diag_all, cas_rep_delay_rv, pstream__));
            } else {
                current_statement_begin__ = 970;
                stan::math::assign(log_occur_cas, add(stan::math::log(cas_cum_report_delay_rv), log_diag_all));
            }
            current_statement_begin__ = 974;
            if (as_bool(logical_eq(obs_die_rep, 1))) {
                current_statement_begin__ = 979;
                stan::math::assign(log_occur_die, lconv1d(log_new_die_dx, die_rep_delay_rv, pstream__));
            } else {
                current_statement_begin__ = 985;
                stan::math::assign(log_occur_die, add(stan::math::log(die_cum_report_delay_rv), log_new_die_dx));
            }
            current_statement_begin__ = 989;
            for (int i = 1; i <= N_days_tot; ++i) {
                current_statement_begin__ = 990;
                if (as_bool(logical_lt(i, N_days_av))) {
                    current_statement_begin__ = 1000;
                    stan::model::assign(log_occur_cas_mvs, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                stan::math::negative_infinity(), 
                                "assigning variable log_occur_cas_mvs");
                    current_statement_begin__ = 1001;
                    stan::model::assign(log_occur_die_mvs, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                stan::math::negative_infinity(), 
                                "assigning variable log_occur_die_mvs");
                } else {
                    current_statement_begin__ = 1008;
                    stan::model::assign(log_occur_cas_mvs, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                log_sum_exp(stan::model::rvalue(log_occur_cas, stan::model::cons_list(stan::model::index_min_max((i - nda0), i), stan::model::nil_index_list()), "log_occur_cas")), 
                                "assigning variable log_occur_cas_mvs");
                    current_statement_begin__ = 1009;
                    stan::model::assign(log_occur_die_mvs, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                log_sum_exp(stan::model::rvalue(log_occur_die, stan::model::cons_list(stan::model::index_min_max((i - nda0), i), stan::model::nil_index_list()), "log_occur_die")), 
                                "assigning variable log_occur_die_mvs");
                }
            }
            current_statement_begin__ = 1014;
            stan::math::assign(phi_cas, pow(inv_sqrt_phi_c, -(2)));
            current_statement_begin__ = 1015;
            stan::math::assign(phi_die, pow(inv_sqrt_phi_d, -(2)));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 459;
            size_t log_new_inf_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_new_inf_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(log_new_inf(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: log_new_inf" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable log_new_inf: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 462;
            if (stan::math::is_uninitialized(log_frac_sus)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: log_frac_sus";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable log_frac_sus: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_less_or_equal(function__, "log_frac_sus", log_frac_sus, 0);
            current_statement_begin__ = 468;
            if (stan::math::is_uninitialized(log_frac_new_inf)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: log_frac_new_inf";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable log_frac_new_inf: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_less_or_equal(function__, "log_frac_new_inf", log_frac_new_inf, 0);
            current_statement_begin__ = 472;
            if (stan::math::is_uninitialized(log_pop_sus)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: log_pop_sus";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable log_pop_sus: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 474;
            size_t log_serial_i_comb_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_serial_i_comb_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(log_serial_i_comb(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: log_serial_i_comb" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable log_serial_i_comb: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 478;
            size_t Rt0_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < Rt0_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(Rt0(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: Rt0" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Rt0: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "Rt0", Rt0, 0);
            current_statement_begin__ = 480;
            size_t logRt_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < logRt_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(logRt(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: logRt" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable logRt: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 486;
            size_t log_p_die_if_sevt_j_1_max__ = N_ifr_adj;
            for (size_t j_1__ = 0; j_1__ < log_p_die_if_sevt_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(log_p_die_if_sevt(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: log_p_die_if_sevt" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable log_p_die_if_sevt: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_less_or_equal(function__, "log_p_die_if_sevt", log_p_die_if_sevt, stan::math::log(4));
            current_statement_begin__ = 487;
            size_t log_p_sev_if_symt_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_p_sev_if_symt_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(log_p_sev_if_symt(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: log_p_sev_if_symt" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable log_p_sev_if_symt: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_less_or_equal(function__, "log_p_sev_if_symt", log_p_sev_if_symt, stan::math::log(4));
            current_statement_begin__ = 488;
            size_t log_p_sym_if_inft_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_p_sym_if_inft_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(log_p_sym_if_inft(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: log_p_sym_if_inft" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable log_p_sym_if_inft: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_less_or_equal(function__, "log_p_sym_if_inft", log_p_sym_if_inft, 0);
            current_statement_begin__ = 489;
            size_t log_p_sym_if_inft_omi_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_p_sym_if_inft_omi_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(log_p_sym_if_inft_omi(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: log_p_sym_if_inft_omi" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable log_p_sym_if_inft_omi: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_less_or_equal(function__, "log_p_sym_if_inft_omi", log_p_sym_if_inft_omi, 0);
            current_statement_begin__ = 492;
            if (stan::math::is_uninitialized(log_rr_sym_if_inf)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: log_rr_sym_if_inf";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable log_rr_sym_if_inf: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 493;
            if (stan::math::is_uninitialized(log_rr_sev_if_sym)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: log_rr_sev_if_sym";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable log_rr_sev_if_sym: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 494;
            if (stan::math::is_uninitialized(rr_die_if_sev)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: rr_die_if_sev";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable rr_die_if_sev: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "rr_die_if_sev", rr_die_if_sev, 0);
            current_statement_begin__ = 498;
            size_t rr_diag_sym_vs_sev_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < rr_diag_sym_vs_sev_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(rr_diag_sym_vs_sev(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: rr_diag_sym_vs_sev" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable rr_diag_sym_vs_sev: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 499;
            size_t log_p_diag_if_asy_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_p_diag_if_asy_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(log_p_diag_if_asy(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: log_p_diag_if_asy" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable log_p_diag_if_asy: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_less_or_equal(function__, "log_p_diag_if_asy", log_p_diag_if_asy, 0);
            current_statement_begin__ = 500;
            size_t log_p_diag_if_sym_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_p_diag_if_sym_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(log_p_diag_if_sym(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: log_p_diag_if_sym" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable log_p_diag_if_sym: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_less_or_equal(function__, "log_p_diag_if_sym", log_p_diag_if_sym, 0);
            current_statement_begin__ = 504;
            size_t sym_diag_delay_rv_j_1_max__ = Max_delay;
            for (size_t j_1__ = 0; j_1__ < sym_diag_delay_rv_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(sym_diag_delay_rv(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: sym_diag_delay_rv" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable sym_diag_delay_rv: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "sym_diag_delay_rv", sym_diag_delay_rv, 0);
            current_statement_begin__ = 505;
            size_t sev_diag_delay_rv_j_1_max__ = Max_delay;
            for (size_t j_1__ = 0; j_1__ < sev_diag_delay_rv_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(sev_diag_delay_rv(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: sev_diag_delay_rv" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable sev_diag_delay_rv: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "sev_diag_delay_rv", sev_diag_delay_rv, 0);
            current_statement_begin__ = 509;
            if (stan::math::is_uninitialized(log_p_die_if_inf)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: log_p_die_if_inf";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable log_p_die_if_inf: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_less_or_equal(function__, "log_p_die_if_inf", log_p_die_if_inf, 0);
            current_statement_begin__ = 513;
            size_t log_new_sym_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_new_sym_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(log_new_sym(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: log_new_sym" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable log_new_sym: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 515;
            size_t log_new_sev_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_new_sev_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(log_new_sev(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: log_new_sev" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable log_new_sev: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 517;
            size_t log_new_die_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_new_die_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(log_new_die(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: log_new_die" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable log_new_die: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 521;
            size_t log_new_asy_dx_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_new_asy_dx_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(log_new_asy_dx(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: log_new_asy_dx" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable log_new_asy_dx: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 523;
            size_t log_new_sym_dx_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_new_sym_dx_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(log_new_sym_dx(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: log_new_sym_dx" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable log_new_sym_dx: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 525;
            size_t log_new_sev_dx_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_new_sev_dx_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(log_new_sev_dx(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: log_new_sev_dx" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable log_new_sev_dx: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 529;
            size_t log_dx_sym_sev_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_dx_sym_sev_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(log_dx_sym_sev(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: log_dx_sym_sev" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable log_dx_sym_sev: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 531;
            size_t log_dx_sym_die_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_dx_sym_die_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(log_dx_sym_die(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: log_dx_sym_die" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable log_dx_sym_die: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 533;
            size_t log_dx_sev_die_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_dx_sev_die_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(log_dx_sev_die(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: log_dx_sev_die" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable log_dx_sev_die: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 537;
            size_t log_diag_all_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_diag_all_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(log_diag_all(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: log_diag_all" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable log_diag_all: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 539;
            size_t log_new_die_dx_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_new_die_dx_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(log_new_die_dx(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: log_new_die_dx" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable log_new_die_dx: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 544;
            size_t log_occur_cas_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_occur_cas_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(log_occur_cas(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: log_occur_cas" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable log_occur_cas: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 546;
            size_t log_occur_die_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_occur_die_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(log_occur_die(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: log_occur_die" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable log_occur_die: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 551;
            size_t log_occur_cas_mvs_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_occur_cas_mvs_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(log_occur_cas_mvs(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: log_occur_cas_mvs" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable log_occur_cas_mvs: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 552;
            size_t log_occur_die_mvs_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_occur_die_mvs_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(log_occur_die_mvs(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: log_occur_die_mvs" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable log_occur_die_mvs: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 555;
            size_t log_ifr_omi_rv_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_ifr_omi_rv_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(log_ifr_omi_rv(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: log_ifr_omi_rv" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable log_ifr_omi_rv: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_less_or_equal(function__, "log_ifr_omi_rv", log_ifr_omi_rv, 0);
            current_statement_begin__ = 556;
            size_t log_ifr_omi_rv_sev_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_ifr_omi_rv_sev_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(log_ifr_omi_rv_sev(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: log_ifr_omi_rv_sev" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable log_ifr_omi_rv_sev: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_less_or_equal(function__, "log_ifr_omi_rv_sev", log_ifr_omi_rv_sev, 0);
            current_statement_begin__ = 557;
            size_t log_ifr_omi_rv_die_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_ifr_omi_rv_die_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(log_ifr_omi_rv_die(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: log_ifr_omi_rv_die" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable log_ifr_omi_rv_die: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_less_or_equal(function__, "log_ifr_omi_rv_die", log_ifr_omi_rv_die, 0);
            current_statement_begin__ = 561;
            if (stan::math::is_uninitialized(phi_cas)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: phi_cas";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable phi_cas: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "phi_cas", phi_cas, 0);
            current_statement_begin__ = 562;
            if (stan::math::is_uninitialized(phi_die)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: phi_die";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable phi_die: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "phi_die", phi_die, 0);
            // model body
            current_statement_begin__ = 1021;
            lp_accum__.add(normal_log<propto__>(log_new_inf_0, pri_log_new_inf_0_mu, pri_log_new_inf_0_sd));
            current_statement_begin__ = 1023;
            lp_accum__.add(gamma_log<propto__>(spl_par_rt_raw, 4.4, 2.9));
            current_statement_begin__ = 1025;
            lp_accum__.add(std_normal_log<propto__>(subtract(stan::model::rvalue(spl_par_rt_raw, stan::model::cons_list(stan::model::index_min(2), stan::model::nil_index_list()), "spl_par_rt_raw"), stan::model::rvalue(spl_par_rt_raw, stan::model::cons_list(stan::model::index_max((N_spl_par_rt - 1)), stan::model::nil_index_list()), "spl_par_rt_raw"))));
            current_statement_begin__ = 1027;
            lp_accum__.add(gamma_log<propto__>(serial_i, pri_serial_i_shap, pri_serial_i_rate));
            current_statement_begin__ = 1035;
            lp_accum__.add(beta_log_lupdf(log_p_sym_if_inf, pri_p_sym_if_inf_a, pri_p_sym_if_inf_b, pstream__));
            current_statement_begin__ = 1040;
            lp_accum__.add(beta_log_lupdf(log_p_sym_if_inf_omi, 5, 50, pstream__));
            current_statement_begin__ = 1041;
            lp_accum__.add(beta_log_lupdf(log_p_sev_if_sym, pri_p_sev_if_sym_a, pri_p_sev_if_sym_b, pstream__));
            current_statement_begin__ = 1042;
            lp_accum__.add(beta_log_lupdf(log_p_die_if_sev, pri_p_die_if_sev_a, pri_p_die_if_sev_b, pstream__));
            current_statement_begin__ = 1045;
            lp_accum__.add(beta_log_lupdf(log_p_die_if_inf, pri_p_die_if_inf_a, pri_p_die_if_inf_b, pstream__));
            current_statement_begin__ = 1050;
            lp_accum__.add(beta_log_lupdf(log_rr_diag_asy_vs_sym, pri_rr_diag_asy_vs_sym_a, pri_rr_diag_asy_vs_sym_b, pstream__));
            current_statement_begin__ = 1051;
            lp_accum__.add(beta_log<propto__>(spl_par_sym_dx, pri_rr_diag_sym_vs_sev_a, pri_rr_diag_sym_vs_sev_b));
            current_statement_begin__ = 1052;
            lp_accum__.add(beta_log_lupdf(log_p_diag_if_sev, pri_p_diag_if_sev_a, pri_p_diag_if_sev_b, pstream__));
            current_statement_begin__ = 1055;
            lp_accum__.add(beta_log_lupdf(log_scale_dx_delay_sym, scale_dx_delay_sym_a, scale_dx_delay_sym_b, pstream__));
            current_statement_begin__ = 1056;
            lp_accum__.add(beta_log_lupdf(log_scale_dx_delay_sev, scale_dx_delay_sev_a, scale_dx_delay_sev_b, pstream__));
            current_statement_begin__ = 1058;
            lp_accum__.add(gamma_log<propto__>(ifr_decl_OR, pri_ifr_decl_OR_a, pri_ifr_decl_OR_b));
            current_statement_begin__ = 1059;
            lp_accum__.add(gamma_log<propto__>(rr_decl_sev, pri_rr_decl_sev_a, pri_rr_decl_sev_b));
            current_statement_begin__ = 1060;
            lp_accum__.add(gamma_log<propto__>(rr_decl_die, pri_rr_decl_die_a, pri_rr_decl_die_b));
            current_statement_begin__ = 1063;
            lp_accum__.add(normal_log<propto__>(inv_sqrt_phi_c, 0, 1));
            current_statement_begin__ = 1064;
            lp_accum__.add(normal_log<propto__>(inv_sqrt_phi_d, 0, 1));
            current_statement_begin__ = 1067;
            lp_accum__.add(beta_log_lupdf(log_p_reinf, 4, 32, pstream__));
            current_statement_begin__ = 1070;
            lp_accum__.add(normal_log<propto__>(omicron_delay, 0, sd_omicron_delay));
            current_statement_begin__ = 1073;
            lp_accum__.add(dirichlet_log<propto__>(prob_vac, rep_vector(5, 3)));
            current_statement_begin__ = 1078;
            if (as_bool(logical_eq(pre_period_zero, 1))) {
                current_statement_begin__ = 1079;
                if (as_bool(logical_gt(N_days_before, 0))) {
                    current_statement_begin__ = 1086;
                    if (as_bool(logical_lt(N_days_av, N_days_before))) {
                        current_statement_begin__ = 1087;
                        lp_accum__.add(neg_binomial_2_log_log(0, log_sum_exp(stan::model::rvalue(log_occur_cas_mvs, stan::model::cons_list(stan::model::index_min_max(N_days_av, N_days_before), stan::model::nil_index_list()), "log_occur_cas_mvs")), phi_cas));
                        current_statement_begin__ = 1092;
                        lp_accum__.add(neg_binomial_2_log_log(0, log_sum_exp(stan::model::rvalue(log_occur_die_mvs, stan::model::cons_list(stan::model::index_min_max(N_days_av, N_days_before), stan::model::nil_index_list()), "log_occur_die_mvs")), phi_die));
                    }
                }
            }
            current_statement_begin__ = 1114;
            lp_accum__.add(neg_binomial_2_log_log(stan::model::rvalue(obs_cas_mvs, stan::model::cons_list(stan::model::index_min_max(N_days_av, lastCaseDate), stan::model::nil_index_list()), "obs_cas_mvs"), stan::model::rvalue(log_occur_cas_mvs, stan::model::cons_list(stan::model::index_min_max((N_days_before + N_days_av), (N_days_before + lastCaseDate)), stan::model::nil_index_list()), "log_occur_cas_mvs"), phi_cas));
            current_statement_begin__ = 1134;
            lp_accum__.add(neg_binomial_2_log_log(stan::model::rvalue(obs_die, stan::model::cons_list(stan::model::index_min_max(N_days_av, lastDeathDate), stan::model::nil_index_list()), "obs_die"), stan::model::rvalue(log_occur_die, stan::model::cons_list(stan::model::index_min_max((N_days_before + N_days_av), (N_days_before + lastDeathDate)), stan::model::nil_index_list()), "log_occur_die"), phi_die));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("log_new_inf_0");
        names__.push_back("serial_i");
        names__.push_back("spl_par_rt_raw");
        names__.push_back("log_p_sym_if_inf");
        names__.push_back("log_p_sym_if_inf_omi");
        names__.push_back("log_p_sev_if_sym");
        names__.push_back("log_p_die_if_sev");
        names__.push_back("ifr_decl_OR");
        names__.push_back("rr_decl_sev");
        names__.push_back("rr_decl_die");
        names__.push_back("omicron_delay");
        names__.push_back("log_scale_dx_delay_sym");
        names__.push_back("log_scale_dx_delay_sev");
        names__.push_back("log_rr_diag_asy_vs_sym");
        names__.push_back("log_p_diag_if_sev");
        names__.push_back("spl_par_sym_dx");
        names__.push_back("inv_sqrt_phi_c");
        names__.push_back("inv_sqrt_phi_d");
        names__.push_back("log_p_reinf");
        names__.push_back("prob_vac");
        names__.push_back("log_new_inf");
        names__.push_back("log_frac_sus");
        names__.push_back("log_frac_new_inf");
        names__.push_back("log_pop_sus");
        names__.push_back("log_serial_i_comb");
        names__.push_back("Rt0");
        names__.push_back("logRt");
        names__.push_back("log_p_die_if_sevt");
        names__.push_back("log_p_sev_if_symt");
        names__.push_back("log_p_sym_if_inft");
        names__.push_back("log_p_sym_if_inft_omi");
        names__.push_back("log_rr_sym_if_inf");
        names__.push_back("log_rr_sev_if_sym");
        names__.push_back("rr_die_if_sev");
        names__.push_back("rr_diag_sym_vs_sev");
        names__.push_back("log_p_diag_if_asy");
        names__.push_back("log_p_diag_if_sym");
        names__.push_back("sym_diag_delay_rv");
        names__.push_back("sev_diag_delay_rv");
        names__.push_back("log_p_die_if_inf");
        names__.push_back("log_new_sym");
        names__.push_back("log_new_sev");
        names__.push_back("log_new_die");
        names__.push_back("log_new_asy_dx");
        names__.push_back("log_new_sym_dx");
        names__.push_back("log_new_sev_dx");
        names__.push_back("log_dx_sym_sev");
        names__.push_back("log_dx_sym_die");
        names__.push_back("log_dx_sev_die");
        names__.push_back("log_diag_all");
        names__.push_back("log_new_die_dx");
        names__.push_back("log_occur_cas");
        names__.push_back("log_occur_die");
        names__.push_back("log_occur_cas_mvs");
        names__.push_back("log_occur_die_mvs");
        names__.push_back("log_ifr_omi_rv");
        names__.push_back("log_ifr_omi_rv_sev");
        names__.push_back("log_ifr_omi_rv_die");
        names__.push_back("phi_cas");
        names__.push_back("phi_die");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_spl_par_rt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_spl_par_dx);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_ifr_adj);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Max_delay);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Max_delay);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_days_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_stan_program_default_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double log_new_inf_0 = in__.scalar_lub_constrain(-(5), stan::math::log(1000));
        vars__.push_back(log_new_inf_0);
        double serial_i = in__.scalar_lub_constrain(3, 11);
        vars__.push_back(serial_i);
        Eigen::Matrix<double, Eigen::Dynamic, 1> spl_par_rt_raw = in__.vector_lub_constrain(0.001, 5, N_spl_par_rt);
        size_t spl_par_rt_raw_j_1_max__ = N_spl_par_rt;
        for (size_t j_1__ = 0; j_1__ < spl_par_rt_raw_j_1_max__; ++j_1__) {
            vars__.push_back(spl_par_rt_raw(j_1__));
        }
        double log_p_sym_if_inf = in__.scalar_ub_constrain(0);
        vars__.push_back(log_p_sym_if_inf);
        double log_p_sym_if_inf_omi = in__.scalar_ub_constrain(0);
        vars__.push_back(log_p_sym_if_inf_omi);
        double log_p_sev_if_sym = in__.scalar_ub_constrain(0);
        vars__.push_back(log_p_sev_if_sym);
        double log_p_die_if_sev = in__.scalar_ub_constrain(0);
        vars__.push_back(log_p_die_if_sev);
        double ifr_decl_OR = in__.scalar_lub_constrain(0.001, 4);
        vars__.push_back(ifr_decl_OR);
        double rr_decl_sev = in__.scalar_lub_constrain(0.01, 0.3);
        vars__.push_back(rr_decl_sev);
        double rr_decl_die = in__.scalar_lub_constrain(0.0001, 0.25);
        vars__.push_back(rr_decl_die);
        double omicron_delay = in__.scalar_lub_constrain(-(60), 60);
        vars__.push_back(omicron_delay);
        double log_scale_dx_delay_sym = in__.scalar_ub_constrain(0);
        vars__.push_back(log_scale_dx_delay_sym);
        double log_scale_dx_delay_sev = in__.scalar_ub_constrain(0);
        vars__.push_back(log_scale_dx_delay_sev);
        double log_rr_diag_asy_vs_sym = in__.scalar_ub_constrain(0);
        vars__.push_back(log_rr_diag_asy_vs_sym);
        double log_p_diag_if_sev = in__.scalar_ub_constrain(0);
        vars__.push_back(log_p_diag_if_sev);
        Eigen::Matrix<double, Eigen::Dynamic, 1> spl_par_sym_dx = in__.vector_lub_constrain(0.001, 0.999, N_spl_par_dx);
        size_t spl_par_sym_dx_j_1_max__ = N_spl_par_dx;
        for (size_t j_1__ = 0; j_1__ < spl_par_sym_dx_j_1_max__; ++j_1__) {
            vars__.push_back(spl_par_sym_dx(j_1__));
        }
        double inv_sqrt_phi_c = in__.scalar_lub_constrain(0.001, 15);
        vars__.push_back(inv_sqrt_phi_c);
        double inv_sqrt_phi_d = in__.scalar_lub_constrain(0.001, 15);
        vars__.push_back(inv_sqrt_phi_d);
        double log_p_reinf = in__.scalar_ub_constrain(0);
        vars__.push_back(log_p_reinf);
        Eigen::Matrix<double, Eigen::Dynamic, 1> prob_vac = in__.simplex_constrain(3);
        size_t prob_vac_j_1_max__ = 3;
        for (size_t j_1__ = 0; j_1__ < prob_vac_j_1_max__; ++j_1__) {
            vars__.push_back(prob_vac(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 459;
            validate_non_negative_index("log_new_inf", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_new_inf(N_days_tot);
            stan::math::initialize(log_new_inf, DUMMY_VAR__);
            stan::math::fill(log_new_inf, DUMMY_VAR__);
            current_statement_begin__ = 462;
            double log_frac_sus;
            (void) log_frac_sus;  // dummy to suppress unused var warning
            stan::math::initialize(log_frac_sus, DUMMY_VAR__);
            stan::math::fill(log_frac_sus, DUMMY_VAR__);
            current_statement_begin__ = 468;
            double log_frac_new_inf;
            (void) log_frac_new_inf;  // dummy to suppress unused var warning
            stan::math::initialize(log_frac_new_inf, DUMMY_VAR__);
            stan::math::fill(log_frac_new_inf, DUMMY_VAR__);
            current_statement_begin__ = 472;
            double log_pop_sus;
            (void) log_pop_sus;  // dummy to suppress unused var warning
            stan::math::initialize(log_pop_sus, DUMMY_VAR__);
            stan::math::fill(log_pop_sus, DUMMY_VAR__);
            current_statement_begin__ = 474;
            validate_non_negative_index("log_serial_i_comb", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_serial_i_comb(N_days_tot);
            stan::math::initialize(log_serial_i_comb, DUMMY_VAR__);
            stan::math::fill(log_serial_i_comb, DUMMY_VAR__);
            current_statement_begin__ = 478;
            validate_non_negative_index("Rt0", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> Rt0(N_days_tot);
            stan::math::initialize(Rt0, DUMMY_VAR__);
            stan::math::fill(Rt0, DUMMY_VAR__);
            current_statement_begin__ = 480;
            validate_non_negative_index("logRt", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> logRt(N_days_tot);
            stan::math::initialize(logRt, DUMMY_VAR__);
            stan::math::fill(logRt, DUMMY_VAR__);
            current_statement_begin__ = 486;
            validate_non_negative_index("log_p_die_if_sevt", "N_ifr_adj", N_ifr_adj);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_p_die_if_sevt(N_ifr_adj);
            stan::math::initialize(log_p_die_if_sevt, DUMMY_VAR__);
            stan::math::fill(log_p_die_if_sevt, DUMMY_VAR__);
            current_statement_begin__ = 487;
            validate_non_negative_index("log_p_sev_if_symt", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_p_sev_if_symt(N_days_tot);
            stan::math::initialize(log_p_sev_if_symt, DUMMY_VAR__);
            stan::math::fill(log_p_sev_if_symt, DUMMY_VAR__);
            current_statement_begin__ = 488;
            validate_non_negative_index("log_p_sym_if_inft", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_p_sym_if_inft(N_days_tot);
            stan::math::initialize(log_p_sym_if_inft, DUMMY_VAR__);
            stan::math::fill(log_p_sym_if_inft, DUMMY_VAR__);
            current_statement_begin__ = 489;
            validate_non_negative_index("log_p_sym_if_inft_omi", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_p_sym_if_inft_omi(N_days_tot);
            stan::math::initialize(log_p_sym_if_inft_omi, DUMMY_VAR__);
            stan::math::fill(log_p_sym_if_inft_omi, DUMMY_VAR__);
            current_statement_begin__ = 492;
            double log_rr_sym_if_inf;
            (void) log_rr_sym_if_inf;  // dummy to suppress unused var warning
            stan::math::initialize(log_rr_sym_if_inf, DUMMY_VAR__);
            stan::math::fill(log_rr_sym_if_inf, DUMMY_VAR__);
            current_statement_begin__ = 493;
            double log_rr_sev_if_sym;
            (void) log_rr_sev_if_sym;  // dummy to suppress unused var warning
            stan::math::initialize(log_rr_sev_if_sym, DUMMY_VAR__);
            stan::math::fill(log_rr_sev_if_sym, DUMMY_VAR__);
            current_statement_begin__ = 494;
            double rr_die_if_sev;
            (void) rr_die_if_sev;  // dummy to suppress unused var warning
            stan::math::initialize(rr_die_if_sev, DUMMY_VAR__);
            stan::math::fill(rr_die_if_sev, DUMMY_VAR__);
            current_statement_begin__ = 498;
            validate_non_negative_index("rr_diag_sym_vs_sev", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> rr_diag_sym_vs_sev(N_days_tot);
            stan::math::initialize(rr_diag_sym_vs_sev, DUMMY_VAR__);
            stan::math::fill(rr_diag_sym_vs_sev, DUMMY_VAR__);
            current_statement_begin__ = 499;
            validate_non_negative_index("log_p_diag_if_asy", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_p_diag_if_asy(N_days_tot);
            stan::math::initialize(log_p_diag_if_asy, DUMMY_VAR__);
            stan::math::fill(log_p_diag_if_asy, DUMMY_VAR__);
            current_statement_begin__ = 500;
            validate_non_negative_index("log_p_diag_if_sym", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_p_diag_if_sym(N_days_tot);
            stan::math::initialize(log_p_diag_if_sym, DUMMY_VAR__);
            stan::math::fill(log_p_diag_if_sym, DUMMY_VAR__);
            current_statement_begin__ = 504;
            validate_non_negative_index("sym_diag_delay_rv", "Max_delay", Max_delay);
            Eigen::Matrix<double, Eigen::Dynamic, 1> sym_diag_delay_rv(Max_delay);
            stan::math::initialize(sym_diag_delay_rv, DUMMY_VAR__);
            stan::math::fill(sym_diag_delay_rv, DUMMY_VAR__);
            current_statement_begin__ = 505;
            validate_non_negative_index("sev_diag_delay_rv", "Max_delay", Max_delay);
            Eigen::Matrix<double, Eigen::Dynamic, 1> sev_diag_delay_rv(Max_delay);
            stan::math::initialize(sev_diag_delay_rv, DUMMY_VAR__);
            stan::math::fill(sev_diag_delay_rv, DUMMY_VAR__);
            current_statement_begin__ = 509;
            double log_p_die_if_inf;
            (void) log_p_die_if_inf;  // dummy to suppress unused var warning
            stan::math::initialize(log_p_die_if_inf, DUMMY_VAR__);
            stan::math::fill(log_p_die_if_inf, DUMMY_VAR__);
            current_statement_begin__ = 513;
            validate_non_negative_index("log_new_sym", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_new_sym(N_days_tot);
            stan::math::initialize(log_new_sym, DUMMY_VAR__);
            stan::math::fill(log_new_sym, DUMMY_VAR__);
            current_statement_begin__ = 515;
            validate_non_negative_index("log_new_sev", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_new_sev(N_days_tot);
            stan::math::initialize(log_new_sev, DUMMY_VAR__);
            stan::math::fill(log_new_sev, DUMMY_VAR__);
            current_statement_begin__ = 517;
            validate_non_negative_index("log_new_die", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_new_die(N_days_tot);
            stan::math::initialize(log_new_die, DUMMY_VAR__);
            stan::math::fill(log_new_die, DUMMY_VAR__);
            current_statement_begin__ = 521;
            validate_non_negative_index("log_new_asy_dx", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_new_asy_dx(N_days_tot);
            stan::math::initialize(log_new_asy_dx, DUMMY_VAR__);
            stan::math::fill(log_new_asy_dx, DUMMY_VAR__);
            current_statement_begin__ = 523;
            validate_non_negative_index("log_new_sym_dx", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_new_sym_dx(N_days_tot);
            stan::math::initialize(log_new_sym_dx, DUMMY_VAR__);
            stan::math::fill(log_new_sym_dx, DUMMY_VAR__);
            current_statement_begin__ = 525;
            validate_non_negative_index("log_new_sev_dx", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_new_sev_dx(N_days_tot);
            stan::math::initialize(log_new_sev_dx, DUMMY_VAR__);
            stan::math::fill(log_new_sev_dx, DUMMY_VAR__);
            current_statement_begin__ = 529;
            validate_non_negative_index("log_dx_sym_sev", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_dx_sym_sev(N_days_tot);
            stan::math::initialize(log_dx_sym_sev, DUMMY_VAR__);
            stan::math::fill(log_dx_sym_sev, DUMMY_VAR__);
            current_statement_begin__ = 531;
            validate_non_negative_index("log_dx_sym_die", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_dx_sym_die(N_days_tot);
            stan::math::initialize(log_dx_sym_die, DUMMY_VAR__);
            stan::math::fill(log_dx_sym_die, DUMMY_VAR__);
            current_statement_begin__ = 533;
            validate_non_negative_index("log_dx_sev_die", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_dx_sev_die(N_days_tot);
            stan::math::initialize(log_dx_sev_die, DUMMY_VAR__);
            stan::math::fill(log_dx_sev_die, DUMMY_VAR__);
            current_statement_begin__ = 537;
            validate_non_negative_index("log_diag_all", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_diag_all(N_days_tot);
            stan::math::initialize(log_diag_all, DUMMY_VAR__);
            stan::math::fill(log_diag_all, DUMMY_VAR__);
            current_statement_begin__ = 539;
            validate_non_negative_index("log_new_die_dx", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_new_die_dx(N_days_tot);
            stan::math::initialize(log_new_die_dx, DUMMY_VAR__);
            stan::math::fill(log_new_die_dx, DUMMY_VAR__);
            current_statement_begin__ = 544;
            validate_non_negative_index("log_occur_cas", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_occur_cas(N_days_tot);
            stan::math::initialize(log_occur_cas, DUMMY_VAR__);
            stan::math::fill(log_occur_cas, DUMMY_VAR__);
            current_statement_begin__ = 546;
            validate_non_negative_index("log_occur_die", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_occur_die(N_days_tot);
            stan::math::initialize(log_occur_die, DUMMY_VAR__);
            stan::math::fill(log_occur_die, DUMMY_VAR__);
            current_statement_begin__ = 551;
            validate_non_negative_index("log_occur_cas_mvs", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_occur_cas_mvs(N_days_tot);
            stan::math::initialize(log_occur_cas_mvs, DUMMY_VAR__);
            stan::math::fill(log_occur_cas_mvs, DUMMY_VAR__);
            current_statement_begin__ = 552;
            validate_non_negative_index("log_occur_die_mvs", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_occur_die_mvs(N_days_tot);
            stan::math::initialize(log_occur_die_mvs, DUMMY_VAR__);
            stan::math::fill(log_occur_die_mvs, DUMMY_VAR__);
            current_statement_begin__ = 555;
            validate_non_negative_index("log_ifr_omi_rv", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_ifr_omi_rv(N_days_tot);
            stan::math::initialize(log_ifr_omi_rv, DUMMY_VAR__);
            stan::math::fill(log_ifr_omi_rv, DUMMY_VAR__);
            current_statement_begin__ = 556;
            validate_non_negative_index("log_ifr_omi_rv_sev", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_ifr_omi_rv_sev(N_days_tot);
            stan::math::initialize(log_ifr_omi_rv_sev, DUMMY_VAR__);
            stan::math::fill(log_ifr_omi_rv_sev, DUMMY_VAR__);
            current_statement_begin__ = 557;
            validate_non_negative_index("log_ifr_omi_rv_die", "N_days_tot", N_days_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_ifr_omi_rv_die(N_days_tot);
            stan::math::initialize(log_ifr_omi_rv_die, DUMMY_VAR__);
            stan::math::fill(log_ifr_omi_rv_die, DUMMY_VAR__);
            current_statement_begin__ = 561;
            double phi_cas;
            (void) phi_cas;  // dummy to suppress unused var warning
            stan::math::initialize(phi_cas, DUMMY_VAR__);
            stan::math::fill(phi_cas, DUMMY_VAR__);
            current_statement_begin__ = 562;
            double phi_die;
            (void) phi_die;  // dummy to suppress unused var warning
            stan::math::initialize(phi_die, DUMMY_VAR__);
            stan::math::fill(phi_die, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 638;
            for (int i = 1; i <= N_days_tot; ++i) {
                current_statement_begin__ = 639;
                stan::model::assign(log_ifr_omi_rv, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            normal_cdf(i, (Omicron_takeover_mean + omicron_delay), Omicron_takeover_sd), 
                            "assigning variable log_ifr_omi_rv");
                current_statement_begin__ = 640;
                stan::model::assign(log_ifr_omi_rv_die, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            normal_cdf(i, ((((Omicron_takeover_mean + omicron_delay) + 6) + 7) + 9), Omicron_takeover_sd), 
                            "assigning variable log_ifr_omi_rv_die");
                current_statement_begin__ = 641;
                stan::model::assign(log_ifr_omi_rv_sev, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            normal_cdf(i, (((Omicron_takeover_mean + omicron_delay) + 6) + 7), Omicron_takeover_sd), 
                            "assigning variable log_ifr_omi_rv_sev");
            }
            current_statement_begin__ = 644;
            stan::math::assign(log_ifr_omi_rv, multiply(log_ifr_omi_rv, 0.95));
            current_statement_begin__ = 645;
            stan::math::assign(log_ifr_omi_rv_die, multiply(log_ifr_omi_rv_die, 0.95));
            current_statement_begin__ = 646;
            stan::math::assign(log_ifr_omi_rv_sev, multiply(log_ifr_omi_rv_sev, 0.95));
            current_statement_begin__ = 647;
            stan::math::assign(log_ifr_omi_rv, add(log_ifr_omi_rv, 0.001));
            current_statement_begin__ = 648;
            stan::math::assign(log_ifr_omi_rv_die, add(log_ifr_omi_rv_die, 0.001));
            current_statement_begin__ = 649;
            stan::math::assign(log_ifr_omi_rv_sev, add(log_ifr_omi_rv_sev, 0.001));
            current_statement_begin__ = 650;
            stan::math::assign(log_ifr_omi_rv, stan::math::log(log_ifr_omi_rv));
            current_statement_begin__ = 651;
            stan::math::assign(log_ifr_omi_rv_die, stan::math::log(log_ifr_omi_rv_die));
            current_statement_begin__ = 652;
            stan::math::assign(log_ifr_omi_rv_sev, stan::math::log(log_ifr_omi_rv_sev));
            current_statement_begin__ = 655;
            for (int i = 1; i <= N_days_tot; ++i) {
                current_statement_begin__ = 656;
                stan::model::assign(log_serial_i_comb, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            log_sum_exp((stan::math::log(serial_i) + log1m_exp(get_base1(log_ifr_omi_rv, i, "log_ifr_omi_rv", 1))), (stan::math::log(2.5) + get_base1(log_ifr_omi_rv, i, "log_ifr_omi_rv", 1))), 
                            "assigning variable log_serial_i_comb");
            }
            current_statement_begin__ = 664;
            stan::math::assign(log_rr_sym_if_inf, (log_p_sym_if_inf_omi - log_p_sym_if_inf));
            current_statement_begin__ = 665;
            stan::math::assign(log_rr_sev_if_sym, (stan::math::log(rr_decl_sev) - log_rr_sym_if_inf));
            current_statement_begin__ = 666;
            stan::math::assign(rr_die_if_sev, (rr_decl_die / rr_decl_sev));
            current_statement_begin__ = 670;
            stan::math::assign(log_p_die_if_sevt, add((log_p_die_if_sev + stan::math::log(ifr_adj_fixed)), stan::math::log1p(multiply(ifr_adj, ifr_decl_OR))));
            current_statement_begin__ = 672;
            for (int i = 1; i <= N_days_tot; ++i) {
                current_statement_begin__ = 674;
                stan::model::assign(log_p_die_if_sevt, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((get_base1(log_p_die_if_sevt, i, "log_p_die_if_sevt", 1) + (get_base1(prob_vac, 1, "prob_vac", 1) * stan::math::log(get_base1(ifr_vac_adj, i, "ifr_vac_adj", 1)))) + stan::math::log((1 - (stan::math::exp(get_base1(log_ifr_omi_rv_die, i, "log_ifr_omi_rv_die", 1)) * (1 - rr_die_if_sev))))), 
                            "assigning variable log_p_die_if_sevt");
                current_statement_begin__ = 679;
                stan::model::assign(log_p_sev_if_symt, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((log_p_sev_if_sym + (get_base1(prob_vac, 2, "prob_vac", 1) * stan::math::log(get_base1(ifr_vac_adj, i, "ifr_vac_adj", 1)))) + stan::math::log((1 - (stan::math::exp(get_base1(log_ifr_omi_rv_sev, i, "log_ifr_omi_rv_sev", 1)) * (1 - stan::math::exp(log_rr_sev_if_sym)))))), 
                            "assigning variable log_p_sev_if_symt");
                current_statement_begin__ = 683;
                stan::model::assign(log_p_sym_if_inft, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (log_p_sym_if_inf + (get_base1(prob_vac, 3, "prob_vac", 1) * stan::math::log(get_base1(ifr_vac_adj, i, "ifr_vac_adj", 1)))), 
                            "assigning variable log_p_sym_if_inft");
                current_statement_begin__ = 684;
                stan::model::assign(log_p_sym_if_inft_omi, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (log_p_sym_if_inf_omi + (get_base1(prob_vac, 3, "prob_vac", 1) * stan::math::log(get_base1(ifr_vac_adj, i, "ifr_vac_adj", 1)))), 
                            "assigning variable log_p_sym_if_inft_omi");
            }
            current_statement_begin__ = 689;
            stan::math::assign(rr_diag_sym_vs_sev, inv_logit(multiply(spl_basis_dx, logit(spl_par_sym_dx))));
            current_statement_begin__ = 692;
            stan::math::assign(log_p_diag_if_sym, add(log_p_diag_if_sev, stan::math::log(rr_diag_sym_vs_sev)));
            current_statement_begin__ = 693;
            stan::math::assign(log_p_diag_if_asy, add(log_p_diag_if_sym, log_rr_diag_asy_vs_sym));
            {
            current_statement_begin__ = 704;
            validate_non_negative_index("sym_delay_gammas", "(Max_delay + 1)", (Max_delay + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sym_delay_gammas((Max_delay + 1));
            stan::math::initialize(sym_delay_gammas, DUMMY_VAR__);
            stan::math::fill(sym_delay_gammas, DUMMY_VAR__);
            current_statement_begin__ = 705;
            validate_non_negative_index("sev_delay_gammas", "(Max_delay + 1)", (Max_delay + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sev_delay_gammas((Max_delay + 1));
            stan::math::initialize(sev_delay_gammas, DUMMY_VAR__);
            stan::math::fill(sev_delay_gammas, DUMMY_VAR__);
            current_statement_begin__ = 706;
            for (int i = 1; i <= (Max_delay + 1); ++i) {
                current_statement_begin__ = 707;
                stan::model::assign(sym_delay_gammas, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            gamma_cdf((i - 1), sym_prg_delay_shap, (sym_prg_delay_rate / stan::math::exp(log_scale_dx_delay_sym))), 
                            "assigning variable sym_delay_gammas");
                current_statement_begin__ = 708;
                stan::model::assign(sev_delay_gammas, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            gamma_cdf((i - 1), sev_prg_delay_shap, (sev_prg_delay_rate / stan::math::exp(log_scale_dx_delay_sev))), 
                            "assigning variable sev_delay_gammas");
            }
            current_statement_begin__ = 714;
            for (int i = 1; i <= Max_delay; ++i) {
                current_statement_begin__ = 715;
                stan::model::assign(sym_diag_delay_rv, 
                            stan::model::cons_list(stan::model::index_uni(((1 + Max_delay) - i)), stan::model::nil_index_list()), 
                            (get_base1(sym_delay_gammas, (i + 1), "sym_delay_gammas", 1) - get_base1(sym_delay_gammas, i, "sym_delay_gammas", 1)), 
                            "assigning variable sym_diag_delay_rv");
                current_statement_begin__ = 716;
                stan::model::assign(sev_diag_delay_rv, 
                            stan::model::cons_list(stan::model::index_uni(((1 + Max_delay) - i)), stan::model::nil_index_list()), 
                            (get_base1(sev_delay_gammas, (i + 1), "sev_delay_gammas", 1) - get_base1(sev_delay_gammas, i, "sev_delay_gammas", 1)), 
                            "assigning variable sev_diag_delay_rv");
            }
            }
            current_statement_begin__ = 724;
            stan::math::assign(log_p_die_if_inf, ((log_p_sym_if_inf + log_p_sev_if_sym) + log_p_die_if_sev));
            current_statement_begin__ = 731;
            stan::math::assign(Rt0, multiply(spl_basis_rt, spl_par_rt_raw));
            current_statement_begin__ = 732;
            stan::math::assign(log_pop_sus, stan::math::log(pop_size));
            current_statement_begin__ = 738;
            stan::math::assign(log_frac_sus, stan::math::log(0.9999999999));
            current_statement_begin__ = 740;
            for (int i = 1; i <= N_days_tot; ++i) {
                current_statement_begin__ = 741;
                stan::model::assign(logRt, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((stan::math::log(get_base1(Rt0, i, "Rt0", 1)) + log_pop_sus) - stan::math::log(pop_size)), 
                            "assigning variable logRt");
                current_statement_begin__ = 743;
                if (as_bool(logical_gt(i, 1))) {
                    current_statement_begin__ = 747;
                    stan::math::assign(log_frac_new_inf, custom_softplus_scalar((get_base1(log_new_inf, (i - 1), "log_new_inf", 1) + ((1 / stan::math::exp(get_base1(log_serial_i_comb, i, "log_serial_i_comb", 1))) * get_base1(logRt, i, "logRt", 1))), log_pop_sus, pstream__));
                    current_statement_begin__ = 752;
                    stan::model::assign(log_new_inf, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (log_frac_new_inf + log_pop_sus), 
                                "assigning variable log_new_inf");
                } else if (as_bool(logical_eq(i, 1))) {
                    current_statement_begin__ = 759;
                    stan::math::assign(log_frac_new_inf, custom_softplus_scalar((log_new_inf_0 + ((1 / stan::math::exp(get_base1(log_serial_i_comb, i, "log_serial_i_comb", 1))) * get_base1(logRt, i, "logRt", 1))), log_pop_sus, pstream__));
                    current_statement_begin__ = 767;
                    stan::model::assign(log_new_inf, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (log_frac_new_inf + log_pop_sus), 
                                "assigning variable log_new_inf");
                }
                current_statement_begin__ = 771;
                stan::math::assign(log_frac_sus, log_sum_exp((log_frac_sus + log1m_exp(log_frac_new_inf)), ((log_p_reinf + get_base1(log_ifr_omi_rv, i, "log_ifr_omi_rv", 1)) + log1m_exp(log_frac_sus))));
                current_statement_begin__ = 790;
                stan::math::assign(log_pop_sus, (log_frac_sus + stan::math::log(pop_size)));
            }
            current_statement_begin__ = 804;
            stan::math::assign(log_new_sym, vlog_sum_exp(add(log_p_sym_if_inft, lconv1d(add(log_new_inf, log1m_exp(log_ifr_omi_rv)), inf_prg_delay_rv, pstream__)), add(log_p_sym_if_inft_omi, lconv1d(add(log_new_inf, log_ifr_omi_rv), inf_prg_delay_rv, pstream__)), pstream__));
            current_statement_begin__ = 813;
            stan::math::assign(log_new_sev, add(log_p_sev_if_symt, lconv1d(log_new_sym, sym_prg_delay_rv, pstream__)));
            current_statement_begin__ = 820;
            stan::math::assign(log_new_die, add(stan::model::rvalue(log_p_die_if_sevt, stan::model::cons_list(stan::model::index_min_max(1, N_days_tot), stan::model::nil_index_list()), "log_p_die_if_sevt"), lconv1d(log_new_sev, sev_prg_delay_rv, pstream__)));
            current_statement_begin__ = 839;
            stan::math::assign(log_new_asy_dx, add(log1m_exp(log_p_sym_if_inft), lconv1d(add(log_new_inf, log_p_diag_if_asy), asy_rec_delay_rv, pstream__)));
            current_statement_begin__ = 854;
            stan::math::assign(log_new_sym_dx, lconv1d(add(log_p_diag_if_sym, log_new_sym), sym_diag_delay_rv, pstream__));
            current_statement_begin__ = 868;
            stan::math::assign(log_dx_sym_sev, add(log_p_sev_if_symt, lconv1d(add(log_p_diag_if_sym, log_new_sym), sym_prg_delay_rv, pstream__)));
            current_statement_begin__ = 877;
            stan::math::assign(log_dx_sym_die, add(stan::model::rvalue(log_p_die_if_sevt, stan::model::cons_list(stan::model::index_min_max(1, N_days_tot), stan::model::nil_index_list()), "log_p_die_if_sevt"), lconv1d(log_dx_sym_sev, sev_prg_delay_rv, pstream__)));
            current_statement_begin__ = 889;
            stan::math::assign(log_new_sev_dx, add(log_p_diag_if_sev, lconv1d(vlog_diff_exp(log_new_sev, add(log_new_sev, vcustom_softplus_scalar(log_dx_sym_sev, log_new_sev, pstream__)), pstream__), sev_diag_delay_rv, pstream__)));
            current_statement_begin__ = 914;
            stan::math::assign(log_dx_sev_die, add(add(log_p_die_if_sev, stan::model::rvalue(log_p_die_if_sevt, stan::model::cons_list(stan::model::index_min_max(1, N_days_tot), stan::model::nil_index_list()), "log_p_die_if_sevt")), lconv1d(vlog_diff_exp(log_new_sev, add(log_new_sev, vcustom_softplus_scalar(log_dx_sym_sev, log_new_sev, pstream__)), pstream__), sev_prg_delay_rv, pstream__)));
            current_statement_begin__ = 936;
            stan::math::assign(log_diag_all, vlog_sum_exp(log_new_asy_dx, vlog_sum_exp(log_new_sym_dx, log_new_sev_dx, pstream__), pstream__));
            current_statement_begin__ = 948;
            stan::math::assign(log_new_die_dx, vlog_sum_exp(log_dx_sym_die, log_dx_sev_die, pstream__));
            current_statement_begin__ = 959;
            if (as_bool(logical_eq(obs_cas_rep, 1))) {
                current_statement_begin__ = 964;
                stan::math::assign(log_occur_cas, lconv1d(log_diag_all, cas_rep_delay_rv, pstream__));
            } else {
                current_statement_begin__ = 970;
                stan::math::assign(log_occur_cas, add(stan::math::log(cas_cum_report_delay_rv), log_diag_all));
            }
            current_statement_begin__ = 974;
            if (as_bool(logical_eq(obs_die_rep, 1))) {
                current_statement_begin__ = 979;
                stan::math::assign(log_occur_die, lconv1d(log_new_die_dx, die_rep_delay_rv, pstream__));
            } else {
                current_statement_begin__ = 985;
                stan::math::assign(log_occur_die, add(stan::math::log(die_cum_report_delay_rv), log_new_die_dx));
            }
            current_statement_begin__ = 989;
            for (int i = 1; i <= N_days_tot; ++i) {
                current_statement_begin__ = 990;
                if (as_bool(logical_lt(i, N_days_av))) {
                    current_statement_begin__ = 1000;
                    stan::model::assign(log_occur_cas_mvs, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                stan::math::negative_infinity(), 
                                "assigning variable log_occur_cas_mvs");
                    current_statement_begin__ = 1001;
                    stan::model::assign(log_occur_die_mvs, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                stan::math::negative_infinity(), 
                                "assigning variable log_occur_die_mvs");
                } else {
                    current_statement_begin__ = 1008;
                    stan::model::assign(log_occur_cas_mvs, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                log_sum_exp(stan::model::rvalue(log_occur_cas, stan::model::cons_list(stan::model::index_min_max((i - nda0), i), stan::model::nil_index_list()), "log_occur_cas")), 
                                "assigning variable log_occur_cas_mvs");
                    current_statement_begin__ = 1009;
                    stan::model::assign(log_occur_die_mvs, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                log_sum_exp(stan::model::rvalue(log_occur_die, stan::model::cons_list(stan::model::index_min_max((i - nda0), i), stan::model::nil_index_list()), "log_occur_die")), 
                                "assigning variable log_occur_die_mvs");
                }
            }
            current_statement_begin__ = 1014;
            stan::math::assign(phi_cas, pow(inv_sqrt_phi_c, -(2)));
            current_statement_begin__ = 1015;
            stan::math::assign(phi_die, pow(inv_sqrt_phi_d, -(2)));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 462;
            check_less_or_equal(function__, "log_frac_sus", log_frac_sus, 0);
            current_statement_begin__ = 468;
            check_less_or_equal(function__, "log_frac_new_inf", log_frac_new_inf, 0);
            current_statement_begin__ = 478;
            check_greater_or_equal(function__, "Rt0", Rt0, 0);
            current_statement_begin__ = 486;
            check_less_or_equal(function__, "log_p_die_if_sevt", log_p_die_if_sevt, stan::math::log(4));
            current_statement_begin__ = 487;
            check_less_or_equal(function__, "log_p_sev_if_symt", log_p_sev_if_symt, stan::math::log(4));
            current_statement_begin__ = 488;
            check_less_or_equal(function__, "log_p_sym_if_inft", log_p_sym_if_inft, 0);
            current_statement_begin__ = 489;
            check_less_or_equal(function__, "log_p_sym_if_inft_omi", log_p_sym_if_inft_omi, 0);
            current_statement_begin__ = 494;
            check_greater_or_equal(function__, "rr_die_if_sev", rr_die_if_sev, 0);
            current_statement_begin__ = 499;
            check_less_or_equal(function__, "log_p_diag_if_asy", log_p_diag_if_asy, 0);
            current_statement_begin__ = 500;
            check_less_or_equal(function__, "log_p_diag_if_sym", log_p_diag_if_sym, 0);
            current_statement_begin__ = 504;
            check_greater_or_equal(function__, "sym_diag_delay_rv", sym_diag_delay_rv, 0);
            current_statement_begin__ = 505;
            check_greater_or_equal(function__, "sev_diag_delay_rv", sev_diag_delay_rv, 0);
            current_statement_begin__ = 509;
            check_less_or_equal(function__, "log_p_die_if_inf", log_p_die_if_inf, 0);
            current_statement_begin__ = 555;
            check_less_or_equal(function__, "log_ifr_omi_rv", log_ifr_omi_rv, 0);
            current_statement_begin__ = 556;
            check_less_or_equal(function__, "log_ifr_omi_rv_sev", log_ifr_omi_rv_sev, 0);
            current_statement_begin__ = 557;
            check_less_or_equal(function__, "log_ifr_omi_rv_die", log_ifr_omi_rv_die, 0);
            current_statement_begin__ = 561;
            check_greater_or_equal(function__, "phi_cas", phi_cas, 0);
            current_statement_begin__ = 562;
            check_greater_or_equal(function__, "phi_die", phi_die, 0);
            // write transformed parameters
            if (include_tparams__) {
                size_t log_new_inf_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < log_new_inf_j_1_max__; ++j_1__) {
                    vars__.push_back(log_new_inf(j_1__));
                }
                vars__.push_back(log_frac_sus);
                vars__.push_back(log_frac_new_inf);
                vars__.push_back(log_pop_sus);
                size_t log_serial_i_comb_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < log_serial_i_comb_j_1_max__; ++j_1__) {
                    vars__.push_back(log_serial_i_comb(j_1__));
                }
                size_t Rt0_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < Rt0_j_1_max__; ++j_1__) {
                    vars__.push_back(Rt0(j_1__));
                }
                size_t logRt_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < logRt_j_1_max__; ++j_1__) {
                    vars__.push_back(logRt(j_1__));
                }
                size_t log_p_die_if_sevt_j_1_max__ = N_ifr_adj;
                for (size_t j_1__ = 0; j_1__ < log_p_die_if_sevt_j_1_max__; ++j_1__) {
                    vars__.push_back(log_p_die_if_sevt(j_1__));
                }
                size_t log_p_sev_if_symt_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < log_p_sev_if_symt_j_1_max__; ++j_1__) {
                    vars__.push_back(log_p_sev_if_symt(j_1__));
                }
                size_t log_p_sym_if_inft_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < log_p_sym_if_inft_j_1_max__; ++j_1__) {
                    vars__.push_back(log_p_sym_if_inft(j_1__));
                }
                size_t log_p_sym_if_inft_omi_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < log_p_sym_if_inft_omi_j_1_max__; ++j_1__) {
                    vars__.push_back(log_p_sym_if_inft_omi(j_1__));
                }
                vars__.push_back(log_rr_sym_if_inf);
                vars__.push_back(log_rr_sev_if_sym);
                vars__.push_back(rr_die_if_sev);
                size_t rr_diag_sym_vs_sev_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < rr_diag_sym_vs_sev_j_1_max__; ++j_1__) {
                    vars__.push_back(rr_diag_sym_vs_sev(j_1__));
                }
                size_t log_p_diag_if_asy_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < log_p_diag_if_asy_j_1_max__; ++j_1__) {
                    vars__.push_back(log_p_diag_if_asy(j_1__));
                }
                size_t log_p_diag_if_sym_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < log_p_diag_if_sym_j_1_max__; ++j_1__) {
                    vars__.push_back(log_p_diag_if_sym(j_1__));
                }
                size_t sym_diag_delay_rv_j_1_max__ = Max_delay;
                for (size_t j_1__ = 0; j_1__ < sym_diag_delay_rv_j_1_max__; ++j_1__) {
                    vars__.push_back(sym_diag_delay_rv(j_1__));
                }
                size_t sev_diag_delay_rv_j_1_max__ = Max_delay;
                for (size_t j_1__ = 0; j_1__ < sev_diag_delay_rv_j_1_max__; ++j_1__) {
                    vars__.push_back(sev_diag_delay_rv(j_1__));
                }
                vars__.push_back(log_p_die_if_inf);
                size_t log_new_sym_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < log_new_sym_j_1_max__; ++j_1__) {
                    vars__.push_back(log_new_sym(j_1__));
                }
                size_t log_new_sev_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < log_new_sev_j_1_max__; ++j_1__) {
                    vars__.push_back(log_new_sev(j_1__));
                }
                size_t log_new_die_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < log_new_die_j_1_max__; ++j_1__) {
                    vars__.push_back(log_new_die(j_1__));
                }
                size_t log_new_asy_dx_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < log_new_asy_dx_j_1_max__; ++j_1__) {
                    vars__.push_back(log_new_asy_dx(j_1__));
                }
                size_t log_new_sym_dx_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < log_new_sym_dx_j_1_max__; ++j_1__) {
                    vars__.push_back(log_new_sym_dx(j_1__));
                }
                size_t log_new_sev_dx_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < log_new_sev_dx_j_1_max__; ++j_1__) {
                    vars__.push_back(log_new_sev_dx(j_1__));
                }
                size_t log_dx_sym_sev_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < log_dx_sym_sev_j_1_max__; ++j_1__) {
                    vars__.push_back(log_dx_sym_sev(j_1__));
                }
                size_t log_dx_sym_die_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < log_dx_sym_die_j_1_max__; ++j_1__) {
                    vars__.push_back(log_dx_sym_die(j_1__));
                }
                size_t log_dx_sev_die_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < log_dx_sev_die_j_1_max__; ++j_1__) {
                    vars__.push_back(log_dx_sev_die(j_1__));
                }
                size_t log_diag_all_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < log_diag_all_j_1_max__; ++j_1__) {
                    vars__.push_back(log_diag_all(j_1__));
                }
                size_t log_new_die_dx_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < log_new_die_dx_j_1_max__; ++j_1__) {
                    vars__.push_back(log_new_die_dx(j_1__));
                }
                size_t log_occur_cas_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < log_occur_cas_j_1_max__; ++j_1__) {
                    vars__.push_back(log_occur_cas(j_1__));
                }
                size_t log_occur_die_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < log_occur_die_j_1_max__; ++j_1__) {
                    vars__.push_back(log_occur_die(j_1__));
                }
                size_t log_occur_cas_mvs_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < log_occur_cas_mvs_j_1_max__; ++j_1__) {
                    vars__.push_back(log_occur_cas_mvs(j_1__));
                }
                size_t log_occur_die_mvs_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < log_occur_die_mvs_j_1_max__; ++j_1__) {
                    vars__.push_back(log_occur_die_mvs(j_1__));
                }
                size_t log_ifr_omi_rv_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < log_ifr_omi_rv_j_1_max__; ++j_1__) {
                    vars__.push_back(log_ifr_omi_rv(j_1__));
                }
                size_t log_ifr_omi_rv_sev_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < log_ifr_omi_rv_sev_j_1_max__; ++j_1__) {
                    vars__.push_back(log_ifr_omi_rv_sev(j_1__));
                }
                size_t log_ifr_omi_rv_die_j_1_max__ = N_days_tot;
                for (size_t j_1__ = 0; j_1__ < log_ifr_omi_rv_die_j_1_max__; ++j_1__) {
                    vars__.push_back(log_ifr_omi_rv_die(j_1__));
                }
                vars__.push_back(phi_cas);
                vars__.push_back(phi_die);
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_stan_program_default";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "log_new_inf_0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "serial_i";
        param_names__.push_back(param_name_stream__.str());
        size_t spl_par_rt_raw_j_1_max__ = N_spl_par_rt;
        for (size_t j_1__ = 0; j_1__ < spl_par_rt_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "spl_par_rt_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "log_p_sym_if_inf";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "log_p_sym_if_inf_omi";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "log_p_sev_if_sym";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "log_p_die_if_sev";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "ifr_decl_OR";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rr_decl_sev";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rr_decl_die";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "omicron_delay";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "log_scale_dx_delay_sym";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "log_scale_dx_delay_sev";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "log_rr_diag_asy_vs_sym";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "log_p_diag_if_sev";
        param_names__.push_back(param_name_stream__.str());
        size_t spl_par_sym_dx_j_1_max__ = N_spl_par_dx;
        for (size_t j_1__ = 0; j_1__ < spl_par_sym_dx_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "spl_par_sym_dx" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "inv_sqrt_phi_c";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "inv_sqrt_phi_d";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "log_p_reinf";
        param_names__.push_back(param_name_stream__.str());
        size_t prob_vac_j_1_max__ = 3;
        for (size_t j_1__ = 0; j_1__ < prob_vac_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "prob_vac" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t log_new_inf_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_new_inf_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_new_inf" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_frac_sus";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_frac_new_inf";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_pop_sus";
            param_names__.push_back(param_name_stream__.str());
            size_t log_serial_i_comb_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_serial_i_comb_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_serial_i_comb" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t Rt0_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < Rt0_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Rt0" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t logRt_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < logRt_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "logRt" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_p_die_if_sevt_j_1_max__ = N_ifr_adj;
            for (size_t j_1__ = 0; j_1__ < log_p_die_if_sevt_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_p_die_if_sevt" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_p_sev_if_symt_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_p_sev_if_symt_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_p_sev_if_symt" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_p_sym_if_inft_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_p_sym_if_inft_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_p_sym_if_inft" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_p_sym_if_inft_omi_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_p_sym_if_inft_omi_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_p_sym_if_inft_omi" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_rr_sym_if_inf";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_rr_sev_if_sym";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "rr_die_if_sev";
            param_names__.push_back(param_name_stream__.str());
            size_t rr_diag_sym_vs_sev_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < rr_diag_sym_vs_sev_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "rr_diag_sym_vs_sev" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_p_diag_if_asy_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_p_diag_if_asy_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_p_diag_if_asy" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_p_diag_if_sym_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_p_diag_if_sym_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_p_diag_if_sym" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t sym_diag_delay_rv_j_1_max__ = Max_delay;
            for (size_t j_1__ = 0; j_1__ < sym_diag_delay_rv_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sym_diag_delay_rv" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t sev_diag_delay_rv_j_1_max__ = Max_delay;
            for (size_t j_1__ = 0; j_1__ < sev_diag_delay_rv_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sev_diag_delay_rv" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_p_die_if_inf";
            param_names__.push_back(param_name_stream__.str());
            size_t log_new_sym_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_new_sym_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_new_sym" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_new_sev_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_new_sev_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_new_sev" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_new_die_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_new_die_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_new_die" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_new_asy_dx_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_new_asy_dx_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_new_asy_dx" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_new_sym_dx_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_new_sym_dx_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_new_sym_dx" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_new_sev_dx_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_new_sev_dx_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_new_sev_dx" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_dx_sym_sev_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_dx_sym_sev_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_dx_sym_sev" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_dx_sym_die_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_dx_sym_die_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_dx_sym_die" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_dx_sev_die_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_dx_sev_die_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_dx_sev_die" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_diag_all_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_diag_all_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_diag_all" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_new_die_dx_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_new_die_dx_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_new_die_dx" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_occur_cas_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_occur_cas_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_occur_cas" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_occur_die_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_occur_die_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_occur_die" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_occur_cas_mvs_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_occur_cas_mvs_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_occur_cas_mvs" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_occur_die_mvs_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_occur_die_mvs_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_occur_die_mvs" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_ifr_omi_rv_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_ifr_omi_rv_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_ifr_omi_rv" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_ifr_omi_rv_sev_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_ifr_omi_rv_sev_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_ifr_omi_rv_sev" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_ifr_omi_rv_die_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_ifr_omi_rv_die_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_ifr_omi_rv_die" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi_cas";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi_die";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "log_new_inf_0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "serial_i";
        param_names__.push_back(param_name_stream__.str());
        size_t spl_par_rt_raw_j_1_max__ = N_spl_par_rt;
        for (size_t j_1__ = 0; j_1__ < spl_par_rt_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "spl_par_rt_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "log_p_sym_if_inf";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "log_p_sym_if_inf_omi";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "log_p_sev_if_sym";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "log_p_die_if_sev";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "ifr_decl_OR";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rr_decl_sev";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rr_decl_die";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "omicron_delay";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "log_scale_dx_delay_sym";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "log_scale_dx_delay_sev";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "log_rr_diag_asy_vs_sym";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "log_p_diag_if_sev";
        param_names__.push_back(param_name_stream__.str());
        size_t spl_par_sym_dx_j_1_max__ = N_spl_par_dx;
        for (size_t j_1__ = 0; j_1__ < spl_par_sym_dx_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "spl_par_sym_dx" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "inv_sqrt_phi_c";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "inv_sqrt_phi_d";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "log_p_reinf";
        param_names__.push_back(param_name_stream__.str());
        size_t prob_vac_j_1_max__ = (3 - 1);
        for (size_t j_1__ = 0; j_1__ < prob_vac_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "prob_vac" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t log_new_inf_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_new_inf_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_new_inf" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_frac_sus";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_frac_new_inf";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_pop_sus";
            param_names__.push_back(param_name_stream__.str());
            size_t log_serial_i_comb_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_serial_i_comb_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_serial_i_comb" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t Rt0_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < Rt0_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Rt0" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t logRt_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < logRt_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "logRt" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_p_die_if_sevt_j_1_max__ = N_ifr_adj;
            for (size_t j_1__ = 0; j_1__ < log_p_die_if_sevt_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_p_die_if_sevt" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_p_sev_if_symt_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_p_sev_if_symt_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_p_sev_if_symt" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_p_sym_if_inft_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_p_sym_if_inft_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_p_sym_if_inft" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_p_sym_if_inft_omi_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_p_sym_if_inft_omi_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_p_sym_if_inft_omi" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_rr_sym_if_inf";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_rr_sev_if_sym";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "rr_die_if_sev";
            param_names__.push_back(param_name_stream__.str());
            size_t rr_diag_sym_vs_sev_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < rr_diag_sym_vs_sev_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "rr_diag_sym_vs_sev" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_p_diag_if_asy_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_p_diag_if_asy_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_p_diag_if_asy" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_p_diag_if_sym_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_p_diag_if_sym_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_p_diag_if_sym" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t sym_diag_delay_rv_j_1_max__ = Max_delay;
            for (size_t j_1__ = 0; j_1__ < sym_diag_delay_rv_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sym_diag_delay_rv" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t sev_diag_delay_rv_j_1_max__ = Max_delay;
            for (size_t j_1__ = 0; j_1__ < sev_diag_delay_rv_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sev_diag_delay_rv" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_p_die_if_inf";
            param_names__.push_back(param_name_stream__.str());
            size_t log_new_sym_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_new_sym_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_new_sym" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_new_sev_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_new_sev_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_new_sev" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_new_die_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_new_die_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_new_die" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_new_asy_dx_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_new_asy_dx_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_new_asy_dx" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_new_sym_dx_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_new_sym_dx_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_new_sym_dx" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_new_sev_dx_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_new_sev_dx_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_new_sev_dx" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_dx_sym_sev_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_dx_sym_sev_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_dx_sym_sev" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_dx_sym_die_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_dx_sym_die_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_dx_sym_die" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_dx_sev_die_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_dx_sev_die_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_dx_sev_die" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_diag_all_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_diag_all_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_diag_all" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_new_die_dx_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_new_die_dx_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_new_die_dx" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_occur_cas_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_occur_cas_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_occur_cas" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_occur_die_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_occur_die_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_occur_die" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_occur_cas_mvs_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_occur_cas_mvs_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_occur_cas_mvs" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_occur_die_mvs_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_occur_die_mvs_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_occur_die_mvs" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_ifr_omi_rv_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_ifr_omi_rv_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_ifr_omi_rv" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_ifr_omi_rv_sev_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_ifr_omi_rv_sev_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_ifr_omi_rv_sev" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_ifr_omi_rv_die_j_1_max__ = N_days_tot;
            for (size_t j_1__ = 0; j_1__ < log_ifr_omi_rv_die_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_ifr_omi_rv_die" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi_cas";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi_die";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_stan_program_default_namespace::model_stan_program_default stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
