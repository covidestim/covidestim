// Generated by rstantools.  Do not edit by hand.

/*
    rstanexample is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rstanexample is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rstanexample.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_stan_program_default_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_stan_program_default");
    reader.add_event(1056, 1054, "end", "model_stan_program_default");
    return reader;
}
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
conv1d(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
           const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& kernel, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 3;
        int nk(0);
        (void) nk;  // dummy to suppress unused var warning
        stan::math::fill(nk, std::numeric_limits<int>::min());
        stan::math::assign(nk,rows(kernel));
        current_statement_begin__ = 4;
        int nx(0);
        (void) nx;  // dummy to suppress unused var warning
        stan::math::fill(nx, std::numeric_limits<int>::min());
        stan::math::assign(nx,rows(x));
        current_statement_begin__ = 5;
        validate_non_negative_index("X", "nx", nx);
        validate_non_negative_index("X", "nk", nk);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> X(nx, nk);
        stan::math::initialize(X, DUMMY_VAR__);
        stan::math::fill(X, DUMMY_VAR__);
        current_statement_begin__ = 7;
        if (as_bool(logical_lt(nx, nk))) {
            current_statement_begin__ = 8;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "nrow(x) must be >= nrow(kernel). x had nrow =";
            errmsg_stream__ << nx;
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 20;
        for (int i = 1; i <= nk; ++i) {
            current_statement_begin__ = 27;
            if (as_bool(logical_lt(i, nk))) {
                current_statement_begin__ = 28;
                stan::model::assign(X, 
                            stan::model::cons_list(stan::model::index_min_max(1, (nk - i)), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                            rep_vector(0, (nk - i)), 
                            "assigning variable X");
            }
            current_statement_begin__ = 34;
            stan::model::assign(X, 
                        stan::model::cons_list(stan::model::index_min_max(((nk - i) + 1), nx), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                        stan::model::rvalue(x, stan::model::cons_list(stan::model::index_min_max(1, ((nx - nk) + i)), stan::model::nil_index_list()), "x"), 
                        "assigning variable X");
        }
        current_statement_begin__ = 37;
        return stan::math::promote_scalar<fun_return_scalar_t__>(multiply(X, kernel));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct conv1d_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
           const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& kernel, std::ostream* pstream__) const {
        return conv1d(x, kernel, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
calcExposed(const T0__& OR,
                const T1__& cumInf,
                const T2__& cumVac, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 41;
        local_scalar_t__ t1(DUMMY_VAR__);
        (void) t1;  // dummy to suppress unused var warning
        stan::math::initialize(t1, DUMMY_VAR__);
        stan::math::fill(t1, DUMMY_VAR__);
        stan::math::assign(t1,((((1 + (OR * cumInf)) - cumInf) - (OR * cumVac)) - cumVac));
        current_statement_begin__ = 42;
        local_scalar_t__ t2(DUMMY_VAR__);
        (void) t2;  // dummy to suppress unused var warning
        stan::math::initialize(t2, DUMMY_VAR__);
        stan::math::fill(t2, DUMMY_VAR__);
        stan::math::assign(t2,(OR - (cumVac * OR)));
        current_statement_begin__ = 43;
        local_scalar_t__ b(DUMMY_VAR__);
        (void) b;  // dummy to suppress unused var warning
        stan::math::initialize(b, DUMMY_VAR__);
        stan::math::fill(b, DUMMY_VAR__);
        stan::math::assign(b,((-(t1) + pow((pow(t1, 2) + ((4 * cumVac) * t2)), 0.5)) / (2 * t2)));
        current_statement_begin__ = 44;
        local_scalar_t__ o_inf(DUMMY_VAR__);
        (void) o_inf;  // dummy to suppress unused var warning
        stan::math::initialize(o_inf, DUMMY_VAR__);
        stan::math::fill(o_inf, DUMMY_VAR__);
        stan::math::assign(o_inf,(b * OR));
        current_statement_begin__ = 45;
        local_scalar_t__ cp_vac_not_inf(DUMMY_VAR__);
        (void) cp_vac_not_inf;  // dummy to suppress unused var warning
        stan::math::initialize(cp_vac_not_inf, DUMMY_VAR__);
        stan::math::fill(cp_vac_not_inf, DUMMY_VAR__);
        stan::math::assign(cp_vac_not_inf,(b / (1 + b)));
        current_statement_begin__ = 46;
        local_scalar_t__ cp_vac_inf(DUMMY_VAR__);
        (void) cp_vac_inf;  // dummy to suppress unused var warning
        stan::math::initialize(cp_vac_inf, DUMMY_VAR__);
        stan::math::fill(cp_vac_inf, DUMMY_VAR__);
        stan::math::assign(cp_vac_inf,(o_inf / (1 + o_inf)));
        current_statement_begin__ = 47;
        local_scalar_t__ p_vac_not_inf(DUMMY_VAR__);
        (void) p_vac_not_inf;  // dummy to suppress unused var warning
        stan::math::initialize(p_vac_not_inf, DUMMY_VAR__);
        stan::math::fill(p_vac_not_inf, DUMMY_VAR__);
        stan::math::assign(p_vac_not_inf,(cp_vac_not_inf * (1 - cumInf)));
        current_statement_begin__ = 48;
        local_scalar_t__ p_vac_inf(DUMMY_VAR__);
        (void) p_vac_inf;  // dummy to suppress unused var warning
        stan::math::initialize(p_vac_inf, DUMMY_VAR__);
        stan::math::fill(p_vac_inf, DUMMY_VAR__);
        stan::math::assign(p_vac_inf,(cp_vac_inf * cumInf));
        current_statement_begin__ = 49;
        local_scalar_t__ p_not_vac_not_inf(DUMMY_VAR__);
        (void) p_not_vac_not_inf;  // dummy to suppress unused var warning
        stan::math::initialize(p_not_vac_not_inf, DUMMY_VAR__);
        stan::math::fill(p_not_vac_not_inf, DUMMY_VAR__);
        stan::math::assign(p_not_vac_not_inf,((1 - cp_vac_not_inf) * (1 - cumInf)));
        current_statement_begin__ = 50;
        local_scalar_t__ p_not_vac_inf(DUMMY_VAR__);
        (void) p_not_vac_inf;  // dummy to suppress unused var warning
        stan::math::initialize(p_not_vac_inf, DUMMY_VAR__);
        stan::math::fill(p_not_vac_inf, DUMMY_VAR__);
        stan::math::assign(p_not_vac_inf,((1 - cp_vac_inf) * cumInf));
        current_statement_begin__ = 51;
        local_scalar_t__ pct_imm(DUMMY_VAR__);
        (void) pct_imm;  // dummy to suppress unused var warning
        stan::math::initialize(pct_imm, DUMMY_VAR__);
        stan::math::fill(pct_imm, DUMMY_VAR__);
        stan::math::assign(pct_imm,((p_vac_inf + p_vac_not_inf) + p_not_vac_inf));
        current_statement_begin__ = 52;
        return stan::math::promote_scalar<fun_return_scalar_t__>(pct_imm);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct calcExposed_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& OR,
                const T1__& cumInf,
                const T2__& cumVac, std::ostream* pstream__) const {
        return calcExposed(OR, cumInf, cumVac, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_stan_program_default
  : public stan::model::model_base_crtp<model_stan_program_default> {
private:
        int N_weeks;
        int N_weeks_start_omicron;
        int N_weeks_before;
        int N_weeks_transition;
        int Max_delay;
        std::vector<int> obs_cas;
        std::vector<int> obs_die;
        std::vector<int> obs_hosp;
        vector_d obs_boost;
        vector_d obs_vax;
        double pop_size;
        double OR;
        int N_ifr_adj;
        vector_d ifr_adj;
        vector_d ifr_vac_adj;
        double pri_ifr_decl_OR_a;
        double pri_ifr_decl_OR_b;
        double ifr_adj_fixed;
        double infect_dist_rate;
        double infect_dist_shap;
        double seropos_dist_rate;
        double seropos_dist_shap;
        double waning_scalar;
        double waning_scalar_sev;
        double vax_boost_scalar;
        double omicron_scalar;
        int N_spl_par_rt;
        matrix_d spl_basis_rt;
        int N_spl_par_dx;
        matrix_d spl_basis_dx;
        double inf_prg_delay_shap;
        double inf_prg_delay_rate;
        double asy_rec_delay_shap;
        double asy_rec_delay_rate;
        double sym_prg_delay_shap;
        double sym_prg_delay_rate;
        double sev_prg_delay_shap;
        double sev_prg_delay_rate;
        double cas_rep_delay_shap;
        double cas_rep_delay_rate;
        double die_rep_delay_shap;
        double die_rep_delay_rate;
        int pre_period_zero;
        int cas_yes;
        int die_yes;
        int hosp_yes;
        int obs_cas_rep;
        int obs_die_rep;
        int obs_hosp_rep;
        int lastDeathWeek;
        int lastHospWeek;
        int firstHospWeek;
        int lastCaseWeek;
        double pri_log_infections_0_mu;
        double pri_log_infections_0_sd;
        double pri_logRt_mu;
        double pri_logRt_sd;
        double pri_serial_i_shap;
        double pri_serial_i_rate;
        double pri_serial_i_postO_shap;
        double pri_serial_i_postO_rate;
        double pri_deriv1_spl_par_sd;
        double pri_deriv2_spl_par_sd;
        double pri_p_sym_if_inf_a;
        double pri_p_sym_if_inf_b;
        double pri_p_sym_if_inf_postO_a;
        double pri_p_sym_if_inf_postO_b;
        double pri_p_sev_if_sym_a;
        double pri_p_sev_if_sym_b;
        double pri_p_die_if_sev_a;
        double pri_p_die_if_sev_b;
        double pri_p_die_if_inf_a;
        double pri_p_die_if_inf_b;
        double pri_p_die_if_inf_postO_a;
        double pri_p_die_if_inf_postO_b;
        double pri_rr_diag_asy_vs_sym_a;
        double pri_rr_diag_asy_vs_sym_b;
        double pri_rr_diag_sym_vs_sev_a;
        double pri_rr_diag_sym_vs_sev_b;
        double pri_p_diag_if_sev_a;
        double pri_p_diag_if_sev_b;
        double scale_dx_delay_sym_a;
        double scale_dx_delay_sym_b;
        double scale_dx_delay_sev_a;
        double scale_dx_delay_sev_b;
        int N_weeks_tot;
        std::vector<int> obs_cas_mvs;
        std::vector<int> obs_die_mvs;
        std::vector<int> obs_hosp_mvs;
        vector_d inf_prg_delay_rv;
        vector_d asy_rec_delay_rv;
        vector_d sym_prg_delay_rv;
        vector_d sev_prg_delay_rv;
        vector_d cas_rep_delay_rv;
        vector_d die_rep_delay_rv;
        vector_d cas_cum_report_delay_rv;
        vector_d die_cum_report_delay_rv;
        std::vector<int> idx1;
        std::vector<int> idx2;
        vector_d idx3;
        vector_d idx4;
        vector_d full_vax;
        vector_d full_boost;
public:
    model_stan_program_default(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_stan_program_default(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_stan_program_default_namespace::model_stan_program_default";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 61;
            context__.validate_dims("data initialization", "N_weeks", "int", context__.to_vec());
            N_weeks = int(0);
            vals_i__ = context__.vals_i("N_weeks");
            pos__ = 0;
            N_weeks = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_weeks", N_weeks, 0);
            current_statement_begin__ = 62;
            context__.validate_dims("data initialization", "N_weeks_start_omicron", "int", context__.to_vec());
            N_weeks_start_omicron = int(0);
            vals_i__ = context__.vals_i("N_weeks_start_omicron");
            pos__ = 0;
            N_weeks_start_omicron = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_weeks_start_omicron", N_weeks_start_omicron, 0);
            current_statement_begin__ = 63;
            context__.validate_dims("data initialization", "N_weeks_before", "int", context__.to_vec());
            N_weeks_before = int(0);
            vals_i__ = context__.vals_i("N_weeks_before");
            pos__ = 0;
            N_weeks_before = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_weeks_before", N_weeks_before, 0);
            current_statement_begin__ = 64;
            context__.validate_dims("data initialization", "N_weeks_transition", "int", context__.to_vec());
            N_weeks_transition = int(0);
            vals_i__ = context__.vals_i("N_weeks_transition");
            pos__ = 0;
            N_weeks_transition = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_weeks_transition", N_weeks_transition, 0);
            current_statement_begin__ = 65;
            context__.validate_dims("data initialization", "Max_delay", "int", context__.to_vec());
            Max_delay = int(0);
            vals_i__ = context__.vals_i("Max_delay");
            pos__ = 0;
            Max_delay = vals_i__[pos__++];
            check_greater_or_equal(function__, "Max_delay", Max_delay, 0);
            current_statement_begin__ = 69;
            validate_non_negative_index("obs_cas", "N_weeks", N_weeks);
            context__.validate_dims("data initialization", "obs_cas", "int", context__.to_vec(N_weeks));
            obs_cas = std::vector<int>(N_weeks, int(0));
            vals_i__ = context__.vals_i("obs_cas");
            pos__ = 0;
            size_t obs_cas_k_0_max__ = N_weeks;
            for (size_t k_0__ = 0; k_0__ < obs_cas_k_0_max__; ++k_0__) {
                obs_cas[k_0__] = vals_i__[pos__++];
            }
            size_t obs_cas_i_0_max__ = N_weeks;
            for (size_t i_0__ = 0; i_0__ < obs_cas_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "obs_cas[i_0__]", obs_cas[i_0__], 0);
            }
            current_statement_begin__ = 70;
            validate_non_negative_index("obs_die", "N_weeks", N_weeks);
            context__.validate_dims("data initialization", "obs_die", "int", context__.to_vec(N_weeks));
            obs_die = std::vector<int>(N_weeks, int(0));
            vals_i__ = context__.vals_i("obs_die");
            pos__ = 0;
            size_t obs_die_k_0_max__ = N_weeks;
            for (size_t k_0__ = 0; k_0__ < obs_die_k_0_max__; ++k_0__) {
                obs_die[k_0__] = vals_i__[pos__++];
            }
            size_t obs_die_i_0_max__ = N_weeks;
            for (size_t i_0__ = 0; i_0__ < obs_die_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "obs_die[i_0__]", obs_die[i_0__], 0);
            }
            current_statement_begin__ = 71;
            validate_non_negative_index("obs_hosp", "N_weeks", N_weeks);
            context__.validate_dims("data initialization", "obs_hosp", "int", context__.to_vec(N_weeks));
            obs_hosp = std::vector<int>(N_weeks, int(0));
            vals_i__ = context__.vals_i("obs_hosp");
            pos__ = 0;
            size_t obs_hosp_k_0_max__ = N_weeks;
            for (size_t k_0__ = 0; k_0__ < obs_hosp_k_0_max__; ++k_0__) {
                obs_hosp[k_0__] = vals_i__[pos__++];
            }
            size_t obs_hosp_i_0_max__ = N_weeks;
            for (size_t i_0__ = 0; i_0__ < obs_hosp_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "obs_hosp[i_0__]", obs_hosp[i_0__], 0);
            }
            current_statement_begin__ = 72;
            validate_non_negative_index("obs_boost", "N_weeks", N_weeks);
            context__.validate_dims("data initialization", "obs_boost", "vector_d", context__.to_vec(N_weeks));
            obs_boost = Eigen::Matrix<double, Eigen::Dynamic, 1>(N_weeks);
            vals_r__ = context__.vals_r("obs_boost");
            pos__ = 0;
            size_t obs_boost_j_1_max__ = N_weeks;
            for (size_t j_1__ = 0; j_1__ < obs_boost_j_1_max__; ++j_1__) {
                obs_boost(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "obs_boost", obs_boost, 0);
            current_statement_begin__ = 73;
            validate_non_negative_index("obs_vax", "N_weeks", N_weeks);
            context__.validate_dims("data initialization", "obs_vax", "vector_d", context__.to_vec(N_weeks));
            obs_vax = Eigen::Matrix<double, Eigen::Dynamic, 1>(N_weeks);
            vals_r__ = context__.vals_r("obs_vax");
            pos__ = 0;
            size_t obs_vax_j_1_max__ = N_weeks;
            for (size_t j_1__ = 0; j_1__ < obs_vax_j_1_max__; ++j_1__) {
                obs_vax(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "obs_vax", obs_vax, 0);
            current_statement_begin__ = 74;
            context__.validate_dims("data initialization", "pop_size", "double", context__.to_vec());
            pop_size = double(0);
            vals_r__ = context__.vals_r("pop_size");
            pos__ = 0;
            pop_size = vals_r__[pos__++];
            check_greater_or_equal(function__, "pop_size", pop_size, 0);
            current_statement_begin__ = 75;
            context__.validate_dims("data initialization", "OR", "double", context__.to_vec());
            OR = double(0);
            vals_r__ = context__.vals_r("OR");
            pos__ = 0;
            OR = vals_r__[pos__++];
            check_greater_or_equal(function__, "OR", OR, 0);
            current_statement_begin__ = 77;
            context__.validate_dims("data initialization", "N_ifr_adj", "int", context__.to_vec());
            N_ifr_adj = int(0);
            vals_i__ = context__.vals_i("N_ifr_adj");
            pos__ = 0;
            N_ifr_adj = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_ifr_adj", N_ifr_adj, 0);
            current_statement_begin__ = 78;
            validate_non_negative_index("ifr_adj", "N_ifr_adj", N_ifr_adj);
            context__.validate_dims("data initialization", "ifr_adj", "vector_d", context__.to_vec(N_ifr_adj));
            ifr_adj = Eigen::Matrix<double, Eigen::Dynamic, 1>(N_ifr_adj);
            vals_r__ = context__.vals_r("ifr_adj");
            pos__ = 0;
            size_t ifr_adj_j_1_max__ = N_ifr_adj;
            for (size_t j_1__ = 0; j_1__ < ifr_adj_j_1_max__; ++j_1__) {
                ifr_adj(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "ifr_adj", ifr_adj, 0);
            current_statement_begin__ = 79;
            validate_non_negative_index("ifr_vac_adj", "(N_weeks + N_weeks_before)", (N_weeks + N_weeks_before));
            context__.validate_dims("data initialization", "ifr_vac_adj", "vector_d", context__.to_vec((N_weeks + N_weeks_before)));
            ifr_vac_adj = Eigen::Matrix<double, Eigen::Dynamic, 1>((N_weeks + N_weeks_before));
            vals_r__ = context__.vals_r("ifr_vac_adj");
            pos__ = 0;
            size_t ifr_vac_adj_j_1_max__ = (N_weeks + N_weeks_before);
            for (size_t j_1__ = 0; j_1__ < ifr_vac_adj_j_1_max__; ++j_1__) {
                ifr_vac_adj(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "ifr_vac_adj", ifr_vac_adj, 0);
            current_statement_begin__ = 80;
            context__.validate_dims("data initialization", "pri_ifr_decl_OR_a", "double", context__.to_vec());
            pri_ifr_decl_OR_a = double(0);
            vals_r__ = context__.vals_r("pri_ifr_decl_OR_a");
            pos__ = 0;
            pri_ifr_decl_OR_a = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_ifr_decl_OR_a", pri_ifr_decl_OR_a, 0);
            current_statement_begin__ = 81;
            context__.validate_dims("data initialization", "pri_ifr_decl_OR_b", "double", context__.to_vec());
            pri_ifr_decl_OR_b = double(0);
            vals_r__ = context__.vals_r("pri_ifr_decl_OR_b");
            pos__ = 0;
            pri_ifr_decl_OR_b = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_ifr_decl_OR_b", pri_ifr_decl_OR_b, 0);
            current_statement_begin__ = 82;
            context__.validate_dims("data initialization", "ifr_adj_fixed", "double", context__.to_vec());
            ifr_adj_fixed = double(0);
            vals_r__ = context__.vals_r("ifr_adj_fixed");
            pos__ = 0;
            ifr_adj_fixed = vals_r__[pos__++];
            check_greater_or_equal(function__, "ifr_adj_fixed", ifr_adj_fixed, 0);
            current_statement_begin__ = 84;
            context__.validate_dims("data initialization", "infect_dist_rate", "double", context__.to_vec());
            infect_dist_rate = double(0);
            vals_r__ = context__.vals_r("infect_dist_rate");
            pos__ = 0;
            infect_dist_rate = vals_r__[pos__++];
            check_greater_or_equal(function__, "infect_dist_rate", infect_dist_rate, 0);
            current_statement_begin__ = 85;
            context__.validate_dims("data initialization", "infect_dist_shap", "double", context__.to_vec());
            infect_dist_shap = double(0);
            vals_r__ = context__.vals_r("infect_dist_shap");
            pos__ = 0;
            infect_dist_shap = vals_r__[pos__++];
            check_greater_or_equal(function__, "infect_dist_shap", infect_dist_shap, 0);
            current_statement_begin__ = 86;
            context__.validate_dims("data initialization", "seropos_dist_rate", "double", context__.to_vec());
            seropos_dist_rate = double(0);
            vals_r__ = context__.vals_r("seropos_dist_rate");
            pos__ = 0;
            seropos_dist_rate = vals_r__[pos__++];
            check_greater_or_equal(function__, "seropos_dist_rate", seropos_dist_rate, 0);
            current_statement_begin__ = 87;
            context__.validate_dims("data initialization", "seropos_dist_shap", "double", context__.to_vec());
            seropos_dist_shap = double(0);
            vals_r__ = context__.vals_r("seropos_dist_shap");
            pos__ = 0;
            seropos_dist_shap = vals_r__[pos__++];
            check_greater_or_equal(function__, "seropos_dist_shap", seropos_dist_shap, 0);
            current_statement_begin__ = 88;
            context__.validate_dims("data initialization", "waning_scalar", "double", context__.to_vec());
            waning_scalar = double(0);
            vals_r__ = context__.vals_r("waning_scalar");
            pos__ = 0;
            waning_scalar = vals_r__[pos__++];
            check_greater_or_equal(function__, "waning_scalar", waning_scalar, 0);
            current_statement_begin__ = 89;
            context__.validate_dims("data initialization", "waning_scalar_sev", "double", context__.to_vec());
            waning_scalar_sev = double(0);
            vals_r__ = context__.vals_r("waning_scalar_sev");
            pos__ = 0;
            waning_scalar_sev = vals_r__[pos__++];
            check_greater_or_equal(function__, "waning_scalar_sev", waning_scalar_sev, 0);
            current_statement_begin__ = 90;
            context__.validate_dims("data initialization", "vax_boost_scalar", "double", context__.to_vec());
            vax_boost_scalar = double(0);
            vals_r__ = context__.vals_r("vax_boost_scalar");
            pos__ = 0;
            vax_boost_scalar = vals_r__[pos__++];
            check_greater_or_equal(function__, "vax_boost_scalar", vax_boost_scalar, 0);
            check_less_or_equal(function__, "vax_boost_scalar", vax_boost_scalar, 1);
            current_statement_begin__ = 91;
            context__.validate_dims("data initialization", "omicron_scalar", "double", context__.to_vec());
            omicron_scalar = double(0);
            vals_r__ = context__.vals_r("omicron_scalar");
            pos__ = 0;
            omicron_scalar = vals_r__[pos__++];
            check_greater_or_equal(function__, "omicron_scalar", omicron_scalar, 0);
            check_less_or_equal(function__, "omicron_scalar", omicron_scalar, 1);
            current_statement_begin__ = 95;
            context__.validate_dims("data initialization", "N_spl_par_rt", "int", context__.to_vec());
            N_spl_par_rt = int(0);
            vals_i__ = context__.vals_i("N_spl_par_rt");
            pos__ = 0;
            N_spl_par_rt = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_spl_par_rt", N_spl_par_rt, 0);
            current_statement_begin__ = 97;
            validate_non_negative_index("spl_basis_rt", "(N_weeks + N_weeks_before)", (N_weeks + N_weeks_before));
            validate_non_negative_index("spl_basis_rt", "N_spl_par_rt", N_spl_par_rt);
            context__.validate_dims("data initialization", "spl_basis_rt", "matrix_d", context__.to_vec((N_weeks + N_weeks_before),N_spl_par_rt));
            spl_basis_rt = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>((N_weeks + N_weeks_before), N_spl_par_rt);
            vals_r__ = context__.vals_r("spl_basis_rt");
            pos__ = 0;
            size_t spl_basis_rt_j_2_max__ = N_spl_par_rt;
            size_t spl_basis_rt_j_1_max__ = (N_weeks + N_weeks_before);
            for (size_t j_2__ = 0; j_2__ < spl_basis_rt_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < spl_basis_rt_j_1_max__; ++j_1__) {
                    spl_basis_rt(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 98;
            context__.validate_dims("data initialization", "N_spl_par_dx", "int", context__.to_vec());
            N_spl_par_dx = int(0);
            vals_i__ = context__.vals_i("N_spl_par_dx");
            pos__ = 0;
            N_spl_par_dx = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_spl_par_dx", N_spl_par_dx, 0);
            current_statement_begin__ = 100;
            validate_non_negative_index("spl_basis_dx", "(N_weeks + N_weeks_before)", (N_weeks + N_weeks_before));
            validate_non_negative_index("spl_basis_dx", "N_spl_par_dx", N_spl_par_dx);
            context__.validate_dims("data initialization", "spl_basis_dx", "matrix_d", context__.to_vec((N_weeks + N_weeks_before),N_spl_par_dx));
            spl_basis_dx = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>((N_weeks + N_weeks_before), N_spl_par_dx);
            vals_r__ = context__.vals_r("spl_basis_dx");
            pos__ = 0;
            size_t spl_basis_dx_j_2_max__ = N_spl_par_dx;
            size_t spl_basis_dx_j_1_max__ = (N_weeks + N_weeks_before);
            for (size_t j_2__ = 0; j_2__ < spl_basis_dx_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < spl_basis_dx_j_1_max__; ++j_1__) {
                    spl_basis_dx(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 104;
            context__.validate_dims("data initialization", "inf_prg_delay_shap", "double", context__.to_vec());
            inf_prg_delay_shap = double(0);
            vals_r__ = context__.vals_r("inf_prg_delay_shap");
            pos__ = 0;
            inf_prg_delay_shap = vals_r__[pos__++];
            check_greater_or_equal(function__, "inf_prg_delay_shap", inf_prg_delay_shap, 0);
            current_statement_begin__ = 105;
            context__.validate_dims("data initialization", "inf_prg_delay_rate", "double", context__.to_vec());
            inf_prg_delay_rate = double(0);
            vals_r__ = context__.vals_r("inf_prg_delay_rate");
            pos__ = 0;
            inf_prg_delay_rate = vals_r__[pos__++];
            check_greater_or_equal(function__, "inf_prg_delay_rate", inf_prg_delay_rate, 0);
            current_statement_begin__ = 106;
            context__.validate_dims("data initialization", "asy_rec_delay_shap", "double", context__.to_vec());
            asy_rec_delay_shap = double(0);
            vals_r__ = context__.vals_r("asy_rec_delay_shap");
            pos__ = 0;
            asy_rec_delay_shap = vals_r__[pos__++];
            check_greater_or_equal(function__, "asy_rec_delay_shap", asy_rec_delay_shap, 0);
            current_statement_begin__ = 107;
            context__.validate_dims("data initialization", "asy_rec_delay_rate", "double", context__.to_vec());
            asy_rec_delay_rate = double(0);
            vals_r__ = context__.vals_r("asy_rec_delay_rate");
            pos__ = 0;
            asy_rec_delay_rate = vals_r__[pos__++];
            check_greater_or_equal(function__, "asy_rec_delay_rate", asy_rec_delay_rate, 0);
            current_statement_begin__ = 108;
            context__.validate_dims("data initialization", "sym_prg_delay_shap", "double", context__.to_vec());
            sym_prg_delay_shap = double(0);
            vals_r__ = context__.vals_r("sym_prg_delay_shap");
            pos__ = 0;
            sym_prg_delay_shap = vals_r__[pos__++];
            check_greater_or_equal(function__, "sym_prg_delay_shap", sym_prg_delay_shap, 0);
            current_statement_begin__ = 109;
            context__.validate_dims("data initialization", "sym_prg_delay_rate", "double", context__.to_vec());
            sym_prg_delay_rate = double(0);
            vals_r__ = context__.vals_r("sym_prg_delay_rate");
            pos__ = 0;
            sym_prg_delay_rate = vals_r__[pos__++];
            check_greater_or_equal(function__, "sym_prg_delay_rate", sym_prg_delay_rate, 0);
            current_statement_begin__ = 110;
            context__.validate_dims("data initialization", "sev_prg_delay_shap", "double", context__.to_vec());
            sev_prg_delay_shap = double(0);
            vals_r__ = context__.vals_r("sev_prg_delay_shap");
            pos__ = 0;
            sev_prg_delay_shap = vals_r__[pos__++];
            check_greater_or_equal(function__, "sev_prg_delay_shap", sev_prg_delay_shap, 0);
            current_statement_begin__ = 111;
            context__.validate_dims("data initialization", "sev_prg_delay_rate", "double", context__.to_vec());
            sev_prg_delay_rate = double(0);
            vals_r__ = context__.vals_r("sev_prg_delay_rate");
            pos__ = 0;
            sev_prg_delay_rate = vals_r__[pos__++];
            check_greater_or_equal(function__, "sev_prg_delay_rate", sev_prg_delay_rate, 0);
            current_statement_begin__ = 114;
            context__.validate_dims("data initialization", "cas_rep_delay_shap", "double", context__.to_vec());
            cas_rep_delay_shap = double(0);
            vals_r__ = context__.vals_r("cas_rep_delay_shap");
            pos__ = 0;
            cas_rep_delay_shap = vals_r__[pos__++];
            check_greater_or_equal(function__, "cas_rep_delay_shap", cas_rep_delay_shap, 0);
            current_statement_begin__ = 115;
            context__.validate_dims("data initialization", "cas_rep_delay_rate", "double", context__.to_vec());
            cas_rep_delay_rate = double(0);
            vals_r__ = context__.vals_r("cas_rep_delay_rate");
            pos__ = 0;
            cas_rep_delay_rate = vals_r__[pos__++];
            check_greater_or_equal(function__, "cas_rep_delay_rate", cas_rep_delay_rate, 0);
            current_statement_begin__ = 116;
            context__.validate_dims("data initialization", "die_rep_delay_shap", "double", context__.to_vec());
            die_rep_delay_shap = double(0);
            vals_r__ = context__.vals_r("die_rep_delay_shap");
            pos__ = 0;
            die_rep_delay_shap = vals_r__[pos__++];
            check_greater_or_equal(function__, "die_rep_delay_shap", die_rep_delay_shap, 0);
            current_statement_begin__ = 117;
            context__.validate_dims("data initialization", "die_rep_delay_rate", "double", context__.to_vec());
            die_rep_delay_rate = double(0);
            vals_r__ = context__.vals_r("die_rep_delay_rate");
            pos__ = 0;
            die_rep_delay_rate = vals_r__[pos__++];
            check_greater_or_equal(function__, "die_rep_delay_rate", die_rep_delay_rate, 0);
            current_statement_begin__ = 121;
            context__.validate_dims("data initialization", "pre_period_zero", "int", context__.to_vec());
            pre_period_zero = int(0);
            vals_i__ = context__.vals_i("pre_period_zero");
            pos__ = 0;
            pre_period_zero = vals_i__[pos__++];
            check_greater_or_equal(function__, "pre_period_zero", pre_period_zero, 0);
            check_less_or_equal(function__, "pre_period_zero", pre_period_zero, 1);
            current_statement_begin__ = 124;
            context__.validate_dims("data initialization", "cas_yes", "int", context__.to_vec());
            cas_yes = int(0);
            vals_i__ = context__.vals_i("cas_yes");
            pos__ = 0;
            cas_yes = vals_i__[pos__++];
            check_greater_or_equal(function__, "cas_yes", cas_yes, 0);
            check_less_or_equal(function__, "cas_yes", cas_yes, 1);
            current_statement_begin__ = 125;
            context__.validate_dims("data initialization", "die_yes", "int", context__.to_vec());
            die_yes = int(0);
            vals_i__ = context__.vals_i("die_yes");
            pos__ = 0;
            die_yes = vals_i__[pos__++];
            check_greater_or_equal(function__, "die_yes", die_yes, 0);
            check_less_or_equal(function__, "die_yes", die_yes, 1);
            current_statement_begin__ = 126;
            context__.validate_dims("data initialization", "hosp_yes", "int", context__.to_vec());
            hosp_yes = int(0);
            vals_i__ = context__.vals_i("hosp_yes");
            pos__ = 0;
            hosp_yes = vals_i__[pos__++];
            check_greater_or_equal(function__, "hosp_yes", hosp_yes, 0);
            check_less_or_equal(function__, "hosp_yes", hosp_yes, 1);
            current_statement_begin__ = 129;
            context__.validate_dims("data initialization", "obs_cas_rep", "int", context__.to_vec());
            obs_cas_rep = int(0);
            vals_i__ = context__.vals_i("obs_cas_rep");
            pos__ = 0;
            obs_cas_rep = vals_i__[pos__++];
            check_greater_or_equal(function__, "obs_cas_rep", obs_cas_rep, 0);
            check_less_or_equal(function__, "obs_cas_rep", obs_cas_rep, 1);
            current_statement_begin__ = 130;
            context__.validate_dims("data initialization", "obs_die_rep", "int", context__.to_vec());
            obs_die_rep = int(0);
            vals_i__ = context__.vals_i("obs_die_rep");
            pos__ = 0;
            obs_die_rep = vals_i__[pos__++];
            check_greater_or_equal(function__, "obs_die_rep", obs_die_rep, 0);
            check_less_or_equal(function__, "obs_die_rep", obs_die_rep, 1);
            current_statement_begin__ = 131;
            context__.validate_dims("data initialization", "obs_hosp_rep", "int", context__.to_vec());
            obs_hosp_rep = int(0);
            vals_i__ = context__.vals_i("obs_hosp_rep");
            pos__ = 0;
            obs_hosp_rep = vals_i__[pos__++];
            check_greater_or_equal(function__, "obs_hosp_rep", obs_hosp_rep, 0);
            check_less_or_equal(function__, "obs_hosp_rep", obs_hosp_rep, 1);
            current_statement_begin__ = 141;
            context__.validate_dims("data initialization", "lastDeathWeek", "int", context__.to_vec());
            lastDeathWeek = int(0);
            vals_i__ = context__.vals_i("lastDeathWeek");
            pos__ = 0;
            lastDeathWeek = vals_i__[pos__++];
            check_greater_or_equal(function__, "lastDeathWeek", lastDeathWeek, 0);
            current_statement_begin__ = 142;
            context__.validate_dims("data initialization", "lastHospWeek", "int", context__.to_vec());
            lastHospWeek = int(0);
            vals_i__ = context__.vals_i("lastHospWeek");
            pos__ = 0;
            lastHospWeek = vals_i__[pos__++];
            check_greater_or_equal(function__, "lastHospWeek", lastHospWeek, 0);
            current_statement_begin__ = 143;
            context__.validate_dims("data initialization", "firstHospWeek", "int", context__.to_vec());
            firstHospWeek = int(0);
            vals_i__ = context__.vals_i("firstHospWeek");
            pos__ = 0;
            firstHospWeek = vals_i__[pos__++];
            check_greater_or_equal(function__, "firstHospWeek", firstHospWeek, 0);
            current_statement_begin__ = 146;
            context__.validate_dims("data initialization", "lastCaseWeek", "int", context__.to_vec());
            lastCaseWeek = int(0);
            vals_i__ = context__.vals_i("lastCaseWeek");
            pos__ = 0;
            lastCaseWeek = vals_i__[pos__++];
            check_greater_or_equal(function__, "lastCaseWeek", lastCaseWeek, 0);
            current_statement_begin__ = 151;
            context__.validate_dims("data initialization", "pri_log_infections_0_mu", "double", context__.to_vec());
            pri_log_infections_0_mu = double(0);
            vals_r__ = context__.vals_r("pri_log_infections_0_mu");
            pos__ = 0;
            pri_log_infections_0_mu = vals_r__[pos__++];
            current_statement_begin__ = 152;
            context__.validate_dims("data initialization", "pri_log_infections_0_sd", "double", context__.to_vec());
            pri_log_infections_0_sd = double(0);
            vals_r__ = context__.vals_r("pri_log_infections_0_sd");
            pos__ = 0;
            pri_log_infections_0_sd = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_log_infections_0_sd", pri_log_infections_0_sd, 0);
            current_statement_begin__ = 153;
            context__.validate_dims("data initialization", "pri_logRt_mu", "double", context__.to_vec());
            pri_logRt_mu = double(0);
            vals_r__ = context__.vals_r("pri_logRt_mu");
            pos__ = 0;
            pri_logRt_mu = vals_r__[pos__++];
            current_statement_begin__ = 154;
            context__.validate_dims("data initialization", "pri_logRt_sd", "double", context__.to_vec());
            pri_logRt_sd = double(0);
            vals_r__ = context__.vals_r("pri_logRt_sd");
            pos__ = 0;
            pri_logRt_sd = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_logRt_sd", pri_logRt_sd, 0);
            current_statement_begin__ = 155;
            context__.validate_dims("data initialization", "pri_serial_i_shap", "double", context__.to_vec());
            pri_serial_i_shap = double(0);
            vals_r__ = context__.vals_r("pri_serial_i_shap");
            pos__ = 0;
            pri_serial_i_shap = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_serial_i_shap", pri_serial_i_shap, 0);
            current_statement_begin__ = 156;
            context__.validate_dims("data initialization", "pri_serial_i_rate", "double", context__.to_vec());
            pri_serial_i_rate = double(0);
            vals_r__ = context__.vals_r("pri_serial_i_rate");
            pos__ = 0;
            pri_serial_i_rate = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_serial_i_rate", pri_serial_i_rate, 0);
            current_statement_begin__ = 157;
            context__.validate_dims("data initialization", "pri_serial_i_postO_shap", "double", context__.to_vec());
            pri_serial_i_postO_shap = double(0);
            vals_r__ = context__.vals_r("pri_serial_i_postO_shap");
            pos__ = 0;
            pri_serial_i_postO_shap = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_serial_i_postO_shap", pri_serial_i_postO_shap, 0);
            current_statement_begin__ = 158;
            context__.validate_dims("data initialization", "pri_serial_i_postO_rate", "double", context__.to_vec());
            pri_serial_i_postO_rate = double(0);
            vals_r__ = context__.vals_r("pri_serial_i_postO_rate");
            pos__ = 0;
            pri_serial_i_postO_rate = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_serial_i_postO_rate", pri_serial_i_postO_rate, 0);
            current_statement_begin__ = 159;
            context__.validate_dims("data initialization", "pri_deriv1_spl_par_sd", "double", context__.to_vec());
            pri_deriv1_spl_par_sd = double(0);
            vals_r__ = context__.vals_r("pri_deriv1_spl_par_sd");
            pos__ = 0;
            pri_deriv1_spl_par_sd = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_deriv1_spl_par_sd", pri_deriv1_spl_par_sd, 0);
            current_statement_begin__ = 160;
            context__.validate_dims("data initialization", "pri_deriv2_spl_par_sd", "double", context__.to_vec());
            pri_deriv2_spl_par_sd = double(0);
            vals_r__ = context__.vals_r("pri_deriv2_spl_par_sd");
            pos__ = 0;
            pri_deriv2_spl_par_sd = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_deriv2_spl_par_sd", pri_deriv2_spl_par_sd, 0);
            current_statement_begin__ = 163;
            context__.validate_dims("data initialization", "pri_p_sym_if_inf_a", "double", context__.to_vec());
            pri_p_sym_if_inf_a = double(0);
            vals_r__ = context__.vals_r("pri_p_sym_if_inf_a");
            pos__ = 0;
            pri_p_sym_if_inf_a = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_p_sym_if_inf_a", pri_p_sym_if_inf_a, 0);
            current_statement_begin__ = 164;
            context__.validate_dims("data initialization", "pri_p_sym_if_inf_b", "double", context__.to_vec());
            pri_p_sym_if_inf_b = double(0);
            vals_r__ = context__.vals_r("pri_p_sym_if_inf_b");
            pos__ = 0;
            pri_p_sym_if_inf_b = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_p_sym_if_inf_b", pri_p_sym_if_inf_b, 0);
            current_statement_begin__ = 165;
            context__.validate_dims("data initialization", "pri_p_sym_if_inf_postO_a", "double", context__.to_vec());
            pri_p_sym_if_inf_postO_a = double(0);
            vals_r__ = context__.vals_r("pri_p_sym_if_inf_postO_a");
            pos__ = 0;
            pri_p_sym_if_inf_postO_a = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_p_sym_if_inf_postO_a", pri_p_sym_if_inf_postO_a, 0);
            current_statement_begin__ = 166;
            context__.validate_dims("data initialization", "pri_p_sym_if_inf_postO_b", "double", context__.to_vec());
            pri_p_sym_if_inf_postO_b = double(0);
            vals_r__ = context__.vals_r("pri_p_sym_if_inf_postO_b");
            pos__ = 0;
            pri_p_sym_if_inf_postO_b = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_p_sym_if_inf_postO_b", pri_p_sym_if_inf_postO_b, 0);
            current_statement_begin__ = 167;
            context__.validate_dims("data initialization", "pri_p_sev_if_sym_a", "double", context__.to_vec());
            pri_p_sev_if_sym_a = double(0);
            vals_r__ = context__.vals_r("pri_p_sev_if_sym_a");
            pos__ = 0;
            pri_p_sev_if_sym_a = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_p_sev_if_sym_a", pri_p_sev_if_sym_a, 0);
            current_statement_begin__ = 168;
            context__.validate_dims("data initialization", "pri_p_sev_if_sym_b", "double", context__.to_vec());
            pri_p_sev_if_sym_b = double(0);
            vals_r__ = context__.vals_r("pri_p_sev_if_sym_b");
            pos__ = 0;
            pri_p_sev_if_sym_b = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_p_sev_if_sym_b", pri_p_sev_if_sym_b, 0);
            current_statement_begin__ = 169;
            context__.validate_dims("data initialization", "pri_p_die_if_sev_a", "double", context__.to_vec());
            pri_p_die_if_sev_a = double(0);
            vals_r__ = context__.vals_r("pri_p_die_if_sev_a");
            pos__ = 0;
            pri_p_die_if_sev_a = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_p_die_if_sev_a", pri_p_die_if_sev_a, 0);
            current_statement_begin__ = 170;
            context__.validate_dims("data initialization", "pri_p_die_if_sev_b", "double", context__.to_vec());
            pri_p_die_if_sev_b = double(0);
            vals_r__ = context__.vals_r("pri_p_die_if_sev_b");
            pos__ = 0;
            pri_p_die_if_sev_b = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_p_die_if_sev_b", pri_p_die_if_sev_b, 0);
            current_statement_begin__ = 173;
            context__.validate_dims("data initialization", "pri_p_die_if_inf_a", "double", context__.to_vec());
            pri_p_die_if_inf_a = double(0);
            vals_r__ = context__.vals_r("pri_p_die_if_inf_a");
            pos__ = 0;
            pri_p_die_if_inf_a = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_p_die_if_inf_a", pri_p_die_if_inf_a, 0);
            current_statement_begin__ = 174;
            context__.validate_dims("data initialization", "pri_p_die_if_inf_b", "double", context__.to_vec());
            pri_p_die_if_inf_b = double(0);
            vals_r__ = context__.vals_r("pri_p_die_if_inf_b");
            pos__ = 0;
            pri_p_die_if_inf_b = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_p_die_if_inf_b", pri_p_die_if_inf_b, 0);
            current_statement_begin__ = 175;
            context__.validate_dims("data initialization", "pri_p_die_if_inf_postO_a", "double", context__.to_vec());
            pri_p_die_if_inf_postO_a = double(0);
            vals_r__ = context__.vals_r("pri_p_die_if_inf_postO_a");
            pos__ = 0;
            pri_p_die_if_inf_postO_a = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_p_die_if_inf_postO_a", pri_p_die_if_inf_postO_a, 0);
            current_statement_begin__ = 176;
            context__.validate_dims("data initialization", "pri_p_die_if_inf_postO_b", "double", context__.to_vec());
            pri_p_die_if_inf_postO_b = double(0);
            vals_r__ = context__.vals_r("pri_p_die_if_inf_postO_b");
            pos__ = 0;
            pri_p_die_if_inf_postO_b = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_p_die_if_inf_postO_b", pri_p_die_if_inf_postO_b, 0);
            current_statement_begin__ = 180;
            context__.validate_dims("data initialization", "pri_rr_diag_asy_vs_sym_a", "double", context__.to_vec());
            pri_rr_diag_asy_vs_sym_a = double(0);
            vals_r__ = context__.vals_r("pri_rr_diag_asy_vs_sym_a");
            pos__ = 0;
            pri_rr_diag_asy_vs_sym_a = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_rr_diag_asy_vs_sym_a", pri_rr_diag_asy_vs_sym_a, 0);
            current_statement_begin__ = 181;
            context__.validate_dims("data initialization", "pri_rr_diag_asy_vs_sym_b", "double", context__.to_vec());
            pri_rr_diag_asy_vs_sym_b = double(0);
            vals_r__ = context__.vals_r("pri_rr_diag_asy_vs_sym_b");
            pos__ = 0;
            pri_rr_diag_asy_vs_sym_b = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_rr_diag_asy_vs_sym_b", pri_rr_diag_asy_vs_sym_b, 0);
            current_statement_begin__ = 184;
            context__.validate_dims("data initialization", "pri_rr_diag_sym_vs_sev_a", "double", context__.to_vec());
            pri_rr_diag_sym_vs_sev_a = double(0);
            vals_r__ = context__.vals_r("pri_rr_diag_sym_vs_sev_a");
            pos__ = 0;
            pri_rr_diag_sym_vs_sev_a = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_rr_diag_sym_vs_sev_a", pri_rr_diag_sym_vs_sev_a, 0);
            current_statement_begin__ = 185;
            context__.validate_dims("data initialization", "pri_rr_diag_sym_vs_sev_b", "double", context__.to_vec());
            pri_rr_diag_sym_vs_sev_b = double(0);
            vals_r__ = context__.vals_r("pri_rr_diag_sym_vs_sev_b");
            pos__ = 0;
            pri_rr_diag_sym_vs_sev_b = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_rr_diag_sym_vs_sev_b", pri_rr_diag_sym_vs_sev_b, 0);
            current_statement_begin__ = 188;
            context__.validate_dims("data initialization", "pri_p_diag_if_sev_a", "double", context__.to_vec());
            pri_p_diag_if_sev_a = double(0);
            vals_r__ = context__.vals_r("pri_p_diag_if_sev_a");
            pos__ = 0;
            pri_p_diag_if_sev_a = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_p_diag_if_sev_a", pri_p_diag_if_sev_a, 0);
            current_statement_begin__ = 189;
            context__.validate_dims("data initialization", "pri_p_diag_if_sev_b", "double", context__.to_vec());
            pri_p_diag_if_sev_b = double(0);
            vals_r__ = context__.vals_r("pri_p_diag_if_sev_b");
            pos__ = 0;
            pri_p_diag_if_sev_b = vals_r__[pos__++];
            check_greater_or_equal(function__, "pri_p_diag_if_sev_b", pri_p_diag_if_sev_b, 0);
            current_statement_begin__ = 193;
            context__.validate_dims("data initialization", "scale_dx_delay_sym_a", "double", context__.to_vec());
            scale_dx_delay_sym_a = double(0);
            vals_r__ = context__.vals_r("scale_dx_delay_sym_a");
            pos__ = 0;
            scale_dx_delay_sym_a = vals_r__[pos__++];
            check_greater_or_equal(function__, "scale_dx_delay_sym_a", scale_dx_delay_sym_a, 0);
            current_statement_begin__ = 194;
            context__.validate_dims("data initialization", "scale_dx_delay_sym_b", "double", context__.to_vec());
            scale_dx_delay_sym_b = double(0);
            vals_r__ = context__.vals_r("scale_dx_delay_sym_b");
            pos__ = 0;
            scale_dx_delay_sym_b = vals_r__[pos__++];
            check_greater_or_equal(function__, "scale_dx_delay_sym_b", scale_dx_delay_sym_b, 0);
            current_statement_begin__ = 195;
            context__.validate_dims("data initialization", "scale_dx_delay_sev_a", "double", context__.to_vec());
            scale_dx_delay_sev_a = double(0);
            vals_r__ = context__.vals_r("scale_dx_delay_sev_a");
            pos__ = 0;
            scale_dx_delay_sev_a = vals_r__[pos__++];
            check_greater_or_equal(function__, "scale_dx_delay_sev_a", scale_dx_delay_sev_a, 0);
            current_statement_begin__ = 196;
            context__.validate_dims("data initialization", "scale_dx_delay_sev_b", "double", context__.to_vec());
            scale_dx_delay_sev_b = double(0);
            vals_r__ = context__.vals_r("scale_dx_delay_sev_b");
            pos__ = 0;
            scale_dx_delay_sev_b = vals_r__[pos__++];
            check_greater_or_equal(function__, "scale_dx_delay_sev_b", scale_dx_delay_sev_b, 0);
            // initialize transformed data variables
            current_statement_begin__ = 207;
            N_weeks_tot = int(0);
            stan::math::fill(N_weeks_tot, std::numeric_limits<int>::min());
            current_statement_begin__ = 213;
            validate_non_negative_index("obs_cas_mvs", "N_weeks", N_weeks);
            obs_cas_mvs = std::vector<int>(N_weeks, int(0));
            stan::math::fill(obs_cas_mvs, std::numeric_limits<int>::min());
            current_statement_begin__ = 214;
            validate_non_negative_index("obs_die_mvs", "N_weeks", N_weeks);
            obs_die_mvs = std::vector<int>(N_weeks, int(0));
            stan::math::fill(obs_die_mvs, std::numeric_limits<int>::min());
            current_statement_begin__ = 215;
            validate_non_negative_index("obs_hosp_mvs", "N_weeks", N_weeks);
            obs_hosp_mvs = std::vector<int>(N_weeks, int(0));
            stan::math::fill(obs_hosp_mvs, std::numeric_limits<int>::min());
            current_statement_begin__ = 218;
            validate_non_negative_index("inf_prg_delay_rv", "Max_delay", Max_delay);
            inf_prg_delay_rv = Eigen::Matrix<double, Eigen::Dynamic, 1>(Max_delay);
            stan::math::fill(inf_prg_delay_rv, DUMMY_VAR__);
            current_statement_begin__ = 219;
            validate_non_negative_index("asy_rec_delay_rv", "Max_delay", Max_delay);
            asy_rec_delay_rv = Eigen::Matrix<double, Eigen::Dynamic, 1>(Max_delay);
            stan::math::fill(asy_rec_delay_rv, DUMMY_VAR__);
            current_statement_begin__ = 220;
            validate_non_negative_index("sym_prg_delay_rv", "Max_delay", Max_delay);
            sym_prg_delay_rv = Eigen::Matrix<double, Eigen::Dynamic, 1>(Max_delay);
            stan::math::fill(sym_prg_delay_rv, DUMMY_VAR__);
            current_statement_begin__ = 221;
            validate_non_negative_index("sev_prg_delay_rv", "Max_delay", Max_delay);
            sev_prg_delay_rv = Eigen::Matrix<double, Eigen::Dynamic, 1>(Max_delay);
            stan::math::fill(sev_prg_delay_rv, DUMMY_VAR__);
            current_statement_begin__ = 224;
            validate_non_negative_index("cas_rep_delay_rv", "Max_delay", Max_delay);
            cas_rep_delay_rv = Eigen::Matrix<double, Eigen::Dynamic, 1>(Max_delay);
            stan::math::fill(cas_rep_delay_rv, DUMMY_VAR__);
            current_statement_begin__ = 225;
            validate_non_negative_index("die_rep_delay_rv", "Max_delay", Max_delay);
            die_rep_delay_rv = Eigen::Matrix<double, Eigen::Dynamic, 1>(Max_delay);
            stan::math::fill(die_rep_delay_rv, DUMMY_VAR__);
            current_statement_begin__ = 230;
            validate_non_negative_index("cas_cum_report_delay_rv", "(N_weeks + N_weeks_before)", (N_weeks + N_weeks_before));
            cas_cum_report_delay_rv = Eigen::Matrix<double, Eigen::Dynamic, 1>((N_weeks + N_weeks_before));
            stan::math::fill(cas_cum_report_delay_rv, DUMMY_VAR__);
            current_statement_begin__ = 231;
            validate_non_negative_index("die_cum_report_delay_rv", "(N_weeks + N_weeks_before)", (N_weeks + N_weeks_before));
            die_cum_report_delay_rv = Eigen::Matrix<double, Eigen::Dynamic, 1>((N_weeks + N_weeks_before));
            stan::math::fill(die_cum_report_delay_rv, DUMMY_VAR__);
            current_statement_begin__ = 236;
            validate_non_negative_index("idx1", "(N_weeks + N_weeks_before)", (N_weeks + N_weeks_before));
            idx1 = std::vector<int>((N_weeks + N_weeks_before), int(0));
            stan::math::fill(idx1, std::numeric_limits<int>::min());
            current_statement_begin__ = 237;
            validate_non_negative_index("idx2", "(N_weeks + N_weeks_before)", (N_weeks + N_weeks_before));
            idx2 = std::vector<int>((N_weeks + N_weeks_before), int(0));
            stan::math::fill(idx2, std::numeric_limits<int>::min());
            current_statement_begin__ = 238;
            validate_non_negative_index("idx3", "(N_weeks + N_weeks_before)", (N_weeks + N_weeks_before));
            idx3 = Eigen::Matrix<double, Eigen::Dynamic, 1>((N_weeks + N_weeks_before));
            stan::math::fill(idx3, DUMMY_VAR__);
            current_statement_begin__ = 239;
            validate_non_negative_index("idx4", "(N_weeks + N_weeks_before)", (N_weeks + N_weeks_before));
            idx4 = Eigen::Matrix<double, Eigen::Dynamic, 1>((N_weeks + N_weeks_before));
            stan::math::fill(idx4, DUMMY_VAR__);
            current_statement_begin__ = 240;
            validate_non_negative_index("full_vax", "(N_weeks + N_weeks_before)", (N_weeks + N_weeks_before));
            full_vax = Eigen::Matrix<double, Eigen::Dynamic, 1>((N_weeks + N_weeks_before));
            stan::math::fill(full_vax, DUMMY_VAR__);
            current_statement_begin__ = 241;
            validate_non_negative_index("full_boost", "(N_weeks + N_weeks_before)", (N_weeks + N_weeks_before));
            full_boost = Eigen::Matrix<double, Eigen::Dynamic, 1>((N_weeks + N_weeks_before));
            stan::math::fill(full_boost, DUMMY_VAR__);
            // execute transformed data statements
            current_statement_begin__ = 246;
            stan::math::assign(N_weeks_tot, (N_weeks + N_weeks_before));
            current_statement_begin__ = 247;
            stan::model::assign(full_vax, 
                        stan::model::cons_list(stan::model::index_min_max(1, N_weeks_before), stan::model::nil_index_list()), 
                        rep_vector(0.0, N_weeks_before), 
                        "assigning variable full_vax");
            current_statement_begin__ = 248;
            stan::model::assign(full_vax, 
                        stan::model::cons_list(stan::model::index_min_max((N_weeks_before + 1), N_weeks_tot), stan::model::nil_index_list()), 
                        obs_vax, 
                        "assigning variable full_vax");
            current_statement_begin__ = 249;
            stan::model::assign(full_boost, 
                        stan::model::cons_list(stan::model::index_min_max(1, N_weeks_before), stan::model::nil_index_list()), 
                        rep_vector(0.0, N_weeks_before), 
                        "assigning variable full_boost");
            current_statement_begin__ = 250;
            stan::model::assign(full_boost, 
                        stan::model::cons_list(stan::model::index_min_max((N_weeks_before + 1), N_weeks_tot), stan::model::nil_index_list()), 
                        obs_boost, 
                        "assigning variable full_boost");
            current_statement_begin__ = 254;
            for (int i = 1; i <= N_weeks_tot; ++i) {
                current_statement_begin__ = 255;
                if (as_bool(logical_gt((i - Max_delay), 0))) {
                    current_statement_begin__ = 256;
                    stan::model::assign(idx1, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                ((i - Max_delay) + 1), 
                                "assigning variable idx1");
                    current_statement_begin__ = 257;
                    stan::model::assign(idx2, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                1, 
                                "assigning variable idx2");
                } else {
                    current_statement_begin__ = 259;
                    stan::model::assign(idx1, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                1, 
                                "assigning variable idx1");
                    current_statement_begin__ = 260;
                    stan::model::assign(idx2, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                ((Max_delay - i) + 1), 
                                "assigning variable idx2");
                }
                current_statement_begin__ = 264;
                if (as_bool(logical_lt(i, (N_weeks_tot - 1)))) {
                    current_statement_begin__ = 265;
                    stan::model::assign(idx3, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                ((N_weeks_tot - 1) - i), 
                                "assigning variable idx3");
                } else {
                    current_statement_begin__ = 267;
                    stan::model::assign(idx3, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                1, 
                                "assigning variable idx3");
                }
                current_statement_begin__ = 270;
                if (as_bool(logical_lt(i, (N_weeks_start_omicron + N_weeks_before)))) {
                    current_statement_begin__ = 271;
                    stan::model::assign(idx4, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                0, 
                                "assigning variable idx4");
                } else {
                    current_statement_begin__ = 273;
                    if (as_bool(logical_gt(i, ((N_weeks_start_omicron + N_weeks_before) + N_weeks_transition)))) {
                        current_statement_begin__ = 274;
                        stan::model::assign(idx4, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                    0, 
                                    "assigning variable idx4");
                    } else {
                        current_statement_begin__ = 278;
                        stan::model::assign(idx4, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                    ((i - (N_weeks_start_omicron + N_weeks_before)) + 1.0), 
                                    "assigning variable idx4");
                    }
                }
            }
            current_statement_begin__ = 294;
            for (int i = 1; i <= N_weeks; ++i) {
                current_statement_begin__ = 295;
                stan::model::assign(obs_cas_mvs, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            get_base1(obs_cas, i, "obs_cas", 1), 
                            "assigning variable obs_cas_mvs");
                current_statement_begin__ = 296;
                stan::model::assign(obs_hosp_mvs, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            get_base1(obs_hosp, i, "obs_hosp", 1), 
                            "assigning variable obs_hosp_mvs");
                current_statement_begin__ = 297;
                stan::model::assign(obs_die_mvs, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            get_base1(obs_die, i, "obs_die", 1), 
                            "assigning variable obs_die_mvs");
            }
            current_statement_begin__ = 303;
            for (int i = 1; i <= Max_delay; ++i) {
                current_statement_begin__ = 304;
                stan::model::assign(inf_prg_delay_rv, 
                            stan::model::cons_list(stan::model::index_uni(((1 + Max_delay) - i)), stan::model::nil_index_list()), 
                            (gamma_cdf(i, inf_prg_delay_shap, inf_prg_delay_rate) - gamma_cdf((i - 1), inf_prg_delay_shap, inf_prg_delay_rate)), 
                            "assigning variable inf_prg_delay_rv");
                current_statement_begin__ = 308;
                stan::model::assign(asy_rec_delay_rv, 
                            stan::model::cons_list(stan::model::index_uni(((1 + Max_delay) - i)), stan::model::nil_index_list()), 
                            (gamma_cdf(i, asy_rec_delay_shap, (asy_rec_delay_rate * 2)) - gamma_cdf((i - 1), asy_rec_delay_shap, (asy_rec_delay_rate * 2))), 
                            "assigning variable asy_rec_delay_rv");
                current_statement_begin__ = 314;
                stan::model::assign(sym_prg_delay_rv, 
                            stan::model::cons_list(stan::model::index_uni(((1 + Max_delay) - i)), stan::model::nil_index_list()), 
                            (gamma_cdf(i, sym_prg_delay_shap, sym_prg_delay_rate) - gamma_cdf((i - 1), sym_prg_delay_shap, sym_prg_delay_rate)), 
                            "assigning variable sym_prg_delay_rv");
                current_statement_begin__ = 318;
                stan::model::assign(sev_prg_delay_rv, 
                            stan::model::cons_list(stan::model::index_uni(((1 + Max_delay) - i)), stan::model::nil_index_list()), 
                            (gamma_cdf(i, sev_prg_delay_shap, sev_prg_delay_rate) - gamma_cdf((i - 1), sev_prg_delay_shap, sev_prg_delay_rate)), 
                            "assigning variable sev_prg_delay_rv");
            }
            current_statement_begin__ = 325;
            for (int i = 1; i <= Max_delay; ++i) {
                current_statement_begin__ = 326;
                stan::model::assign(cas_rep_delay_rv, 
                            stan::model::cons_list(stan::model::index_uni(((1 + Max_delay) - i)), stan::model::nil_index_list()), 
                            (gamma_cdf(i, cas_rep_delay_shap, cas_rep_delay_rate) - gamma_cdf((i - 1), cas_rep_delay_shap, cas_rep_delay_rate)), 
                            "assigning variable cas_rep_delay_rv");
                current_statement_begin__ = 330;
                stan::model::assign(die_rep_delay_rv, 
                            stan::model::cons_list(stan::model::index_uni(((1 + Max_delay) - i)), stan::model::nil_index_list()), 
                            (gamma_cdf(i, die_rep_delay_shap, die_rep_delay_rate) - gamma_cdf((i - 1), die_rep_delay_shap, die_rep_delay_rate)), 
                            "assigning variable die_rep_delay_rv");
            }
            current_statement_begin__ = 336;
            stan::math::assign(inf_prg_delay_rv, divide(inf_prg_delay_rv, sum(inf_prg_delay_rv)));
            current_statement_begin__ = 337;
            stan::math::assign(asy_rec_delay_rv, divide(asy_rec_delay_rv, sum(asy_rec_delay_rv)));
            current_statement_begin__ = 338;
            stan::math::assign(sym_prg_delay_rv, divide(sym_prg_delay_rv, sum(sym_prg_delay_rv)));
            current_statement_begin__ = 339;
            stan::math::assign(sev_prg_delay_rv, divide(sev_prg_delay_rv, sum(sev_prg_delay_rv)));
            current_statement_begin__ = 340;
            stan::math::assign(cas_rep_delay_rv, divide(cas_rep_delay_rv, sum(cas_rep_delay_rv)));
            current_statement_begin__ = 341;
            stan::math::assign(die_rep_delay_rv, divide(die_rep_delay_rv, sum(die_rep_delay_rv)));
            current_statement_begin__ = 353;
            for (int i = 1; i <= N_weeks_tot; ++i) {
                current_statement_begin__ = 354;
                if (as_bool(logical_lt(i, Max_delay))) {
                    current_statement_begin__ = 355;
                    stan::model::assign(cas_cum_report_delay_rv, 
                                stan::model::cons_list(stan::model::index_uni(((1 + N_weeks_tot) - i)), stan::model::nil_index_list()), 
                                gamma_cdf(i, cas_rep_delay_shap, cas_rep_delay_rate), 
                                "assigning variable cas_cum_report_delay_rv");
                    current_statement_begin__ = 356;
                    stan::model::assign(die_cum_report_delay_rv, 
                                stan::model::cons_list(stan::model::index_uni(((1 + N_weeks_tot) - i)), stan::model::nil_index_list()), 
                                gamma_cdf(i, die_rep_delay_shap, die_rep_delay_rate), 
                                "assigning variable die_cum_report_delay_rv");
                } else {
                    current_statement_begin__ = 358;
                    stan::model::assign(cas_cum_report_delay_rv, 
                                stan::model::cons_list(stan::model::index_uni(((1 + N_weeks_tot) - i)), stan::model::nil_index_list()), 
                                1.0, 
                                "assigning variable cas_cum_report_delay_rv");
                    current_statement_begin__ = 359;
                    stan::model::assign(die_cum_report_delay_rv, 
                                stan::model::cons_list(stan::model::index_uni(((1 + N_weeks_tot) - i)), stan::model::nil_index_list()), 
                                1.0, 
                                "assigning variable die_cum_report_delay_rv");
                }
            }
            // validate transformed data
            current_statement_begin__ = 213;
            size_t obs_cas_mvs_i_0_max__ = N_weeks;
            for (size_t i_0__ = 0; i_0__ < obs_cas_mvs_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "obs_cas_mvs[i_0__]", obs_cas_mvs[i_0__], 0);
            }
            current_statement_begin__ = 214;
            size_t obs_die_mvs_i_0_max__ = N_weeks;
            for (size_t i_0__ = 0; i_0__ < obs_die_mvs_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "obs_die_mvs[i_0__]", obs_die_mvs[i_0__], 0);
            }
            current_statement_begin__ = 215;
            size_t obs_hosp_mvs_i_0_max__ = N_weeks;
            for (size_t i_0__ = 0; i_0__ < obs_hosp_mvs_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "obs_hosp_mvs[i_0__]", obs_hosp_mvs[i_0__], 0);
            }
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 367;
            num_params_r__ += 1;
            current_statement_begin__ = 369;
            num_params_r__ += 1;
            current_statement_begin__ = 370;
            num_params_r__ += 1;
            current_statement_begin__ = 372;
            validate_non_negative_index("spl_par_rt", "N_spl_par_rt", N_spl_par_rt);
            num_params_r__ += N_spl_par_rt;
            current_statement_begin__ = 376;
            num_params_r__ += 1;
            current_statement_begin__ = 377;
            num_params_r__ += 1;
            current_statement_begin__ = 378;
            num_params_r__ += 1;
            current_statement_begin__ = 379;
            num_params_r__ += 1;
            current_statement_begin__ = 380;
            num_params_r__ += 1;
            current_statement_begin__ = 381;
            num_params_r__ += 1;
            current_statement_begin__ = 385;
            num_params_r__ += 1;
            current_statement_begin__ = 386;
            num_params_r__ += 1;
            current_statement_begin__ = 388;
            num_params_r__ += 1;
            current_statement_begin__ = 389;
            num_params_r__ += 1;
            current_statement_begin__ = 390;
            validate_non_negative_index("spl_par_sym_dx", "N_spl_par_dx", N_spl_par_dx);
            num_params_r__ += N_spl_par_dx;
            current_statement_begin__ = 394;
            num_params_r__ += 1;
            current_statement_begin__ = 395;
            num_params_r__ += 1;
            current_statement_begin__ = 396;
            num_params_r__ += 1;
            current_statement_begin__ = 399;
            validate_non_negative_index("prob_vac", "3", 3);
            num_params_r__ += (3 - 1);
            current_statement_begin__ = 400;
            validate_non_negative_index("prob_vac2", "2", 2);
            num_params_r__ += (2 - 1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_stan_program_default() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 367;
        if (!(context__.contains_r("log_infections_0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable log_infections_0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("log_infections_0");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "log_infections_0", "double", context__.to_vec());
        double log_infections_0(0);
        log_infections_0 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(log_infections_0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable log_infections_0: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 369;
        if (!(context__.contains_r("serial_i")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable serial_i missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("serial_i");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "serial_i", "double", context__.to_vec());
        double serial_i(0);
        serial_i = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(serial_i);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable serial_i: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 370;
        if (!(context__.contains_r("serial_i_postO")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable serial_i_postO missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("serial_i_postO");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "serial_i_postO", "double", context__.to_vec());
        double serial_i_postO(0);
        serial_i_postO = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(serial_i_postO);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable serial_i_postO: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 372;
        if (!(context__.contains_r("spl_par_rt")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable spl_par_rt missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("spl_par_rt");
        pos__ = 0U;
        validate_non_negative_index("spl_par_rt", "N_spl_par_rt", N_spl_par_rt);
        context__.validate_dims("parameter initialization", "spl_par_rt", "vector_d", context__.to_vec(N_spl_par_rt));
        Eigen::Matrix<double, Eigen::Dynamic, 1> spl_par_rt(N_spl_par_rt);
        size_t spl_par_rt_j_1_max__ = N_spl_par_rt;
        for (size_t j_1__ = 0; j_1__ < spl_par_rt_j_1_max__; ++j_1__) {
            spl_par_rt(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(spl_par_rt);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable spl_par_rt: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 376;
        if (!(context__.contains_r("p_sym_if_inf")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable p_sym_if_inf missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("p_sym_if_inf");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "p_sym_if_inf", "double", context__.to_vec());
        double p_sym_if_inf(0);
        p_sym_if_inf = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, p_sym_if_inf);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable p_sym_if_inf: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 377;
        if (!(context__.contains_r("p_sym_if_inf_postO")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable p_sym_if_inf_postO missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("p_sym_if_inf_postO");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "p_sym_if_inf_postO", "double", context__.to_vec());
        double p_sym_if_inf_postO(0);
        p_sym_if_inf_postO = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, p_sym_if_inf_postO);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable p_sym_if_inf_postO: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 378;
        if (!(context__.contains_r("p_sev_if_sym")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable p_sev_if_sym missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("p_sev_if_sym");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "p_sev_if_sym", "double", context__.to_vec());
        double p_sev_if_sym(0);
        p_sev_if_sym = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, p_sev_if_sym);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable p_sev_if_sym: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 379;
        if (!(context__.contains_r("p_sev_if_sym_postO")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable p_sev_if_sym_postO missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("p_sev_if_sym_postO");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "p_sev_if_sym_postO", "double", context__.to_vec());
        double p_sev_if_sym_postO(0);
        p_sev_if_sym_postO = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, p_sev_if_sym_postO);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable p_sev_if_sym_postO: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 380;
        if (!(context__.contains_r("p_die_if_sev")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable p_die_if_sev missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("p_die_if_sev");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "p_die_if_sev", "double", context__.to_vec());
        double p_die_if_sev(0);
        p_die_if_sev = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, p_die_if_sev);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable p_die_if_sev: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 381;
        if (!(context__.contains_r("ifr_decl_OR")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable ifr_decl_OR missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("ifr_decl_OR");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "ifr_decl_OR", "double", context__.to_vec());
        double ifr_decl_OR(0);
        ifr_decl_OR = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, ifr_decl_OR);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable ifr_decl_OR: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 385;
        if (!(context__.contains_r("scale_dx_delay_sym")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable scale_dx_delay_sym missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("scale_dx_delay_sym");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "scale_dx_delay_sym", "double", context__.to_vec());
        double scale_dx_delay_sym(0);
        scale_dx_delay_sym = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, scale_dx_delay_sym);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable scale_dx_delay_sym: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 386;
        if (!(context__.contains_r("scale_dx_delay_sev")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable scale_dx_delay_sev missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("scale_dx_delay_sev");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "scale_dx_delay_sev", "double", context__.to_vec());
        double scale_dx_delay_sev(0);
        scale_dx_delay_sev = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, scale_dx_delay_sev);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable scale_dx_delay_sev: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 388;
        if (!(context__.contains_r("rr_diag_asy_vs_sym")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable rr_diag_asy_vs_sym missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("rr_diag_asy_vs_sym");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "rr_diag_asy_vs_sym", "double", context__.to_vec());
        double rr_diag_asy_vs_sym(0);
        rr_diag_asy_vs_sym = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, rr_diag_asy_vs_sym);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable rr_diag_asy_vs_sym: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 389;
        if (!(context__.contains_r("p_diag_if_sev")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable p_diag_if_sev missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("p_diag_if_sev");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "p_diag_if_sev", "double", context__.to_vec());
        double p_diag_if_sev(0);
        p_diag_if_sev = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, p_diag_if_sev);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable p_diag_if_sev: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 390;
        if (!(context__.contains_r("spl_par_sym_dx")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable spl_par_sym_dx missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("spl_par_sym_dx");
        pos__ = 0U;
        validate_non_negative_index("spl_par_sym_dx", "N_spl_par_dx", N_spl_par_dx);
        context__.validate_dims("parameter initialization", "spl_par_sym_dx", "vector_d", context__.to_vec(N_spl_par_dx));
        Eigen::Matrix<double, Eigen::Dynamic, 1> spl_par_sym_dx(N_spl_par_dx);
        size_t spl_par_sym_dx_j_1_max__ = N_spl_par_dx;
        for (size_t j_1__ = 0; j_1__ < spl_par_sym_dx_j_1_max__; ++j_1__) {
            spl_par_sym_dx(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(0, 1, spl_par_sym_dx);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable spl_par_sym_dx: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 394;
        if (!(context__.contains_r("inv_sqrt_phi_c")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable inv_sqrt_phi_c missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("inv_sqrt_phi_c");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "inv_sqrt_phi_c", "double", context__.to_vec());
        double inv_sqrt_phi_c(0);
        inv_sqrt_phi_c = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, inv_sqrt_phi_c);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable inv_sqrt_phi_c: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 395;
        if (!(context__.contains_r("inv_sqrt_phi_d")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable inv_sqrt_phi_d missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("inv_sqrt_phi_d");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "inv_sqrt_phi_d", "double", context__.to_vec());
        double inv_sqrt_phi_d(0);
        inv_sqrt_phi_d = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, inv_sqrt_phi_d);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable inv_sqrt_phi_d: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 396;
        if (!(context__.contains_r("inv_sqrt_phi_h")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable inv_sqrt_phi_h missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("inv_sqrt_phi_h");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "inv_sqrt_phi_h", "double", context__.to_vec());
        double inv_sqrt_phi_h(0);
        inv_sqrt_phi_h = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, inv_sqrt_phi_h);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable inv_sqrt_phi_h: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 399;
        if (!(context__.contains_r("prob_vac")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable prob_vac missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("prob_vac");
        pos__ = 0U;
        validate_non_negative_index("prob_vac", "3", 3);
        context__.validate_dims("parameter initialization", "prob_vac", "vector_d", context__.to_vec(3));
        Eigen::Matrix<double, Eigen::Dynamic, 1> prob_vac(3);
        size_t prob_vac_j_1_max__ = 3;
        for (size_t j_1__ = 0; j_1__ < prob_vac_j_1_max__; ++j_1__) {
            prob_vac(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.simplex_unconstrain(prob_vac);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable prob_vac: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 400;
        if (!(context__.contains_r("prob_vac2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable prob_vac2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("prob_vac2");
        pos__ = 0U;
        validate_non_negative_index("prob_vac2", "2", 2);
        context__.validate_dims("parameter initialization", "prob_vac2", "vector_d", context__.to_vec(2));
        Eigen::Matrix<double, Eigen::Dynamic, 1> prob_vac2(2);
        size_t prob_vac2_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < prob_vac2_j_1_max__; ++j_1__) {
            prob_vac2(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.simplex_unconstrain(prob_vac2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable prob_vac2: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 367;
            local_scalar_t__ log_infections_0;
            (void) log_infections_0;  // dummy to suppress unused var warning
            if (jacobian__)
                log_infections_0 = in__.scalar_constrain(lp__);
            else
                log_infections_0 = in__.scalar_constrain();
            current_statement_begin__ = 369;
            local_scalar_t__ serial_i;
            (void) serial_i;  // dummy to suppress unused var warning
            if (jacobian__)
                serial_i = in__.scalar_constrain(lp__);
            else
                serial_i = in__.scalar_constrain();
            current_statement_begin__ = 370;
            local_scalar_t__ serial_i_postO;
            (void) serial_i_postO;  // dummy to suppress unused var warning
            if (jacobian__)
                serial_i_postO = in__.scalar_constrain(lp__);
            else
                serial_i_postO = in__.scalar_constrain();
            current_statement_begin__ = 372;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> spl_par_rt;
            (void) spl_par_rt;  // dummy to suppress unused var warning
            if (jacobian__)
                spl_par_rt = in__.vector_constrain(N_spl_par_rt, lp__);
            else
                spl_par_rt = in__.vector_constrain(N_spl_par_rt);
            current_statement_begin__ = 376;
            local_scalar_t__ p_sym_if_inf;
            (void) p_sym_if_inf;  // dummy to suppress unused var warning
            if (jacobian__)
                p_sym_if_inf = in__.scalar_lub_constrain(0, 1, lp__);
            else
                p_sym_if_inf = in__.scalar_lub_constrain(0, 1);
            current_statement_begin__ = 377;
            local_scalar_t__ p_sym_if_inf_postO;
            (void) p_sym_if_inf_postO;  // dummy to suppress unused var warning
            if (jacobian__)
                p_sym_if_inf_postO = in__.scalar_lub_constrain(0, 1, lp__);
            else
                p_sym_if_inf_postO = in__.scalar_lub_constrain(0, 1);
            current_statement_begin__ = 378;
            local_scalar_t__ p_sev_if_sym;
            (void) p_sev_if_sym;  // dummy to suppress unused var warning
            if (jacobian__)
                p_sev_if_sym = in__.scalar_lub_constrain(0, 1, lp__);
            else
                p_sev_if_sym = in__.scalar_lub_constrain(0, 1);
            current_statement_begin__ = 379;
            local_scalar_t__ p_sev_if_sym_postO;
            (void) p_sev_if_sym_postO;  // dummy to suppress unused var warning
            if (jacobian__)
                p_sev_if_sym_postO = in__.scalar_lub_constrain(0, 1, lp__);
            else
                p_sev_if_sym_postO = in__.scalar_lub_constrain(0, 1);
            current_statement_begin__ = 380;
            local_scalar_t__ p_die_if_sev;
            (void) p_die_if_sev;  // dummy to suppress unused var warning
            if (jacobian__)
                p_die_if_sev = in__.scalar_lub_constrain(0, 1, lp__);
            else
                p_die_if_sev = in__.scalar_lub_constrain(0, 1);
            current_statement_begin__ = 381;
            local_scalar_t__ ifr_decl_OR;
            (void) ifr_decl_OR;  // dummy to suppress unused var warning
            if (jacobian__)
                ifr_decl_OR = in__.scalar_lb_constrain(0, lp__);
            else
                ifr_decl_OR = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 385;
            local_scalar_t__ scale_dx_delay_sym;
            (void) scale_dx_delay_sym;  // dummy to suppress unused var warning
            if (jacobian__)
                scale_dx_delay_sym = in__.scalar_lub_constrain(0, 1, lp__);
            else
                scale_dx_delay_sym = in__.scalar_lub_constrain(0, 1);
            current_statement_begin__ = 386;
            local_scalar_t__ scale_dx_delay_sev;
            (void) scale_dx_delay_sev;  // dummy to suppress unused var warning
            if (jacobian__)
                scale_dx_delay_sev = in__.scalar_lub_constrain(0, 1, lp__);
            else
                scale_dx_delay_sev = in__.scalar_lub_constrain(0, 1);
            current_statement_begin__ = 388;
            local_scalar_t__ rr_diag_asy_vs_sym;
            (void) rr_diag_asy_vs_sym;  // dummy to suppress unused var warning
            if (jacobian__)
                rr_diag_asy_vs_sym = in__.scalar_lub_constrain(0, 1, lp__);
            else
                rr_diag_asy_vs_sym = in__.scalar_lub_constrain(0, 1);
            current_statement_begin__ = 389;
            local_scalar_t__ p_diag_if_sev;
            (void) p_diag_if_sev;  // dummy to suppress unused var warning
            if (jacobian__)
                p_diag_if_sev = in__.scalar_lub_constrain(0, 1, lp__);
            else
                p_diag_if_sev = in__.scalar_lub_constrain(0, 1);
            current_statement_begin__ = 390;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> spl_par_sym_dx;
            (void) spl_par_sym_dx;  // dummy to suppress unused var warning
            if (jacobian__)
                spl_par_sym_dx = in__.vector_lub_constrain(0, 1, N_spl_par_dx, lp__);
            else
                spl_par_sym_dx = in__.vector_lub_constrain(0, 1, N_spl_par_dx);
            current_statement_begin__ = 394;
            local_scalar_t__ inv_sqrt_phi_c;
            (void) inv_sqrt_phi_c;  // dummy to suppress unused var warning
            if (jacobian__)
                inv_sqrt_phi_c = in__.scalar_lb_constrain(0, lp__);
            else
                inv_sqrt_phi_c = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 395;
            local_scalar_t__ inv_sqrt_phi_d;
            (void) inv_sqrt_phi_d;  // dummy to suppress unused var warning
            if (jacobian__)
                inv_sqrt_phi_d = in__.scalar_lb_constrain(0, lp__);
            else
                inv_sqrt_phi_d = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 396;
            local_scalar_t__ inv_sqrt_phi_h;
            (void) inv_sqrt_phi_h;  // dummy to suppress unused var warning
            if (jacobian__)
                inv_sqrt_phi_h = in__.scalar_lb_constrain(0, lp__);
            else
                inv_sqrt_phi_h = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 399;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> prob_vac;
            (void) prob_vac;  // dummy to suppress unused var warning
            if (jacobian__)
                prob_vac = in__.simplex_constrain(3, lp__);
            else
                prob_vac = in__.simplex_constrain(3);
            current_statement_begin__ = 400;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> prob_vac2;
            (void) prob_vac2;  // dummy to suppress unused var warning
            if (jacobian__)
                prob_vac2 = in__.simplex_constrain(2, lp__);
            else
                prob_vac2 = in__.simplex_constrain(2);
            // transformed parameters
            current_statement_begin__ = 406;
            validate_non_negative_index("serial_i_vec", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> serial_i_vec(N_weeks_tot);
            stan::math::initialize(serial_i_vec, DUMMY_VAR__);
            stan::math::fill(serial_i_vec, DUMMY_VAR__);
            current_statement_begin__ = 407;
            validate_non_negative_index("log_infections", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_infections(N_weeks_tot);
            stan::math::initialize(log_infections, DUMMY_VAR__);
            stan::math::fill(log_infections, DUMMY_VAR__);
            current_statement_begin__ = 408;
            validate_non_negative_index("deriv1_log_infections", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> deriv1_log_infections(N_weeks_tot);
            stan::math::initialize(deriv1_log_infections, DUMMY_VAR__);
            stan::math::fill(deriv1_log_infections, DUMMY_VAR__);
            current_statement_begin__ = 409;
            validate_non_negative_index("infections", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> infections(N_weeks_tot);
            stan::math::initialize(infections, DUMMY_VAR__);
            stan::math::fill(infections, DUMMY_VAR__);
            current_statement_begin__ = 410;
            validate_non_negative_index("vax_only", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> vax_only(N_weeks_tot);
            stan::math::initialize(vax_only, DUMMY_VAR__);
            stan::math::fill(vax_only, DUMMY_VAR__);
            current_statement_begin__ = 411;
            validate_non_negative_index("vax_only_cum", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> vax_only_cum(N_weeks_tot);
            stan::math::initialize(vax_only_cum, DUMMY_VAR__);
            stan::math::fill(vax_only_cum, DUMMY_VAR__);
            current_statement_begin__ = 412;
            validate_non_negative_index("exposed", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> exposed(N_weeks_tot);
            stan::math::initialize(exposed, DUMMY_VAR__);
            stan::math::fill(exposed, DUMMY_VAR__);
            current_statement_begin__ = 413;
            validate_non_negative_index("exposed_cumulative", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> exposed_cumulative(N_weeks_tot);
            stan::math::initialize(exposed_cumulative, DUMMY_VAR__);
            stan::math::fill(exposed_cumulative, DUMMY_VAR__);
            current_statement_begin__ = 414;
            validate_non_negative_index("infections_premiere", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> infections_premiere(N_weeks_tot);
            stan::math::initialize(infections_premiere, DUMMY_VAR__);
            stan::math::fill(infections_premiere, DUMMY_VAR__);
            current_statement_begin__ = 415;
            validate_non_negative_index("num_uninf", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> num_uninf(N_weeks_tot);
            stan::math::initialize(num_uninf, DUMMY_VAR__);
            stan::math::fill(num_uninf, DUMMY_VAR__);
            current_statement_begin__ = 416;
            validate_non_negative_index("p_first", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> p_first(N_weeks_tot);
            stan::math::initialize(p_first, DUMMY_VAR__);
            stan::math::fill(p_first, DUMMY_VAR__);
            current_statement_begin__ = 417;
            validate_non_negative_index("p_boost", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> p_boost(N_weeks_tot);
            stan::math::initialize(p_boost, DUMMY_VAR__);
            stan::math::fill(p_boost, DUMMY_VAR__);
            current_statement_begin__ = 418;
            validate_non_negative_index("p_reinf", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> p_reinf(N_weeks_tot);
            stan::math::initialize(p_reinf, DUMMY_VAR__);
            stan::math::fill(p_reinf, DUMMY_VAR__);
            current_statement_begin__ = 419;
            local_scalar_t__ ever_inf;
            (void) ever_inf;  // dummy to suppress unused var warning
            stan::math::initialize(ever_inf, DUMMY_VAR__);
            stan::math::fill(ever_inf, DUMMY_VAR__);
            current_statement_begin__ = 420;
            validate_non_negative_index("susceptible_prvl", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> susceptible_prvl(N_weeks_tot);
            stan::math::initialize(susceptible_prvl, DUMMY_VAR__);
            stan::math::fill(susceptible_prvl, DUMMY_VAR__);
            current_statement_begin__ = 421;
            validate_non_negative_index("effective_protection_prvl", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> effective_protection_prvl(N_weeks_tot);
            stan::math::initialize(effective_protection_prvl, DUMMY_VAR__);
            stan::math::fill(effective_protection_prvl, DUMMY_VAR__);
            current_statement_begin__ = 422;
            validate_non_negative_index("severe_protection", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> severe_protection(N_weeks_tot);
            stan::math::initialize(severe_protection, DUMMY_VAR__);
            stan::math::fill(severe_protection, DUMMY_VAR__);
            current_statement_begin__ = 423;
            validate_non_negative_index("population_protection_inf", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> population_protection_inf(N_weeks_tot);
            stan::math::initialize(population_protection_inf, DUMMY_VAR__);
            stan::math::fill(population_protection_inf, DUMMY_VAR__);
            current_statement_begin__ = 424;
            validate_non_negative_index("population_protection_vax", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> population_protection_vax(N_weeks_tot);
            stan::math::initialize(population_protection_vax, DUMMY_VAR__);
            stan::math::fill(population_protection_vax, DUMMY_VAR__);
            current_statement_begin__ = 425;
            validate_non_negative_index("population_protection_boost", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> population_protection_boost(N_weeks_tot);
            stan::math::initialize(population_protection_boost, DUMMY_VAR__);
            stan::math::fill(population_protection_boost, DUMMY_VAR__);
            current_statement_begin__ = 426;
            validate_non_negative_index("population_protection_sev_inf", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> population_protection_sev_inf(N_weeks_tot);
            stan::math::initialize(population_protection_sev_inf, DUMMY_VAR__);
            stan::math::fill(population_protection_sev_inf, DUMMY_VAR__);
            current_statement_begin__ = 427;
            validate_non_negative_index("population_protection_sev_vax", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> population_protection_sev_vax(N_weeks_tot);
            stan::math::initialize(population_protection_sev_vax, DUMMY_VAR__);
            stan::math::fill(population_protection_sev_vax, DUMMY_VAR__);
            current_statement_begin__ = 428;
            validate_non_negative_index("population_protection_sev_boost", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> population_protection_sev_boost(N_weeks_tot);
            stan::math::initialize(population_protection_sev_boost, DUMMY_VAR__);
            stan::math::fill(population_protection_sev_boost, DUMMY_VAR__);
            current_statement_begin__ = 433;
            validate_non_negative_index("logRt0", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> logRt0(N_weeks_tot);
            stan::math::initialize(logRt0, DUMMY_VAR__);
            stan::math::fill(logRt0, DUMMY_VAR__);
            current_statement_begin__ = 434;
            validate_non_negative_index("logRt", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> logRt(N_weeks_tot);
            stan::math::initialize(logRt, DUMMY_VAR__);
            stan::math::fill(logRt, DUMMY_VAR__);
            current_statement_begin__ = 435;
            validate_non_negative_index("r_t", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> r_t(N_weeks_tot);
            stan::math::initialize(r_t, DUMMY_VAR__);
            stan::math::fill(r_t, DUMMY_VAR__);
            current_statement_begin__ = 436;
            validate_non_negative_index("r_0", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> r_0(N_weeks_tot);
            stan::math::initialize(r_0, DUMMY_VAR__);
            stan::math::fill(r_0, DUMMY_VAR__);
            current_statement_begin__ = 437;
            validate_non_negative_index("deriv1_spl_par_rt", "(N_spl_par_rt - 1)", (N_spl_par_rt - 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> deriv1_spl_par_rt((N_spl_par_rt - 1));
            stan::math::initialize(deriv1_spl_par_rt, DUMMY_VAR__);
            stan::math::fill(deriv1_spl_par_rt, DUMMY_VAR__);
            current_statement_begin__ = 438;
            validate_non_negative_index("deriv2_spl_par_rt", "(N_spl_par_rt - 2)", (N_spl_par_rt - 2));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> deriv2_spl_par_rt((N_spl_par_rt - 2));
            stan::math::initialize(deriv2_spl_par_rt, DUMMY_VAR__);
            stan::math::fill(deriv2_spl_par_rt, DUMMY_VAR__);
            current_statement_begin__ = 441;
            validate_non_negative_index("p_die_if_sevt", "N_ifr_adj", N_ifr_adj);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> p_die_if_sevt(N_ifr_adj);
            stan::math::initialize(p_die_if_sevt, DUMMY_VAR__);
            stan::math::fill(p_die_if_sevt, DUMMY_VAR__);
            current_statement_begin__ = 442;
            validate_non_negative_index("p_sev_if_symt", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> p_sev_if_symt(N_weeks_tot);
            stan::math::initialize(p_sev_if_symt, DUMMY_VAR__);
            stan::math::fill(p_sev_if_symt, DUMMY_VAR__);
            current_statement_begin__ = 443;
            validate_non_negative_index("p_sym_if_inft", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> p_sym_if_inft(N_weeks_tot);
            stan::math::initialize(p_sym_if_inft, DUMMY_VAR__);
            stan::math::fill(p_sym_if_inft, DUMMY_VAR__);
            current_statement_begin__ = 447;
            validate_non_negative_index("rr_diag_sym_vs_sev", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> rr_diag_sym_vs_sev(N_weeks_tot);
            stan::math::initialize(rr_diag_sym_vs_sev, DUMMY_VAR__);
            stan::math::fill(rr_diag_sym_vs_sev, DUMMY_VAR__);
            current_statement_begin__ = 448;
            validate_non_negative_index("p_diag_if_asy", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> p_diag_if_asy(N_weeks_tot);
            stan::math::initialize(p_diag_if_asy, DUMMY_VAR__);
            stan::math::fill(p_diag_if_asy, DUMMY_VAR__);
            current_statement_begin__ = 449;
            validate_non_negative_index("p_diag_if_sym", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> p_diag_if_sym(N_weeks_tot);
            stan::math::initialize(p_diag_if_sym, DUMMY_VAR__);
            stan::math::fill(p_diag_if_sym, DUMMY_VAR__);
            current_statement_begin__ = 453;
            validate_non_negative_index("sym_diag_delay_rv", "Max_delay", Max_delay);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sym_diag_delay_rv(Max_delay);
            stan::math::initialize(sym_diag_delay_rv, DUMMY_VAR__);
            stan::math::fill(sym_diag_delay_rv, DUMMY_VAR__);
            current_statement_begin__ = 454;
            validate_non_negative_index("sev_diag_delay_rv", "Max_delay", Max_delay);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sev_diag_delay_rv(Max_delay);
            stan::math::initialize(sev_diag_delay_rv, DUMMY_VAR__);
            stan::math::fill(sev_diag_delay_rv, DUMMY_VAR__);
            current_statement_begin__ = 458;
            local_scalar_t__ p_die_if_inf;
            (void) p_die_if_inf;  // dummy to suppress unused var warning
            stan::math::initialize(p_die_if_inf, DUMMY_VAR__);
            stan::math::fill(p_die_if_inf, DUMMY_VAR__);
            current_statement_begin__ = 459;
            local_scalar_t__ p_die_if_inf_postO;
            (void) p_die_if_inf_postO;  // dummy to suppress unused var warning
            stan::math::initialize(p_die_if_inf_postO, DUMMY_VAR__);
            stan::math::fill(p_die_if_inf_postO, DUMMY_VAR__);
            current_statement_begin__ = 462;
            validate_non_negative_index("symptomatic", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> symptomatic(N_weeks_tot);
            stan::math::initialize(symptomatic, DUMMY_VAR__);
            stan::math::fill(symptomatic, DUMMY_VAR__);
            current_statement_begin__ = 463;
            validate_non_negative_index("severe", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> severe(N_weeks_tot);
            stan::math::initialize(severe, DUMMY_VAR__);
            stan::math::fill(severe, DUMMY_VAR__);
            current_statement_begin__ = 464;
            validate_non_negative_index("deaths", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> deaths(N_weeks_tot);
            stan::math::initialize(deaths, DUMMY_VAR__);
            stan::math::fill(deaths, DUMMY_VAR__);
            current_statement_begin__ = 467;
            validate_non_negative_index("new_asy_dx", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> new_asy_dx(N_weeks_tot);
            stan::math::initialize(new_asy_dx, DUMMY_VAR__);
            stan::math::fill(new_asy_dx, DUMMY_VAR__);
            current_statement_begin__ = 468;
            validate_non_negative_index("diagnoses_of_symptomatic", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> diagnoses_of_symptomatic(N_weeks_tot);
            stan::math::initialize(diagnoses_of_symptomatic, DUMMY_VAR__);
            stan::math::fill(diagnoses_of_symptomatic, DUMMY_VAR__);
            current_statement_begin__ = 469;
            validate_non_negative_index("diagnoses_severe", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> diagnoses_severe(N_weeks_tot);
            stan::math::initialize(diagnoses_severe, DUMMY_VAR__);
            stan::math::fill(diagnoses_severe, DUMMY_VAR__);
            current_statement_begin__ = 472;
            validate_non_negative_index("dx_sym_sev", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> dx_sym_sev(N_weeks_tot);
            stan::math::initialize(dx_sym_sev, DUMMY_VAR__);
            stan::math::fill(dx_sym_sev, DUMMY_VAR__);
            current_statement_begin__ = 473;
            validate_non_negative_index("dx_sym_die", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> dx_sym_die(N_weeks_tot);
            stan::math::initialize(dx_sym_die, DUMMY_VAR__);
            stan::math::fill(dx_sym_die, DUMMY_VAR__);
            current_statement_begin__ = 474;
            validate_non_negative_index("dx_sev_die", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> dx_sev_die(N_weeks_tot);
            stan::math::initialize(dx_sev_die, DUMMY_VAR__);
            stan::math::fill(dx_sev_die, DUMMY_VAR__);
            current_statement_begin__ = 477;
            validate_non_negative_index("diagnoses", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> diagnoses(N_weeks_tot);
            stan::math::initialize(diagnoses, DUMMY_VAR__);
            stan::math::fill(diagnoses, DUMMY_VAR__);
            current_statement_begin__ = 478;
            validate_non_negative_index("deaths_of_diagnosed", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> deaths_of_diagnosed(N_weeks_tot);
            stan::math::initialize(deaths_of_diagnosed, DUMMY_VAR__);
            stan::math::fill(deaths_of_diagnosed, DUMMY_VAR__);
            current_statement_begin__ = 482;
            validate_non_negative_index("fitted_cases", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> fitted_cases(N_weeks_tot);
            stan::math::initialize(fitted_cases, DUMMY_VAR__);
            stan::math::fill(fitted_cases, DUMMY_VAR__);
            current_statement_begin__ = 483;
            validate_non_negative_index("fitted_deaths", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> fitted_deaths(N_weeks_tot);
            stan::math::initialize(fitted_deaths, DUMMY_VAR__);
            stan::math::fill(fitted_deaths, DUMMY_VAR__);
            current_statement_begin__ = 484;
            validate_non_negative_index("fitted_hospitalizations", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> fitted_hospitalizations(N_weeks_tot);
            stan::math::initialize(fitted_hospitalizations, DUMMY_VAR__);
            stan::math::fill(fitted_hospitalizations, DUMMY_VAR__);
            current_statement_begin__ = 486;
            validate_non_negative_index("fitted_cases_mvs", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> fitted_cases_mvs(N_weeks_tot);
            stan::math::initialize(fitted_cases_mvs, DUMMY_VAR__);
            stan::math::fill(fitted_cases_mvs, DUMMY_VAR__);
            current_statement_begin__ = 487;
            validate_non_negative_index("fitted_deaths_mvs", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> fitted_deaths_mvs(N_weeks_tot);
            stan::math::initialize(fitted_deaths_mvs, DUMMY_VAR__);
            stan::math::fill(fitted_deaths_mvs, DUMMY_VAR__);
            current_statement_begin__ = 488;
            validate_non_negative_index("fitted_hospitalizations_mvs", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> fitted_hospitalizations_mvs(N_weeks_tot);
            stan::math::initialize(fitted_hospitalizations_mvs, DUMMY_VAR__);
            stan::math::fill(fitted_hospitalizations_mvs, DUMMY_VAR__);
            current_statement_begin__ = 493;
            local_scalar_t__ phi_cas;
            (void) phi_cas;  // dummy to suppress unused var warning
            stan::math::initialize(phi_cas, DUMMY_VAR__);
            stan::math::fill(phi_cas, DUMMY_VAR__);
            current_statement_begin__ = 494;
            local_scalar_t__ phi_die;
            (void) phi_die;  // dummy to suppress unused var warning
            stan::math::initialize(phi_die, DUMMY_VAR__);
            stan::math::fill(phi_die, DUMMY_VAR__);
            current_statement_begin__ = 495;
            local_scalar_t__ phi_hosp;
            (void) phi_hosp;  // dummy to suppress unused var warning
            stan::math::initialize(phi_hosp, DUMMY_VAR__);
            stan::math::fill(phi_hosp, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 499;
            stan::math::assign(p_die_if_sevt, multiply((p_die_if_sev * ifr_adj_fixed), add(1, multiply(ifr_adj, ifr_decl_OR))));
            current_statement_begin__ = 501;
            for (int i = 1; i <= N_weeks_tot; ++i) {
                current_statement_begin__ = 502;
                stan::model::assign(p_die_if_sevt, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(p_die_if_sevt, i, "p_die_if_sevt", 1) * pow(get_base1(ifr_vac_adj, i, "ifr_vac_adj", 1), get_base1(prob_vac, 1, "prob_vac", 1))), 
                            "assigning variable p_die_if_sevt");
                current_statement_begin__ = 503;
                stan::model::assign(p_sev_if_symt, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (p_sev_if_sym * pow(get_base1(ifr_vac_adj, i, "ifr_vac_adj", 1), get_base1(prob_vac, 2, "prob_vac", 1))), 
                            "assigning variable p_sev_if_symt");
                current_statement_begin__ = 505;
                if (as_bool(logical_lt(i, (N_weeks_start_omicron + N_weeks_before)))) {
                    current_statement_begin__ = 506;
                    stan::model::assign(p_sym_if_inft, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (p_sym_if_inf * pow(get_base1(ifr_vac_adj, i, "ifr_vac_adj", 1), get_base1(prob_vac, 3, "prob_vac", 1))), 
                                "assigning variable p_sym_if_inft");
                    current_statement_begin__ = 507;
                    stan::model::assign(serial_i_vec, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                serial_i, 
                                "assigning variable serial_i_vec");
                } else {
                    current_statement_begin__ = 510;
                    if (as_bool(logical_lte(i, ((N_weeks_start_omicron + N_weeks_before) + N_weeks_transition)))) {
                        current_statement_begin__ = 512;
                        stan::model::assign(p_sym_if_inft, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                    ((p_sym_if_inf - (((p_sym_if_inf - p_sym_if_inf_postO) / (N_weeks_transition + 2)) * get_base1(idx4, i, "idx4", 1))) * pow(get_base1(ifr_vac_adj, i, "ifr_vac_adj", 1), get_base1(prob_vac, 3, "prob_vac", 1))), 
                                    "assigning variable p_sym_if_inft");
                        current_statement_begin__ = 513;
                        stan::model::assign(serial_i_vec, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                    (serial_i - (((serial_i - serial_i_postO) / (N_weeks_transition + 2)) * get_base1(idx4, i, "idx4", 1))), 
                                    "assigning variable serial_i_vec");
                    } else {
                        current_statement_begin__ = 516;
                        stan::model::assign(p_sym_if_inft, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                    (p_sym_if_inf_postO * pow(get_base1(ifr_vac_adj, i, "ifr_vac_adj", 1), get_base1(prob_vac, 3, "prob_vac", 1))), 
                                    "assigning variable p_sym_if_inft");
                        current_statement_begin__ = 517;
                        stan::model::assign(serial_i_vec, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                    serial_i_postO, 
                                    "assigning variable serial_i_vec");
                    }
                }
            }
            current_statement_begin__ = 525;
            stan::math::assign(rr_diag_sym_vs_sev, inv_logit(multiply(spl_basis_dx, logit(spl_par_sym_dx))));
            current_statement_begin__ = 528;
            stan::math::assign(p_diag_if_sym, multiply(p_diag_if_sev, rr_diag_sym_vs_sev));
            current_statement_begin__ = 529;
            stan::math::assign(p_diag_if_asy, multiply(p_diag_if_sym, rr_diag_asy_vs_sym));
            {
            current_statement_begin__ = 540;
            validate_non_negative_index("sym_delay_gammas", "(Max_delay + 1)", (Max_delay + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sym_delay_gammas((Max_delay + 1));
            stan::math::initialize(sym_delay_gammas, DUMMY_VAR__);
            stan::math::fill(sym_delay_gammas, DUMMY_VAR__);
            current_statement_begin__ = 541;
            validate_non_negative_index("sev_delay_gammas", "(Max_delay + 1)", (Max_delay + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sev_delay_gammas((Max_delay + 1));
            stan::math::initialize(sev_delay_gammas, DUMMY_VAR__);
            stan::math::fill(sev_delay_gammas, DUMMY_VAR__);
            current_statement_begin__ = 542;
            for (int i = 1; i <= (Max_delay + 1); ++i) {
                current_statement_begin__ = 543;
                stan::model::assign(sym_delay_gammas, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            gamma_cdf((i - 1), sym_prg_delay_shap, (sym_prg_delay_rate / scale_dx_delay_sym)), 
                            "assigning variable sym_delay_gammas");
                current_statement_begin__ = 544;
                stan::model::assign(sev_delay_gammas, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            gamma_cdf((i - 1), sev_prg_delay_shap, (sev_prg_delay_rate / scale_dx_delay_sev)), 
                            "assigning variable sev_delay_gammas");
            }
            current_statement_begin__ = 550;
            for (int i = 1; i <= Max_delay; ++i) {
                current_statement_begin__ = 551;
                stan::model::assign(sym_diag_delay_rv, 
                            stan::model::cons_list(stan::model::index_uni(((1 + Max_delay) - i)), stan::model::nil_index_list()), 
                            (get_base1(sym_delay_gammas, (i + 1), "sym_delay_gammas", 1) - get_base1(sym_delay_gammas, i, "sym_delay_gammas", 1)), 
                            "assigning variable sym_diag_delay_rv");
                current_statement_begin__ = 552;
                stan::model::assign(sev_diag_delay_rv, 
                            stan::model::cons_list(stan::model::index_uni(((1 + Max_delay) - i)), stan::model::nil_index_list()), 
                            (get_base1(sev_delay_gammas, (i + 1), "sev_delay_gammas", 1) - get_base1(sev_delay_gammas, i, "sev_delay_gammas", 1)), 
                            "assigning variable sev_diag_delay_rv");
            }
            }
            current_statement_begin__ = 561;
            stan::math::assign(p_die_if_inf, ((p_sym_if_inf * p_sev_if_sym) * p_die_if_sev));
            current_statement_begin__ = 562;
            stan::math::assign(p_die_if_inf_postO, ((p_sym_if_inf_postO * p_sev_if_sym) * p_die_if_sev));
            current_statement_begin__ = 573;
            stan::math::assign(logRt0, multiply(spl_basis_rt, spl_par_rt));
            current_statement_begin__ = 574;
            stan::model::assign(susceptible_prvl, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        pop_size, 
                        "assigning variable susceptible_prvl");
            current_statement_begin__ = 575;
            stan::model::assign(num_uninf, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        pop_size, 
                        "assigning variable num_uninf");
            current_statement_begin__ = 576;
            stan::model::assign(effective_protection_prvl, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        0.0, 
                        "assigning variable effective_protection_prvl");
            current_statement_begin__ = 577;
            stan::model::assign(severe_protection, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        0.0, 
                        "assigning variable severe_protection");
            current_statement_begin__ = 581;
            for (int i = 1; i <= N_weeks_tot; ++i) {
                current_statement_begin__ = 582;
                if (as_bool(logical_gt(i, 1))) {
                    current_statement_begin__ = 583;
                    stan::model::assign(susceptible_prvl, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (pop_size - get_base1(effective_protection_prvl, i, "effective_protection_prvl", 1)), 
                                "assigning variable susceptible_prvl");
                }
                current_statement_begin__ = 586;
                if (as_bool(logical_lt(get_base1(susceptible_prvl, i, "susceptible_prvl", 1), 1))) {
                    current_statement_begin__ = 588;
                    stan::model::assign(susceptible_prvl, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                1, 
                                "assigning variable susceptible_prvl");
                }
                current_statement_begin__ = 590;
                if (as_bool(logical_eq(i, 1))) {
                    current_statement_begin__ = 591;
                    stan::model::assign(logRt, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                get_base1(logRt0, i, "logRt0", 1), 
                                "assigning variable logRt");
                } else {
                    current_statement_begin__ = 593;
                    stan::model::assign(logRt, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (get_base1(logRt0, i, "logRt0", 1) + stan::math::log((get_base1(susceptible_prvl, i, "susceptible_prvl", 1) / pop_size))), 
                                "assigning variable logRt");
                }
                current_statement_begin__ = 596;
                stan::model::assign(deriv1_log_infections, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(logRt, i, "logRt", 1) / get_base1(serial_i_vec, i, "serial_i_vec", 1)), 
                            "assigning variable deriv1_log_infections");
                current_statement_begin__ = 597;
                stan::model::assign(log_infections, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (sum(stan::model::rvalue(deriv1_log_infections, stan::model::cons_list(stan::model::index_min_max(1, i), stan::model::nil_index_list()), "deriv1_log_infections")) + log_infections_0), 
                            "assigning variable log_infections");
                current_statement_begin__ = 598;
                stan::model::assign(infections, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::exp(get_base1(log_infections, i, "log_infections", 1)), 
                            "assigning variable infections");
                current_statement_begin__ = 600;
                if (as_bool(logical_gt(i, 1))) {
                    current_statement_begin__ = 601;
                    stan::model::assign(p_first, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (get_base1(num_uninf, i, "num_uninf", 1) / ((get_base1(num_uninf, i, "num_uninf", 1) + sum(stan::model::rvalue(infections, stan::model::cons_list(stan::model::index_min_max(1, i), stan::model::nil_index_list()), "infections"))) - get_base1(population_protection_inf, (i - 1), "population_protection_inf", 1))), 
                                "assigning variable p_first");
                } else {
                    current_statement_begin__ = 603;
                    stan::model::assign(p_first, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (get_base1(num_uninf, 1, "num_uninf", 1) / (get_base1(num_uninf, 1, "num_uninf", 1) + get_base1(infections, 1, "infections", 1))), 
                                "assigning variable p_first");
                }
                current_statement_begin__ = 606;
                stan::model::assign(infections_premiere, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(infections, i, "infections", 1) * get_base1(p_first, i, "p_first", 1)), 
                            "assigning variable infections_premiere");
                current_statement_begin__ = 607;
                stan::model::assign(exposed_cumulative, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (calcExposed(OR, (sum(stan::model::rvalue(infections_premiere, stan::model::cons_list(stan::model::index_min_max(1, i), stan::model::nil_index_list()), "infections_premiere")) / pop_size), (sum(stan::model::rvalue(full_vax, stan::model::cons_list(stan::model::index_min_max(1, i), stan::model::nil_index_list()), "full_vax")) / pop_size), pstream__) * pop_size), 
                            "assigning variable exposed_cumulative");
                current_statement_begin__ = 609;
                stan::model::assign(vax_only_cum, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(exposed_cumulative, i, "exposed_cumulative", 1) - sum(stan::model::rvalue(infections_premiere, stan::model::cons_list(stan::model::index_min_max(1, i), stan::model::nil_index_list()), "infections_premiere"))), 
                            "assigning variable vax_only_cum");
                current_statement_begin__ = 611;
                if (as_bool(logical_eq(i, 1))) {
                    current_statement_begin__ = 612;
                    stan::model::assign(exposed, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                get_base1(exposed_cumulative, i, "exposed_cumulative", 1), 
                                "assigning variable exposed");
                    current_statement_begin__ = 613;
                    stan::model::assign(vax_only, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                get_base1(vax_only_cum, i, "vax_only_cum", 1), 
                                "assigning variable vax_only");
                } else {
                    current_statement_begin__ = 615;
                    stan::model::assign(exposed, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (get_base1(exposed_cumulative, i, "exposed_cumulative", 1) - get_base1(exposed_cumulative, (i - 1), "exposed_cumulative", 1)), 
                                "assigning variable exposed");
                    current_statement_begin__ = 616;
                    stan::model::assign(vax_only, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (get_base1(vax_only_cum, i, "vax_only_cum", 1) - get_base1(vax_only_cum, (i - 1), "vax_only_cum", 1)), 
                                "assigning variable vax_only");
                }
                current_statement_begin__ = 618;
                if (as_bool(logical_lt(get_base1(vax_only, i, "vax_only", 1), 0))) {
                    current_statement_begin__ = 620;
                    stan::model::assign(vax_only, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                0, 
                                "assigning variable vax_only");
                }
                current_statement_begin__ = 622;
                if (as_bool(logical_lt(i, N_weeks_tot))) {
                    current_statement_begin__ = 623;
                    stan::model::assign(num_uninf, 
                                stan::model::cons_list(stan::model::index_uni((i + 1)), stan::model::nil_index_list()), 
                                (get_base1(num_uninf, i, "num_uninf", 1) - get_base1(infections_premiere, i, "infections_premiere", 1)), 
                                "assigning variable num_uninf");
                }
                current_statement_begin__ = 625;
                if (as_bool(logical_lt(get_base1(num_uninf, i, "num_uninf", 1), 0))) {
                    current_statement_begin__ = 625;
                    std::stringstream errmsg_stream__;
                    errmsg_stream__ << "WARNING num_uninf invalid";
                    throw std::domain_error(errmsg_stream__.str());
                }
                current_statement_begin__ = 627;
                if (as_bool(logical_eq(sum(stan::model::rvalue(full_vax, stan::model::cons_list(stan::model::index_min_max(1, i), stan::model::nil_index_list()), "full_vax")), 0.0))) {
                    current_statement_begin__ = 628;
                    stan::model::assign(p_boost, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                1.0, 
                                "assigning variable p_boost");
                } else {
                    current_statement_begin__ = 630;
                    stan::model::assign(p_boost, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (1.0 - (sum(stan::model::rvalue(full_boost, stan::model::cons_list(stan::model::index_min_max(1, i), stan::model::nil_index_list()), "full_boost")) / (sum(stan::model::rvalue(full_vax, stan::model::cons_list(stan::model::index_min_max(1, i), stan::model::nil_index_list()), "full_vax")) + sum(stan::model::rvalue(full_boost, stan::model::cons_list(stan::model::index_min_max(1, i), stan::model::nil_index_list()), "full_boost"))))), 
                                "assigning variable p_boost");
                }
                current_statement_begin__ = 632;
                stan::model::assign(p_reinf, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (1.0 - ((sum(stan::model::rvalue(infections, stan::model::cons_list(stan::model::index_min_max(1, i), stan::model::nil_index_list()), "infections")) - sum(stan::model::rvalue(infections_premiere, stan::model::cons_list(stan::model::index_min_max(1, i), stan::model::nil_index_list()), "infections_premiere"))) / sum(stan::model::rvalue(infections, stan::model::cons_list(stan::model::index_min_max(1, i), stan::model::nil_index_list()), "infections")))), 
                            "assigning variable p_reinf");
                current_statement_begin__ = 633;
                if (as_bool(logical_lt(i, (N_weeks_start_omicron + N_weeks_before)))) {
                    current_statement_begin__ = 635;
                    stan::model::assign(population_protection_inf, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (sum(elt_multiply(stan::model::rvalue(infections, stan::model::cons_list(stan::model::index_min_max(1, i), stan::model::nil_index_list()), "infections"), stan::math::exp(multiply(multiply(-(.008), stan::model::rvalue(idx3, stan::model::cons_list(stan::model::index_min_max(((N_weeks_tot - i) + 1), N_weeks_tot), stan::model::nil_index_list()), "idx3")), waning_scalar)))) * get_base1(p_reinf, i, "p_reinf", 1)), 
                                "assigning variable population_protection_inf");
                    current_statement_begin__ = 637;
                    stan::model::assign(population_protection_vax, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (sum(elt_multiply(multiply(add(stan::model::rvalue(full_vax, stan::model::cons_list(stan::model::index_min_max(1, i), stan::model::nil_index_list()), "full_vax"), stan::model::rvalue(full_boost, stan::model::cons_list(stan::model::index_min_max(1, i), stan::model::nil_index_list()), "full_boost")), vax_boost_scalar), stan::math::exp(multiply(multiply(-(.008), stan::model::rvalue(idx3, stan::model::cons_list(stan::model::index_min_max(((N_weeks_tot - i) + 1), N_weeks_tot), stan::model::nil_index_list()), "idx3")), waning_scalar)))) * get_base1(p_boost, i, "p_boost", 1)), 
                                "assigning variable population_protection_vax");
                    current_statement_begin__ = 642;
                    stan::model::assign(population_protection_sev_inf, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (sum(elt_multiply(stan::model::rvalue(infections, stan::model::cons_list(stan::model::index_min_max(1, i), stan::model::nil_index_list()), "infections"), stan::math::exp(multiply(multiply(-(.008), stan::model::rvalue(idx3, stan::model::cons_list(stan::model::index_min_max(((N_weeks_tot - i) + 1), N_weeks_tot), stan::model::nil_index_list()), "idx3")), waning_scalar_sev)))) * get_base1(p_reinf, i, "p_reinf", 1)), 
                                "assigning variable population_protection_sev_inf");
                    current_statement_begin__ = 645;
                    stan::model::assign(population_protection_sev_vax, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (sum(elt_multiply(multiply(add(stan::model::rvalue(full_vax, stan::model::cons_list(stan::model::index_min_max(1, i), stan::model::nil_index_list()), "full_vax"), stan::model::rvalue(full_boost, stan::model::cons_list(stan::model::index_min_max(1, i), stan::model::nil_index_list()), "full_boost")), vax_boost_scalar), stan::math::exp(multiply(multiply(-(.008), stan::model::rvalue(idx3, stan::model::cons_list(stan::model::index_min_max(((N_weeks_tot - i) + 1), N_weeks_tot), stan::model::nil_index_list()), "idx3")), waning_scalar_sev)))) * get_base1(p_boost, i, "p_boost", 1)), 
                                "assigning variable population_protection_sev_vax");
                } else {
                    current_statement_begin__ = 650;
                    if (as_bool(logical_lte(i, ((N_weeks_start_omicron + N_weeks_before) + N_weeks_transition)))) {
                        current_statement_begin__ = 654;
                        stan::model::assign(population_protection_inf, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                    (((sum(elt_multiply(stan::model::rvalue(infections, stan::model::cons_list(stan::model::index_min_max(1, ((N_weeks_start_omicron + N_weeks_before) - 1)), stan::model::nil_index_list()), "infections"), stan::math::exp(multiply(multiply(-(.008), stan::model::rvalue(idx3, stan::model::cons_list(stan::model::index_min_max(((N_weeks_tot - i) + 1), (N_weeks_tot - (i - ((N_weeks_start_omicron + N_weeks_before) - 1)))), stan::model::nil_index_list()), "idx3")), waning_scalar)))) * (1.0 - (((1.0 - omicron_scalar) / (N_weeks_transition + 2)) * get_base1(idx4, i, "idx4", 1)))) + sum(elt_multiply(stan::model::rvalue(infections, stan::model::cons_list(stan::model::index_min_max((N_weeks_before + N_weeks_start_omicron), i), stan::model::nil_index_list()), "infections"), stan::math::exp(multiply(multiply(-(.008), stan::model::rvalue(idx3, stan::model::cons_list(stan::model::index_min_max((((N_weeks_tot - i) + N_weeks_before) + N_weeks_start_omicron), N_weeks_tot), stan::model::nil_index_list()), "idx3")), waning_scalar))))) * get_base1(p_reinf, i, "p_reinf", 1)), 
                                    "assigning variable population_protection_inf");
                        current_statement_begin__ = 658;
                        stan::model::assign(population_protection_vax, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                    (((sum(elt_multiply(add(stan::model::rvalue(full_vax, stan::model::cons_list(stan::model::index_min_max(1, ((N_weeks_start_omicron + N_weeks_before) - 1)), stan::model::nil_index_list()), "full_vax"), stan::model::rvalue(full_boost, stan::model::cons_list(stan::model::index_min_max(1, ((N_weeks_start_omicron + N_weeks_before) - 1)), stan::model::nil_index_list()), "full_boost")), stan::math::exp(multiply(multiply(-(.008), stan::model::rvalue(idx3, stan::model::cons_list(stan::model::index_min_max(((N_weeks_tot - i) + 1), (N_weeks_tot - (i - ((N_weeks_start_omicron + N_weeks_before) - 1)))), stan::model::nil_index_list()), "idx3")), waning_scalar)))) * (1.0 - (((1.0 - omicron_scalar) / (N_weeks_transition + 2)) * get_base1(idx4, i, "idx4", 1)))) + sum(elt_multiply(multiply(add(stan::model::rvalue(full_vax, stan::model::cons_list(stan::model::index_min_max((N_weeks_before + N_weeks_start_omicron), i), stan::model::nil_index_list()), "full_vax"), stan::model::rvalue(full_boost, stan::model::cons_list(stan::model::index_min_max((N_weeks_before + N_weeks_start_omicron), i), stan::model::nil_index_list()), "full_boost")), vax_boost_scalar), stan::math::exp(multiply(multiply(-(.008), stan::model::rvalue(idx3, stan::model::cons_list(stan::model::index_min_max((((N_weeks_tot - i) + N_weeks_before) + N_weeks_start_omicron), N_weeks_tot), stan::model::nil_index_list()), "idx3")), waning_scalar))))) * get_base1(p_boost, i, "p_boost", 1)), 
                                    "assigning variable population_protection_vax");
                        current_statement_begin__ = 662;
                        stan::model::assign(population_protection_sev_inf, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                    (((sum(elt_multiply(stan::model::rvalue(infections, stan::model::cons_list(stan::model::index_min_max(1, ((N_weeks_start_omicron + N_weeks_before) - 1)), stan::model::nil_index_list()), "infections"), stan::math::exp(multiply(multiply(-(.008), stan::model::rvalue(idx3, stan::model::cons_list(stan::model::index_min_max(((N_weeks_tot - i) + 1), (N_weeks_tot - (i - ((N_weeks_start_omicron + N_weeks_before) - 1)))), stan::model::nil_index_list()), "idx3")), waning_scalar_sev)))) * (1.0 - (((1.0 - omicron_scalar) / (N_weeks_transition + 2)) * get_base1(idx4, i, "idx4", 1)))) + sum(elt_multiply(stan::model::rvalue(infections, stan::model::cons_list(stan::model::index_min_max((N_weeks_before + N_weeks_start_omicron), i), stan::model::nil_index_list()), "infections"), stan::math::exp(multiply(multiply(-(.008), stan::model::rvalue(idx3, stan::model::cons_list(stan::model::index_min_max((((N_weeks_tot - i) + N_weeks_before) + N_weeks_start_omicron), N_weeks_tot), stan::model::nil_index_list()), "idx3")), waning_scalar_sev))))) * get_base1(p_reinf, i, "p_reinf", 1)), 
                                    "assigning variable population_protection_sev_inf");
                        current_statement_begin__ = 667;
                        stan::model::assign(population_protection_sev_vax, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                    ((sum(elt_multiply(add(stan::model::rvalue(full_vax, stan::model::cons_list(stan::model::index_min_max(1, ((N_weeks_start_omicron + N_weeks_before) - 1)), stan::model::nil_index_list()), "full_vax"), stan::model::rvalue(full_boost, stan::model::cons_list(stan::model::index_min_max(1, ((N_weeks_start_omicron + N_weeks_before) - 1)), stan::model::nil_index_list()), "full_boost")), stan::math::exp(multiply(multiply(-(.008), stan::model::rvalue(idx3, stan::model::cons_list(stan::model::index_min_max(((N_weeks_tot - i) + 1), (N_weeks_tot - (i - ((N_weeks_start_omicron + N_weeks_before) - 1)))), stan::model::nil_index_list()), "idx3")), waning_scalar_sev)))) * (1.0 - (((1.0 - omicron_scalar) / (N_weeks_transition + 2)) * get_base1(idx4, i, "idx4", 1)))) + (sum(elt_multiply(multiply(add(stan::model::rvalue(full_vax, stan::model::cons_list(stan::model::index_min_max((N_weeks_before + N_weeks_start_omicron), i), stan::model::nil_index_list()), "full_vax"), stan::model::rvalue(full_boost, stan::model::cons_list(stan::model::index_min_max((N_weeks_before + N_weeks_start_omicron), i), stan::model::nil_index_list()), "full_boost")), vax_boost_scalar), stan::math::exp(multiply(multiply(-(.008), stan::model::rvalue(idx3, stan::model::cons_list(stan::model::index_min_max((((N_weeks_tot - i) + N_weeks_before) + N_weeks_start_omicron), N_weeks_tot), stan::model::nil_index_list()), "idx3")), waning_scalar_sev)))) * get_base1(p_boost, i, "p_boost", 1))), 
                                    "assigning variable population_protection_sev_vax");
                    } else {
                        current_statement_begin__ = 676;
                        stan::model::assign(population_protection_inf, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                    (((sum(elt_multiply(stan::model::rvalue(infections, stan::model::cons_list(stan::model::index_min_max(1, ((N_weeks_start_omicron + N_weeks_before) - 1)), stan::model::nil_index_list()), "infections"), stan::math::exp(multiply(multiply(-(.008), stan::model::rvalue(idx3, stan::model::cons_list(stan::model::index_min_max(((N_weeks_tot - i) + 1), (N_weeks_tot - (i - ((N_weeks_start_omicron + N_weeks_before) - 1)))), stan::model::nil_index_list()), "idx3")), waning_scalar)))) * omicron_scalar) + sum(elt_multiply(stan::model::rvalue(infections, stan::model::cons_list(stan::model::index_min_max((N_weeks_before + N_weeks_start_omicron), i), stan::model::nil_index_list()), "infections"), stan::math::exp(multiply(multiply(-(.008), stan::model::rvalue(idx3, stan::model::cons_list(stan::model::index_min_max((((N_weeks_tot - i) + N_weeks_before) + N_weeks_start_omicron), N_weeks_tot), stan::model::nil_index_list()), "idx3")), waning_scalar))))) * get_base1(p_reinf, i, "p_reinf", 1)), 
                                    "assigning variable population_protection_inf");
                        current_statement_begin__ = 680;
                        stan::model::assign(population_protection_vax, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                    (((sum(elt_multiply(add(stan::model::rvalue(full_vax, stan::model::cons_list(stan::model::index_min_max(1, ((N_weeks_start_omicron + N_weeks_before) - 1)), stan::model::nil_index_list()), "full_vax"), stan::model::rvalue(full_boost, stan::model::cons_list(stan::model::index_min_max(1, ((N_weeks_start_omicron + N_weeks_before) - 1)), stan::model::nil_index_list()), "full_boost")), stan::math::exp(multiply(multiply(-(.008), stan::model::rvalue(idx3, stan::model::cons_list(stan::model::index_min_max(((N_weeks_tot - i) + 1), (N_weeks_tot - (i - ((N_weeks_start_omicron + N_weeks_before) - 1)))), stan::model::nil_index_list()), "idx3")), waning_scalar)))) * omicron_scalar) + sum(elt_multiply(multiply(add(stan::model::rvalue(full_vax, stan::model::cons_list(stan::model::index_min_max((N_weeks_before + N_weeks_start_omicron), i), stan::model::nil_index_list()), "full_vax"), stan::model::rvalue(full_boost, stan::model::cons_list(stan::model::index_min_max((N_weeks_before + N_weeks_start_omicron), i), stan::model::nil_index_list()), "full_boost")), vax_boost_scalar), stan::math::exp(multiply(multiply(-(.008), stan::model::rvalue(idx3, stan::model::cons_list(stan::model::index_min_max((((N_weeks_tot - i) + N_weeks_before) + N_weeks_start_omicron), N_weeks_tot), stan::model::nil_index_list()), "idx3")), waning_scalar))))) * get_base1(p_boost, i, "p_boost", 1)), 
                                    "assigning variable population_protection_vax");
                        current_statement_begin__ = 684;
                        stan::model::assign(population_protection_sev_inf, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                    (((sum(elt_multiply(stan::model::rvalue(infections, stan::model::cons_list(stan::model::index_min_max(1, ((N_weeks_start_omicron + N_weeks_before) - 1)), stan::model::nil_index_list()), "infections"), stan::math::exp(multiply(multiply(-(.008), stan::model::rvalue(idx3, stan::model::cons_list(stan::model::index_min_max(((N_weeks_tot - i) + 1), (N_weeks_tot - (i - ((N_weeks_start_omicron + N_weeks_before) - 1)))), stan::model::nil_index_list()), "idx3")), waning_scalar_sev)))) * omicron_scalar) + sum(elt_multiply(stan::model::rvalue(infections, stan::model::cons_list(stan::model::index_min_max((N_weeks_before + N_weeks_start_omicron), i), stan::model::nil_index_list()), "infections"), stan::math::exp(multiply(multiply(-(.008), stan::model::rvalue(idx3, stan::model::cons_list(stan::model::index_min_max((((N_weeks_tot - i) + N_weeks_before) + N_weeks_start_omicron), N_weeks_tot), stan::model::nil_index_list()), "idx3")), waning_scalar_sev))))) * get_base1(p_reinf, i, "p_reinf", 1)), 
                                    "assigning variable population_protection_sev_inf");
                        current_statement_begin__ = 689;
                        stan::model::assign(population_protection_sev_vax, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                    ((sum(elt_multiply(add(stan::model::rvalue(full_vax, stan::model::cons_list(stan::model::index_min_max(1, ((N_weeks_start_omicron + N_weeks_before) - 1)), stan::model::nil_index_list()), "full_vax"), stan::model::rvalue(full_boost, stan::model::cons_list(stan::model::index_min_max(1, ((N_weeks_start_omicron + N_weeks_before) - 1)), stan::model::nil_index_list()), "full_boost")), stan::math::exp(multiply(multiply(-(.008), stan::model::rvalue(idx3, stan::model::cons_list(stan::model::index_min_max(((N_weeks_tot - i) + 1), (N_weeks_tot - (i - ((N_weeks_start_omicron + N_weeks_before) - 1)))), stan::model::nil_index_list()), "idx3")), waning_scalar_sev)))) * omicron_scalar) + (sum(elt_multiply(multiply(add(stan::model::rvalue(full_vax, stan::model::cons_list(stan::model::index_min_max((N_weeks_before + N_weeks_start_omicron), i), stan::model::nil_index_list()), "full_vax"), stan::model::rvalue(full_boost, stan::model::cons_list(stan::model::index_min_max((N_weeks_before + N_weeks_start_omicron), i), stan::model::nil_index_list()), "full_boost")), vax_boost_scalar), stan::math::exp(multiply(multiply(-(.008), stan::model::rvalue(idx3, stan::model::cons_list(stan::model::index_min_max((((N_weeks_tot - i) + N_weeks_before) + N_weeks_start_omicron), N_weeks_tot), stan::model::nil_index_list()), "idx3")), waning_scalar_sev)))) * get_base1(p_boost, i, "p_boost", 1))), 
                                    "assigning variable population_protection_sev_vax");
                    }
                }
                current_statement_begin__ = 701;
                if (as_bool(logical_lt(i, N_weeks_tot))) {
                    current_statement_begin__ = 703;
                    stan::model::assign(effective_protection_prvl, 
                                stan::model::cons_list(stan::model::index_uni((i + 1)), stan::model::nil_index_list()), 
                                (get_base1(population_protection_inf, i, "population_protection_inf", 1) + get_base1(population_protection_vax, i, "population_protection_vax", 1)), 
                                "assigning variable effective_protection_prvl");
                    current_statement_begin__ = 704;
                    stan::model::assign(severe_protection, 
                                stan::model::cons_list(stan::model::index_uni((i + 1)), stan::model::nil_index_list()), 
                                (get_base1(population_protection_sev_inf, i, "population_protection_sev_inf", 1) + get_base1(population_protection_sev_vax, i, "population_protection_sev_vax", 1)), 
                                "assigning variable severe_protection");
                    current_statement_begin__ = 707;
                    if (as_bool(logical_gt(get_base1(effective_protection_prvl, (i + 1), "effective_protection_prvl", 1), pop_size))) {
                        current_statement_begin__ = 709;
                        stan::model::assign(effective_protection_prvl, 
                                    stan::model::cons_list(stan::model::index_uni((i + 1)), stan::model::nil_index_list()), 
                                    (pop_size - 1), 
                                    "assigning variable effective_protection_prvl");
                    }
                }
            }
            current_statement_begin__ = 716;
            stan::math::assign(r_t, stan::math::exp(logRt));
            current_statement_begin__ = 717;
            stan::math::assign(r_0, stan::math::exp(logRt0));
            current_statement_begin__ = 719;
            stan::model::assign(deriv2_spl_par_rt, 
                        stan::model::cons_list(stan::model::index_min_max(1, (N_spl_par_rt - 2)), stan::model::nil_index_list()), 
                        subtract(subtract(multiply(2, stan::model::rvalue(spl_par_rt, stan::model::cons_list(stan::model::index_min_max(2, (N_spl_par_rt - 1)), stan::model::nil_index_list()), "spl_par_rt")), stan::model::rvalue(spl_par_rt, stan::model::cons_list(stan::model::index_min_max(1, (N_spl_par_rt - 2)), stan::model::nil_index_list()), "spl_par_rt")), stan::model::rvalue(spl_par_rt, stan::model::cons_list(stan::model::index_min_max(3, N_spl_par_rt), stan::model::nil_index_list()), "spl_par_rt")), 
                        "assigning variable deriv2_spl_par_rt");
            current_statement_begin__ = 725;
            stan::model::assign(deriv1_spl_par_rt, 
                        stan::model::cons_list(stan::model::index_min_max(1, (N_spl_par_rt - 1)), stan::model::nil_index_list()), 
                        subtract(stan::model::rvalue(spl_par_rt, stan::model::cons_list(stan::model::index_min_max(2, N_spl_par_rt), stan::model::nil_index_list()), "spl_par_rt"), stan::model::rvalue(spl_par_rt, stan::model::cons_list(stan::model::index_min_max(1, (N_spl_par_rt - 1)), stan::model::nil_index_list()), "spl_par_rt")), 
                        "assigning variable deriv1_spl_par_rt");
            current_statement_begin__ = 737;
            stan::math::assign(symptomatic, elt_multiply(p_sym_if_inft, conv1d(infections, inf_prg_delay_rv, pstream__)));
            current_statement_begin__ = 740;
            stan::math::assign(severe, elt_multiply(p_sev_if_symt, conv1d(symptomatic, sym_prg_delay_rv, pstream__)));
            current_statement_begin__ = 742;
            stan::math::assign(deaths, elt_multiply(stan::model::rvalue(p_die_if_sevt, stan::model::cons_list(stan::model::index_min_max(1, N_weeks_tot), stan::model::nil_index_list()), "p_die_if_sevt"), conv1d(severe, sev_prg_delay_rv, pstream__)));
            current_statement_begin__ = 752;
            stan::math::assign(new_asy_dx, elt_multiply(subtract(1, p_sym_if_inft), conv1d(elt_multiply(infections, p_diag_if_asy), asy_rec_delay_rv, pstream__)));
            current_statement_begin__ = 761;
            stan::math::assign(diagnoses_of_symptomatic, conv1d(elt_multiply(symptomatic, p_diag_if_sym), sym_diag_delay_rv, pstream__));
            current_statement_begin__ = 766;
            stan::math::assign(dx_sym_sev, elt_multiply(p_sev_if_symt, conv1d(elt_multiply(symptomatic, p_diag_if_sym), sym_prg_delay_rv, pstream__)));
            current_statement_begin__ = 772;
            stan::math::assign(dx_sym_die, elt_multiply(stan::model::rvalue(p_die_if_sevt, stan::model::cons_list(stan::model::index_min_max(1, N_weeks_tot), stan::model::nil_index_list()), "p_die_if_sevt"), conv1d(dx_sym_sev, sev_prg_delay_rv, pstream__)));
            current_statement_begin__ = 776;
            stan::math::assign(diagnoses_severe, multiply(p_diag_if_sev, conv1d(subtract(severe, dx_sym_sev), sev_diag_delay_rv, pstream__)));
            current_statement_begin__ = 784;
            stan::math::assign(dx_sev_die, elt_multiply(multiply(p_diag_if_sev, stan::model::rvalue(p_die_if_sevt, stan::model::cons_list(stan::model::index_min_max(1, N_weeks_tot), stan::model::nil_index_list()), "p_die_if_sevt")), conv1d(subtract(severe, dx_sym_sev), sev_prg_delay_rv, pstream__)));
            current_statement_begin__ = 790;
            stan::math::assign(diagnoses, add(add(new_asy_dx, diagnoses_of_symptomatic), diagnoses_severe));
            current_statement_begin__ = 791;
            stan::math::assign(deaths_of_diagnosed, add(dx_sym_die, dx_sev_die));
            current_statement_begin__ = 802;
            if (as_bool(logical_eq(obs_cas_rep, 1))) {
                current_statement_begin__ = 803;
                stan::math::assign(fitted_cases, conv1d(diagnoses, cas_rep_delay_rv, pstream__));
            } else {
                current_statement_begin__ = 805;
                stan::math::assign(fitted_cases, elt_multiply(diagnoses, cas_cum_report_delay_rv));
            }
            current_statement_begin__ = 806;
            stan::math::assign(fitted_hospitalizations, diagnoses_severe);
            current_statement_begin__ = 812;
            if (as_bool(logical_eq(obs_die_rep, 1))) {
                current_statement_begin__ = 813;
                stan::math::assign(fitted_deaths, conv1d(deaths_of_diagnosed, die_rep_delay_rv, pstream__));
            } else {
                current_statement_begin__ = 815;
                stan::math::assign(fitted_deaths, elt_multiply(deaths_of_diagnosed, die_cum_report_delay_rv));
            }
            current_statement_begin__ = 828;
            for (int i = 1; i <= N_weeks_tot; ++i) {
                current_statement_begin__ = 829;
                stan::model::assign(fitted_cases_mvs, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            get_base1(fitted_cases, i, "fitted_cases", 1), 
                            "assigning variable fitted_cases_mvs");
                current_statement_begin__ = 830;
                stan::model::assign(fitted_hospitalizations_mvs, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            get_base1(fitted_hospitalizations, i, "fitted_hospitalizations", 1), 
                            "assigning variable fitted_hospitalizations_mvs");
                current_statement_begin__ = 831;
                stan::model::assign(fitted_deaths_mvs, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            get_base1(fitted_deaths, i, "fitted_deaths", 1), 
                            "assigning variable fitted_deaths_mvs");
            }
            current_statement_begin__ = 835;
            stan::math::assign(phi_cas, pow(inv_sqrt_phi_c, -(2)));
            current_statement_begin__ = 836;
            stan::math::assign(phi_hosp, pow(inv_sqrt_phi_h, -(2)));
            current_statement_begin__ = 837;
            stan::math::assign(phi_die, pow(inv_sqrt_phi_d, -(2)));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 406;
            size_t serial_i_vec_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < serial_i_vec_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(serial_i_vec(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: serial_i_vec" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable serial_i_vec: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 407;
            size_t log_infections_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < log_infections_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(log_infections(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: log_infections" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable log_infections: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 408;
            size_t deriv1_log_infections_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < deriv1_log_infections_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(deriv1_log_infections(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: deriv1_log_infections" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable deriv1_log_infections: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 409;
            size_t infections_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < infections_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(infections(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: infections" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable infections: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 410;
            size_t vax_only_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < vax_only_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(vax_only(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: vax_only" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable vax_only: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 411;
            size_t vax_only_cum_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < vax_only_cum_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(vax_only_cum(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: vax_only_cum" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable vax_only_cum: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 412;
            size_t exposed_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < exposed_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(exposed(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: exposed" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable exposed: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 413;
            size_t exposed_cumulative_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < exposed_cumulative_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(exposed_cumulative(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: exposed_cumulative" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable exposed_cumulative: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 414;
            size_t infections_premiere_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < infections_premiere_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(infections_premiere(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: infections_premiere" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable infections_premiere: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 415;
            size_t num_uninf_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < num_uninf_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(num_uninf(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: num_uninf" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable num_uninf: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 416;
            size_t p_first_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < p_first_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(p_first(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: p_first" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable p_first: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 417;
            size_t p_boost_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < p_boost_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(p_boost(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: p_boost" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable p_boost: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 418;
            size_t p_reinf_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < p_reinf_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(p_reinf(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: p_reinf" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable p_reinf: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 419;
            if (stan::math::is_uninitialized(ever_inf)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: ever_inf";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable ever_inf: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 420;
            size_t susceptible_prvl_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < susceptible_prvl_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(susceptible_prvl(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: susceptible_prvl" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable susceptible_prvl: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 421;
            size_t effective_protection_prvl_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < effective_protection_prvl_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(effective_protection_prvl(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: effective_protection_prvl" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable effective_protection_prvl: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 422;
            size_t severe_protection_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < severe_protection_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(severe_protection(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: severe_protection" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable severe_protection: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 423;
            size_t population_protection_inf_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < population_protection_inf_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(population_protection_inf(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: population_protection_inf" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable population_protection_inf: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 424;
            size_t population_protection_vax_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < population_protection_vax_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(population_protection_vax(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: population_protection_vax" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable population_protection_vax: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 425;
            size_t population_protection_boost_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < population_protection_boost_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(population_protection_boost(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: population_protection_boost" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable population_protection_boost: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 426;
            size_t population_protection_sev_inf_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < population_protection_sev_inf_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(population_protection_sev_inf(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: population_protection_sev_inf" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable population_protection_sev_inf: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 427;
            size_t population_protection_sev_vax_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < population_protection_sev_vax_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(population_protection_sev_vax(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: population_protection_sev_vax" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable population_protection_sev_vax: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 428;
            size_t population_protection_sev_boost_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < population_protection_sev_boost_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(population_protection_sev_boost(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: population_protection_sev_boost" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable population_protection_sev_boost: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 433;
            size_t logRt0_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < logRt0_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(logRt0(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: logRt0" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable logRt0: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 434;
            size_t logRt_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < logRt_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(logRt(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: logRt" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable logRt: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 435;
            size_t r_t_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < r_t_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(r_t(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: r_t" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable r_t: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 436;
            size_t r_0_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < r_0_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(r_0(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: r_0" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable r_0: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 437;
            size_t deriv1_spl_par_rt_j_1_max__ = (N_spl_par_rt - 1);
            for (size_t j_1__ = 0; j_1__ < deriv1_spl_par_rt_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(deriv1_spl_par_rt(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: deriv1_spl_par_rt" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable deriv1_spl_par_rt: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 438;
            size_t deriv2_spl_par_rt_j_1_max__ = (N_spl_par_rt - 2);
            for (size_t j_1__ = 0; j_1__ < deriv2_spl_par_rt_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(deriv2_spl_par_rt(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: deriv2_spl_par_rt" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable deriv2_spl_par_rt: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 441;
            size_t p_die_if_sevt_j_1_max__ = N_ifr_adj;
            for (size_t j_1__ = 0; j_1__ < p_die_if_sevt_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(p_die_if_sevt(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: p_die_if_sevt" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable p_die_if_sevt: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 442;
            size_t p_sev_if_symt_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < p_sev_if_symt_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(p_sev_if_symt(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: p_sev_if_symt" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable p_sev_if_symt: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 443;
            size_t p_sym_if_inft_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < p_sym_if_inft_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(p_sym_if_inft(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: p_sym_if_inft" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable p_sym_if_inft: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 447;
            size_t rr_diag_sym_vs_sev_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < rr_diag_sym_vs_sev_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(rr_diag_sym_vs_sev(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: rr_diag_sym_vs_sev" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable rr_diag_sym_vs_sev: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 448;
            size_t p_diag_if_asy_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < p_diag_if_asy_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(p_diag_if_asy(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: p_diag_if_asy" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable p_diag_if_asy: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 449;
            size_t p_diag_if_sym_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < p_diag_if_sym_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(p_diag_if_sym(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: p_diag_if_sym" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable p_diag_if_sym: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 453;
            size_t sym_diag_delay_rv_j_1_max__ = Max_delay;
            for (size_t j_1__ = 0; j_1__ < sym_diag_delay_rv_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(sym_diag_delay_rv(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: sym_diag_delay_rv" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable sym_diag_delay_rv: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 454;
            size_t sev_diag_delay_rv_j_1_max__ = Max_delay;
            for (size_t j_1__ = 0; j_1__ < sev_diag_delay_rv_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(sev_diag_delay_rv(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: sev_diag_delay_rv" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable sev_diag_delay_rv: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 458;
            if (stan::math::is_uninitialized(p_die_if_inf)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: p_die_if_inf";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable p_die_if_inf: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 459;
            if (stan::math::is_uninitialized(p_die_if_inf_postO)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: p_die_if_inf_postO";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable p_die_if_inf_postO: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 462;
            size_t symptomatic_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < symptomatic_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(symptomatic(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: symptomatic" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable symptomatic: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 463;
            size_t severe_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < severe_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(severe(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: severe" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable severe: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 464;
            size_t deaths_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < deaths_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(deaths(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: deaths" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable deaths: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 467;
            size_t new_asy_dx_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < new_asy_dx_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(new_asy_dx(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: new_asy_dx" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable new_asy_dx: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 468;
            size_t diagnoses_of_symptomatic_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < diagnoses_of_symptomatic_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(diagnoses_of_symptomatic(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: diagnoses_of_symptomatic" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable diagnoses_of_symptomatic: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 469;
            size_t diagnoses_severe_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < diagnoses_severe_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(diagnoses_severe(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: diagnoses_severe" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable diagnoses_severe: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 472;
            size_t dx_sym_sev_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < dx_sym_sev_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(dx_sym_sev(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: dx_sym_sev" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable dx_sym_sev: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 473;
            size_t dx_sym_die_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < dx_sym_die_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(dx_sym_die(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: dx_sym_die" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable dx_sym_die: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 474;
            size_t dx_sev_die_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < dx_sev_die_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(dx_sev_die(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: dx_sev_die" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable dx_sev_die: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 477;
            size_t diagnoses_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < diagnoses_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(diagnoses(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: diagnoses" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable diagnoses: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 478;
            size_t deaths_of_diagnosed_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < deaths_of_diagnosed_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(deaths_of_diagnosed(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: deaths_of_diagnosed" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable deaths_of_diagnosed: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 482;
            size_t fitted_cases_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < fitted_cases_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(fitted_cases(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: fitted_cases" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable fitted_cases: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 483;
            size_t fitted_deaths_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < fitted_deaths_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(fitted_deaths(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: fitted_deaths" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable fitted_deaths: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 484;
            size_t fitted_hospitalizations_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < fitted_hospitalizations_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(fitted_hospitalizations(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: fitted_hospitalizations" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable fitted_hospitalizations: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 486;
            size_t fitted_cases_mvs_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < fitted_cases_mvs_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(fitted_cases_mvs(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: fitted_cases_mvs" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable fitted_cases_mvs: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 487;
            size_t fitted_deaths_mvs_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < fitted_deaths_mvs_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(fitted_deaths_mvs(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: fitted_deaths_mvs" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable fitted_deaths_mvs: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 488;
            size_t fitted_hospitalizations_mvs_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < fitted_hospitalizations_mvs_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(fitted_hospitalizations_mvs(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: fitted_hospitalizations_mvs" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable fitted_hospitalizations_mvs: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 493;
            if (stan::math::is_uninitialized(phi_cas)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: phi_cas";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable phi_cas: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 494;
            if (stan::math::is_uninitialized(phi_die)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: phi_die";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable phi_die: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 495;
            if (stan::math::is_uninitialized(phi_hosp)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: phi_hosp";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable phi_hosp: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            // model body
            current_statement_begin__ = 843;
            lp_accum__.add(normal_log<propto__>(log_infections_0, pri_log_infections_0_mu, pri_log_infections_0_sd));
            current_statement_begin__ = 845;
            lp_accum__.add(normal_log<propto__>(spl_par_rt, pri_logRt_mu, pri_logRt_sd));
            current_statement_begin__ = 846;
            lp_accum__.add(gamma_log<propto__>(serial_i, pri_serial_i_shap, pri_serial_i_rate));
            current_statement_begin__ = 847;
            lp_accum__.add(gamma_log<propto__>(serial_i_postO, pri_serial_i_postO_shap, pri_serial_i_postO_rate));
            current_statement_begin__ = 848;
            lp_accum__.add(normal_log<propto__>(deriv1_spl_par_rt, 0, pri_deriv1_spl_par_sd));
            current_statement_begin__ = 849;
            lp_accum__.add(normal_log<propto__>(deriv2_spl_par_rt, 0, pri_deriv2_spl_par_sd));
            current_statement_begin__ = 853;
            lp_accum__.add(beta_log<propto__>(p_sym_if_inf, pri_p_sym_if_inf_a, pri_p_sym_if_inf_b));
            current_statement_begin__ = 854;
            lp_accum__.add(beta_log<propto__>(p_sym_if_inf_postO, pri_p_sym_if_inf_postO_a, pri_p_sym_if_inf_postO_b));
            current_statement_begin__ = 855;
            lp_accum__.add(beta_log<propto__>(p_sev_if_sym, pri_p_sev_if_sym_a, pri_p_sev_if_sym_b));
            current_statement_begin__ = 856;
            lp_accum__.add(beta_log<propto__>(p_sev_if_sym_postO, pri_p_sev_if_sym_a, pri_p_sev_if_sym_b));
            current_statement_begin__ = 857;
            lp_accum__.add(beta_log<propto__>(p_die_if_sev, pri_p_die_if_sev_a, pri_p_die_if_sev_b));
            current_statement_begin__ = 858;
            lp_accum__.add(gamma_log<propto__>(ifr_decl_OR, pri_ifr_decl_OR_a, pri_ifr_decl_OR_b));
            current_statement_begin__ = 861;
            lp_accum__.add(beta_log<propto__>(p_die_if_inf, pri_p_die_if_inf_a, pri_p_die_if_inf_b));
            current_statement_begin__ = 862;
            lp_accum__.add(beta_log<propto__>(p_die_if_inf_postO, pri_p_die_if_inf_postO_a, pri_p_die_if_inf_postO_b));
            current_statement_begin__ = 866;
            lp_accum__.add(beta_log<propto__>(rr_diag_asy_vs_sym, pri_rr_diag_asy_vs_sym_a, pri_rr_diag_asy_vs_sym_b));
            current_statement_begin__ = 867;
            lp_accum__.add(beta_log<propto__>(spl_par_sym_dx, pri_rr_diag_sym_vs_sev_a, pri_rr_diag_sym_vs_sev_b));
            current_statement_begin__ = 868;
            lp_accum__.add(beta_log<propto__>(p_diag_if_sev, pri_p_diag_if_sev_a, pri_p_diag_if_sev_b));
            current_statement_begin__ = 871;
            lp_accum__.add(beta_log<propto__>(scale_dx_delay_sym, scale_dx_delay_sym_a, scale_dx_delay_sym_b));
            current_statement_begin__ = 872;
            lp_accum__.add(beta_log<propto__>(scale_dx_delay_sev, scale_dx_delay_sev_a, scale_dx_delay_sev_b));
            current_statement_begin__ = 875;
            lp_accum__.add(normal_log<propto__>(inv_sqrt_phi_c, 0, 1));
            current_statement_begin__ = 876;
            lp_accum__.add(normal_log<propto__>(inv_sqrt_phi_d, 0, 1));
            current_statement_begin__ = 877;
            lp_accum__.add(normal_log<propto__>(inv_sqrt_phi_h, 0, 1));
            current_statement_begin__ = 884;
            if (as_bool(logical_eq(pre_period_zero, 1))) {
                current_statement_begin__ = 886;
                if (as_bool(logical_gt(N_weeks_before, 0))) {
                    current_statement_begin__ = 892;
                    if (as_bool(logical_lt(sum(stan::model::rvalue(fitted_cases, stan::model::cons_list(stan::model::index_min_max(1, N_weeks_before), stan::model::nil_index_list()), "fitted_cases")), 0))) {
                        current_statement_begin__ = 893;
                        std::stringstream errmsg_stream__;
                        errmsg_stream__ << "`sum(fitted_cases[1:N_weeks_before])` had a negative value";
                        throw std::domain_error(errmsg_stream__.str());
                    }
                    current_statement_begin__ = 895;
                    if (as_bool(logical_lt(sum(stan::model::rvalue(fitted_deaths, stan::model::cons_list(stan::model::index_min_max(1, N_weeks_before), stan::model::nil_index_list()), "fitted_deaths")), 0))) {
                        current_statement_begin__ = 896;
                        std::stringstream errmsg_stream__;
                        errmsg_stream__ << "`sum(fitted_deaths[1:N_weeks_before])` had a negative value";
                        throw std::domain_error(errmsg_stream__.str());
                    }
                    current_statement_begin__ = 900;
                    lp_accum__.add(neg_binomial_2_log(0, sum(stan::model::rvalue(fitted_cases, stan::model::cons_list(stan::model::index_min_max(1, N_weeks_before), stan::model::nil_index_list()), "fitted_cases")), phi_cas));
                    current_statement_begin__ = 901;
                    lp_accum__.add(neg_binomial_2_log(0, sum(stan::model::rvalue(fitted_deaths, stan::model::cons_list(stan::model::index_min_max(1, N_weeks_before), stan::model::nil_index_list()), "fitted_deaths")), phi_die));
                }
            }
            current_statement_begin__ = 905;
            if (as_bool(logical_lt(min(fitted_cases), 0))) {
                current_statement_begin__ = 906;
                std::stringstream errmsg_stream__;
                errmsg_stream__ << "`fitted_cases` had a negative value";
                throw std::domain_error(errmsg_stream__.str());
            }
            current_statement_begin__ = 908;
            if (as_bool(logical_lt(min(fitted_deaths), 0))) {
                current_statement_begin__ = 909;
                std::stringstream errmsg_stream__;
                errmsg_stream__ << "`fitted_deaths` had a negative value";
                throw std::domain_error(errmsg_stream__.str());
            }
            current_statement_begin__ = 936;
            lp_accum__.add(neg_binomial_2_log(stan::model::rvalue(obs_cas_mvs, stan::model::cons_list(stan::model::index_min_max(1, lastCaseWeek), stan::model::nil_index_list()), "obs_cas_mvs"), stan::model::rvalue(fitted_cases_mvs, stan::model::cons_list(stan::model::index_min_max((N_weeks_before + 1), (N_weeks_before + lastCaseWeek)), stan::model::nil_index_list()), "fitted_cases_mvs"), phi_cas));
            current_statement_begin__ = 957;
            lp_accum__.add(neg_binomial_2_log(stan::model::rvalue(obs_die_mvs, stan::model::cons_list(stan::model::index_min_max(1, lastDeathWeek), stan::model::nil_index_list()), "obs_die_mvs"), stan::model::rvalue(fitted_deaths_mvs, stan::model::cons_list(stan::model::index_min_max((N_weeks_before + 1), (N_weeks_before + lastDeathWeek)), stan::model::nil_index_list()), "fitted_deaths_mvs"), phi_die));
            current_statement_begin__ = 968;
            lp_accum__.add(neg_binomial_2_log(stan::model::rvalue(obs_hosp_mvs, stan::model::cons_list(stan::model::index_min_max(firstHospWeek, lastHospWeek), stan::model::nil_index_list()), "obs_hosp_mvs"), stan::model::rvalue(fitted_hospitalizations_mvs, stan::model::cons_list(stan::model::index_min_max((N_weeks_before + firstHospWeek), (N_weeks_before + lastHospWeek)), stan::model::nil_index_list()), "fitted_hospitalizations_mvs"), phi_hosp));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("log_infections_0");
        names__.push_back("serial_i");
        names__.push_back("serial_i_postO");
        names__.push_back("spl_par_rt");
        names__.push_back("p_sym_if_inf");
        names__.push_back("p_sym_if_inf_postO");
        names__.push_back("p_sev_if_sym");
        names__.push_back("p_sev_if_sym_postO");
        names__.push_back("p_die_if_sev");
        names__.push_back("ifr_decl_OR");
        names__.push_back("scale_dx_delay_sym");
        names__.push_back("scale_dx_delay_sev");
        names__.push_back("rr_diag_asy_vs_sym");
        names__.push_back("p_diag_if_sev");
        names__.push_back("spl_par_sym_dx");
        names__.push_back("inv_sqrt_phi_c");
        names__.push_back("inv_sqrt_phi_d");
        names__.push_back("inv_sqrt_phi_h");
        names__.push_back("prob_vac");
        names__.push_back("prob_vac2");
        names__.push_back("serial_i_vec");
        names__.push_back("log_infections");
        names__.push_back("deriv1_log_infections");
        names__.push_back("infections");
        names__.push_back("vax_only");
        names__.push_back("vax_only_cum");
        names__.push_back("exposed");
        names__.push_back("exposed_cumulative");
        names__.push_back("infections_premiere");
        names__.push_back("num_uninf");
        names__.push_back("p_first");
        names__.push_back("p_boost");
        names__.push_back("p_reinf");
        names__.push_back("ever_inf");
        names__.push_back("susceptible_prvl");
        names__.push_back("effective_protection_prvl");
        names__.push_back("severe_protection");
        names__.push_back("population_protection_inf");
        names__.push_back("population_protection_vax");
        names__.push_back("population_protection_boost");
        names__.push_back("population_protection_sev_inf");
        names__.push_back("population_protection_sev_vax");
        names__.push_back("population_protection_sev_boost");
        names__.push_back("logRt0");
        names__.push_back("logRt");
        names__.push_back("r_t");
        names__.push_back("r_0");
        names__.push_back("deriv1_spl_par_rt");
        names__.push_back("deriv2_spl_par_rt");
        names__.push_back("p_die_if_sevt");
        names__.push_back("p_sev_if_symt");
        names__.push_back("p_sym_if_inft");
        names__.push_back("rr_diag_sym_vs_sev");
        names__.push_back("p_diag_if_asy");
        names__.push_back("p_diag_if_sym");
        names__.push_back("sym_diag_delay_rv");
        names__.push_back("sev_diag_delay_rv");
        names__.push_back("p_die_if_inf");
        names__.push_back("p_die_if_inf_postO");
        names__.push_back("symptomatic");
        names__.push_back("severe");
        names__.push_back("deaths");
        names__.push_back("new_asy_dx");
        names__.push_back("diagnoses_of_symptomatic");
        names__.push_back("diagnoses_severe");
        names__.push_back("dx_sym_sev");
        names__.push_back("dx_sym_die");
        names__.push_back("dx_sev_die");
        names__.push_back("diagnoses");
        names__.push_back("deaths_of_diagnosed");
        names__.push_back("fitted_cases");
        names__.push_back("fitted_deaths");
        names__.push_back("fitted_hospitalizations");
        names__.push_back("fitted_cases_mvs");
        names__.push_back("fitted_deaths_mvs");
        names__.push_back("fitted_hospitalizations_mvs");
        names__.push_back("phi_cas");
        names__.push_back("phi_die");
        names__.push_back("phi_hosp");
        names__.push_back("p_die_if_sym");
        names__.push_back("p_die_if_sym_postO");
        names__.push_back("susceptible_severe_prvl");
        names__.push_back("effective_protection_inf_prvl");
        names__.push_back("effective_protection_inf_vax_prvl");
        names__.push_back("effective_protection_inf_vax_boost_prvl");
        names__.push_back("effective_protection_vax_prvl");
        names__.push_back("effective_protection_vax_boost_prvl");
        names__.push_back("fitted_wastewater_prvl");
        names__.push_back("immunoexposed_cumulative");
        names__.push_back("diag_cases");
        names__.push_back("infections_cumulative");
        names__.push_back("seropositive_prvl");
        names__.push_back("infect_dist_rv");
        names__.push_back("seropos_dist_rv");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_spl_par_rt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_spl_par_dx);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((N_spl_par_rt - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((N_spl_par_rt - 2));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_ifr_adj);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Max_delay);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Max_delay);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_weeks_tot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Max_delay);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Max_delay);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_stan_program_default_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double log_infections_0 = in__.scalar_constrain();
        vars__.push_back(log_infections_0);
        double serial_i = in__.scalar_constrain();
        vars__.push_back(serial_i);
        double serial_i_postO = in__.scalar_constrain();
        vars__.push_back(serial_i_postO);
        Eigen::Matrix<double, Eigen::Dynamic, 1> spl_par_rt = in__.vector_constrain(N_spl_par_rt);
        size_t spl_par_rt_j_1_max__ = N_spl_par_rt;
        for (size_t j_1__ = 0; j_1__ < spl_par_rt_j_1_max__; ++j_1__) {
            vars__.push_back(spl_par_rt(j_1__));
        }
        double p_sym_if_inf = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(p_sym_if_inf);
        double p_sym_if_inf_postO = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(p_sym_if_inf_postO);
        double p_sev_if_sym = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(p_sev_if_sym);
        double p_sev_if_sym_postO = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(p_sev_if_sym_postO);
        double p_die_if_sev = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(p_die_if_sev);
        double ifr_decl_OR = in__.scalar_lb_constrain(0);
        vars__.push_back(ifr_decl_OR);
        double scale_dx_delay_sym = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(scale_dx_delay_sym);
        double scale_dx_delay_sev = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(scale_dx_delay_sev);
        double rr_diag_asy_vs_sym = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(rr_diag_asy_vs_sym);
        double p_diag_if_sev = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(p_diag_if_sev);
        Eigen::Matrix<double, Eigen::Dynamic, 1> spl_par_sym_dx = in__.vector_lub_constrain(0, 1, N_spl_par_dx);
        size_t spl_par_sym_dx_j_1_max__ = N_spl_par_dx;
        for (size_t j_1__ = 0; j_1__ < spl_par_sym_dx_j_1_max__; ++j_1__) {
            vars__.push_back(spl_par_sym_dx(j_1__));
        }
        double inv_sqrt_phi_c = in__.scalar_lb_constrain(0);
        vars__.push_back(inv_sqrt_phi_c);
        double inv_sqrt_phi_d = in__.scalar_lb_constrain(0);
        vars__.push_back(inv_sqrt_phi_d);
        double inv_sqrt_phi_h = in__.scalar_lb_constrain(0);
        vars__.push_back(inv_sqrt_phi_h);
        Eigen::Matrix<double, Eigen::Dynamic, 1> prob_vac = in__.simplex_constrain(3);
        size_t prob_vac_j_1_max__ = 3;
        for (size_t j_1__ = 0; j_1__ < prob_vac_j_1_max__; ++j_1__) {
            vars__.push_back(prob_vac(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> prob_vac2 = in__.simplex_constrain(2);
        size_t prob_vac2_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < prob_vac2_j_1_max__; ++j_1__) {
            vars__.push_back(prob_vac2(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 406;
            validate_non_negative_index("serial_i_vec", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> serial_i_vec(N_weeks_tot);
            stan::math::initialize(serial_i_vec, DUMMY_VAR__);
            stan::math::fill(serial_i_vec, DUMMY_VAR__);
            current_statement_begin__ = 407;
            validate_non_negative_index("log_infections", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_infections(N_weeks_tot);
            stan::math::initialize(log_infections, DUMMY_VAR__);
            stan::math::fill(log_infections, DUMMY_VAR__);
            current_statement_begin__ = 408;
            validate_non_negative_index("deriv1_log_infections", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> deriv1_log_infections(N_weeks_tot);
            stan::math::initialize(deriv1_log_infections, DUMMY_VAR__);
            stan::math::fill(deriv1_log_infections, DUMMY_VAR__);
            current_statement_begin__ = 409;
            validate_non_negative_index("infections", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> infections(N_weeks_tot);
            stan::math::initialize(infections, DUMMY_VAR__);
            stan::math::fill(infections, DUMMY_VAR__);
            current_statement_begin__ = 410;
            validate_non_negative_index("vax_only", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> vax_only(N_weeks_tot);
            stan::math::initialize(vax_only, DUMMY_VAR__);
            stan::math::fill(vax_only, DUMMY_VAR__);
            current_statement_begin__ = 411;
            validate_non_negative_index("vax_only_cum", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> vax_only_cum(N_weeks_tot);
            stan::math::initialize(vax_only_cum, DUMMY_VAR__);
            stan::math::fill(vax_only_cum, DUMMY_VAR__);
            current_statement_begin__ = 412;
            validate_non_negative_index("exposed", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> exposed(N_weeks_tot);
            stan::math::initialize(exposed, DUMMY_VAR__);
            stan::math::fill(exposed, DUMMY_VAR__);
            current_statement_begin__ = 413;
            validate_non_negative_index("exposed_cumulative", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> exposed_cumulative(N_weeks_tot);
            stan::math::initialize(exposed_cumulative, DUMMY_VAR__);
            stan::math::fill(exposed_cumulative, DUMMY_VAR__);
            current_statement_begin__ = 414;
            validate_non_negative_index("infections_premiere", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> infections_premiere(N_weeks_tot);
            stan::math::initialize(infections_premiere, DUMMY_VAR__);
            stan::math::fill(infections_premiere, DUMMY_VAR__);
            current_statement_begin__ = 415;
            validate_non_negative_index("num_uninf", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> num_uninf(N_weeks_tot);
            stan::math::initialize(num_uninf, DUMMY_VAR__);
            stan::math::fill(num_uninf, DUMMY_VAR__);
            current_statement_begin__ = 416;
            validate_non_negative_index("p_first", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> p_first(N_weeks_tot);
            stan::math::initialize(p_first, DUMMY_VAR__);
            stan::math::fill(p_first, DUMMY_VAR__);
            current_statement_begin__ = 417;
            validate_non_negative_index("p_boost", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> p_boost(N_weeks_tot);
            stan::math::initialize(p_boost, DUMMY_VAR__);
            stan::math::fill(p_boost, DUMMY_VAR__);
            current_statement_begin__ = 418;
            validate_non_negative_index("p_reinf", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> p_reinf(N_weeks_tot);
            stan::math::initialize(p_reinf, DUMMY_VAR__);
            stan::math::fill(p_reinf, DUMMY_VAR__);
            current_statement_begin__ = 419;
            double ever_inf;
            (void) ever_inf;  // dummy to suppress unused var warning
            stan::math::initialize(ever_inf, DUMMY_VAR__);
            stan::math::fill(ever_inf, DUMMY_VAR__);
            current_statement_begin__ = 420;
            validate_non_negative_index("susceptible_prvl", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> susceptible_prvl(N_weeks_tot);
            stan::math::initialize(susceptible_prvl, DUMMY_VAR__);
            stan::math::fill(susceptible_prvl, DUMMY_VAR__);
            current_statement_begin__ = 421;
            validate_non_negative_index("effective_protection_prvl", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> effective_protection_prvl(N_weeks_tot);
            stan::math::initialize(effective_protection_prvl, DUMMY_VAR__);
            stan::math::fill(effective_protection_prvl, DUMMY_VAR__);
            current_statement_begin__ = 422;
            validate_non_negative_index("severe_protection", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> severe_protection(N_weeks_tot);
            stan::math::initialize(severe_protection, DUMMY_VAR__);
            stan::math::fill(severe_protection, DUMMY_VAR__);
            current_statement_begin__ = 423;
            validate_non_negative_index("population_protection_inf", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> population_protection_inf(N_weeks_tot);
            stan::math::initialize(population_protection_inf, DUMMY_VAR__);
            stan::math::fill(population_protection_inf, DUMMY_VAR__);
            current_statement_begin__ = 424;
            validate_non_negative_index("population_protection_vax", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> population_protection_vax(N_weeks_tot);
            stan::math::initialize(population_protection_vax, DUMMY_VAR__);
            stan::math::fill(population_protection_vax, DUMMY_VAR__);
            current_statement_begin__ = 425;
            validate_non_negative_index("population_protection_boost", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> population_protection_boost(N_weeks_tot);
            stan::math::initialize(population_protection_boost, DUMMY_VAR__);
            stan::math::fill(population_protection_boost, DUMMY_VAR__);
            current_statement_begin__ = 426;
            validate_non_negative_index("population_protection_sev_inf", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> population_protection_sev_inf(N_weeks_tot);
            stan::math::initialize(population_protection_sev_inf, DUMMY_VAR__);
            stan::math::fill(population_protection_sev_inf, DUMMY_VAR__);
            current_statement_begin__ = 427;
            validate_non_negative_index("population_protection_sev_vax", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> population_protection_sev_vax(N_weeks_tot);
            stan::math::initialize(population_protection_sev_vax, DUMMY_VAR__);
            stan::math::fill(population_protection_sev_vax, DUMMY_VAR__);
            current_statement_begin__ = 428;
            validate_non_negative_index("population_protection_sev_boost", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> population_protection_sev_boost(N_weeks_tot);
            stan::math::initialize(population_protection_sev_boost, DUMMY_VAR__);
            stan::math::fill(population_protection_sev_boost, DUMMY_VAR__);
            current_statement_begin__ = 433;
            validate_non_negative_index("logRt0", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> logRt0(N_weeks_tot);
            stan::math::initialize(logRt0, DUMMY_VAR__);
            stan::math::fill(logRt0, DUMMY_VAR__);
            current_statement_begin__ = 434;
            validate_non_negative_index("logRt", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> logRt(N_weeks_tot);
            stan::math::initialize(logRt, DUMMY_VAR__);
            stan::math::fill(logRt, DUMMY_VAR__);
            current_statement_begin__ = 435;
            validate_non_negative_index("r_t", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> r_t(N_weeks_tot);
            stan::math::initialize(r_t, DUMMY_VAR__);
            stan::math::fill(r_t, DUMMY_VAR__);
            current_statement_begin__ = 436;
            validate_non_negative_index("r_0", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> r_0(N_weeks_tot);
            stan::math::initialize(r_0, DUMMY_VAR__);
            stan::math::fill(r_0, DUMMY_VAR__);
            current_statement_begin__ = 437;
            validate_non_negative_index("deriv1_spl_par_rt", "(N_spl_par_rt - 1)", (N_spl_par_rt - 1));
            Eigen::Matrix<double, Eigen::Dynamic, 1> deriv1_spl_par_rt((N_spl_par_rt - 1));
            stan::math::initialize(deriv1_spl_par_rt, DUMMY_VAR__);
            stan::math::fill(deriv1_spl_par_rt, DUMMY_VAR__);
            current_statement_begin__ = 438;
            validate_non_negative_index("deriv2_spl_par_rt", "(N_spl_par_rt - 2)", (N_spl_par_rt - 2));
            Eigen::Matrix<double, Eigen::Dynamic, 1> deriv2_spl_par_rt((N_spl_par_rt - 2));
            stan::math::initialize(deriv2_spl_par_rt, DUMMY_VAR__);
            stan::math::fill(deriv2_spl_par_rt, DUMMY_VAR__);
            current_statement_begin__ = 441;
            validate_non_negative_index("p_die_if_sevt", "N_ifr_adj", N_ifr_adj);
            Eigen::Matrix<double, Eigen::Dynamic, 1> p_die_if_sevt(N_ifr_adj);
            stan::math::initialize(p_die_if_sevt, DUMMY_VAR__);
            stan::math::fill(p_die_if_sevt, DUMMY_VAR__);
            current_statement_begin__ = 442;
            validate_non_negative_index("p_sev_if_symt", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> p_sev_if_symt(N_weeks_tot);
            stan::math::initialize(p_sev_if_symt, DUMMY_VAR__);
            stan::math::fill(p_sev_if_symt, DUMMY_VAR__);
            current_statement_begin__ = 443;
            validate_non_negative_index("p_sym_if_inft", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> p_sym_if_inft(N_weeks_tot);
            stan::math::initialize(p_sym_if_inft, DUMMY_VAR__);
            stan::math::fill(p_sym_if_inft, DUMMY_VAR__);
            current_statement_begin__ = 447;
            validate_non_negative_index("rr_diag_sym_vs_sev", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> rr_diag_sym_vs_sev(N_weeks_tot);
            stan::math::initialize(rr_diag_sym_vs_sev, DUMMY_VAR__);
            stan::math::fill(rr_diag_sym_vs_sev, DUMMY_VAR__);
            current_statement_begin__ = 448;
            validate_non_negative_index("p_diag_if_asy", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> p_diag_if_asy(N_weeks_tot);
            stan::math::initialize(p_diag_if_asy, DUMMY_VAR__);
            stan::math::fill(p_diag_if_asy, DUMMY_VAR__);
            current_statement_begin__ = 449;
            validate_non_negative_index("p_diag_if_sym", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> p_diag_if_sym(N_weeks_tot);
            stan::math::initialize(p_diag_if_sym, DUMMY_VAR__);
            stan::math::fill(p_diag_if_sym, DUMMY_VAR__);
            current_statement_begin__ = 453;
            validate_non_negative_index("sym_diag_delay_rv", "Max_delay", Max_delay);
            Eigen::Matrix<double, Eigen::Dynamic, 1> sym_diag_delay_rv(Max_delay);
            stan::math::initialize(sym_diag_delay_rv, DUMMY_VAR__);
            stan::math::fill(sym_diag_delay_rv, DUMMY_VAR__);
            current_statement_begin__ = 454;
            validate_non_negative_index("sev_diag_delay_rv", "Max_delay", Max_delay);
            Eigen::Matrix<double, Eigen::Dynamic, 1> sev_diag_delay_rv(Max_delay);
            stan::math::initialize(sev_diag_delay_rv, DUMMY_VAR__);
            stan::math::fill(sev_diag_delay_rv, DUMMY_VAR__);
            current_statement_begin__ = 458;
            double p_die_if_inf;
            (void) p_die_if_inf;  // dummy to suppress unused var warning
            stan::math::initialize(p_die_if_inf, DUMMY_VAR__);
            stan::math::fill(p_die_if_inf, DUMMY_VAR__);
            current_statement_begin__ = 459;
            double p_die_if_inf_postO;
            (void) p_die_if_inf_postO;  // dummy to suppress unused var warning
            stan::math::initialize(p_die_if_inf_postO, DUMMY_VAR__);
            stan::math::fill(p_die_if_inf_postO, DUMMY_VAR__);
            current_statement_begin__ = 462;
            validate_non_negative_index("symptomatic", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> symptomatic(N_weeks_tot);
            stan::math::initialize(symptomatic, DUMMY_VAR__);
            stan::math::fill(symptomatic, DUMMY_VAR__);
            current_statement_begin__ = 463;
            validate_non_negative_index("severe", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> severe(N_weeks_tot);
            stan::math::initialize(severe, DUMMY_VAR__);
            stan::math::fill(severe, DUMMY_VAR__);
            current_statement_begin__ = 464;
            validate_non_negative_index("deaths", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> deaths(N_weeks_tot);
            stan::math::initialize(deaths, DUMMY_VAR__);
            stan::math::fill(deaths, DUMMY_VAR__);
            current_statement_begin__ = 467;
            validate_non_negative_index("new_asy_dx", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> new_asy_dx(N_weeks_tot);
            stan::math::initialize(new_asy_dx, DUMMY_VAR__);
            stan::math::fill(new_asy_dx, DUMMY_VAR__);
            current_statement_begin__ = 468;
            validate_non_negative_index("diagnoses_of_symptomatic", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> diagnoses_of_symptomatic(N_weeks_tot);
            stan::math::initialize(diagnoses_of_symptomatic, DUMMY_VAR__);
            stan::math::fill(diagnoses_of_symptomatic, DUMMY_VAR__);
            current_statement_begin__ = 469;
            validate_non_negative_index("diagnoses_severe", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> diagnoses_severe(N_weeks_tot);
            stan::math::initialize(diagnoses_severe, DUMMY_VAR__);
            stan::math::fill(diagnoses_severe, DUMMY_VAR__);
            current_statement_begin__ = 472;
            validate_non_negative_index("dx_sym_sev", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> dx_sym_sev(N_weeks_tot);
            stan::math::initialize(dx_sym_sev, DUMMY_VAR__);
            stan::math::fill(dx_sym_sev, DUMMY_VAR__);
            current_statement_begin__ = 473;
            validate_non_negative_index("dx_sym_die", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> dx_sym_die(N_weeks_tot);
            stan::math::initialize(dx_sym_die, DUMMY_VAR__);
            stan::math::fill(dx_sym_die, DUMMY_VAR__);
            current_statement_begin__ = 474;
            validate_non_negative_index("dx_sev_die", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> dx_sev_die(N_weeks_tot);
            stan::math::initialize(dx_sev_die, DUMMY_VAR__);
            stan::math::fill(dx_sev_die, DUMMY_VAR__);
            current_statement_begin__ = 477;
            validate_non_negative_index("diagnoses", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> diagnoses(N_weeks_tot);
            stan::math::initialize(diagnoses, DUMMY_VAR__);
            stan::math::fill(diagnoses, DUMMY_VAR__);
            current_statement_begin__ = 478;
            validate_non_negative_index("deaths_of_diagnosed", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> deaths_of_diagnosed(N_weeks_tot);
            stan::math::initialize(deaths_of_diagnosed, DUMMY_VAR__);
            stan::math::fill(deaths_of_diagnosed, DUMMY_VAR__);
            current_statement_begin__ = 482;
            validate_non_negative_index("fitted_cases", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> fitted_cases(N_weeks_tot);
            stan::math::initialize(fitted_cases, DUMMY_VAR__);
            stan::math::fill(fitted_cases, DUMMY_VAR__);
            current_statement_begin__ = 483;
            validate_non_negative_index("fitted_deaths", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> fitted_deaths(N_weeks_tot);
            stan::math::initialize(fitted_deaths, DUMMY_VAR__);
            stan::math::fill(fitted_deaths, DUMMY_VAR__);
            current_statement_begin__ = 484;
            validate_non_negative_index("fitted_hospitalizations", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> fitted_hospitalizations(N_weeks_tot);
            stan::math::initialize(fitted_hospitalizations, DUMMY_VAR__);
            stan::math::fill(fitted_hospitalizations, DUMMY_VAR__);
            current_statement_begin__ = 486;
            validate_non_negative_index("fitted_cases_mvs", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> fitted_cases_mvs(N_weeks_tot);
            stan::math::initialize(fitted_cases_mvs, DUMMY_VAR__);
            stan::math::fill(fitted_cases_mvs, DUMMY_VAR__);
            current_statement_begin__ = 487;
            validate_non_negative_index("fitted_deaths_mvs", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> fitted_deaths_mvs(N_weeks_tot);
            stan::math::initialize(fitted_deaths_mvs, DUMMY_VAR__);
            stan::math::fill(fitted_deaths_mvs, DUMMY_VAR__);
            current_statement_begin__ = 488;
            validate_non_negative_index("fitted_hospitalizations_mvs", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> fitted_hospitalizations_mvs(N_weeks_tot);
            stan::math::initialize(fitted_hospitalizations_mvs, DUMMY_VAR__);
            stan::math::fill(fitted_hospitalizations_mvs, DUMMY_VAR__);
            current_statement_begin__ = 493;
            double phi_cas;
            (void) phi_cas;  // dummy to suppress unused var warning
            stan::math::initialize(phi_cas, DUMMY_VAR__);
            stan::math::fill(phi_cas, DUMMY_VAR__);
            current_statement_begin__ = 494;
            double phi_die;
            (void) phi_die;  // dummy to suppress unused var warning
            stan::math::initialize(phi_die, DUMMY_VAR__);
            stan::math::fill(phi_die, DUMMY_VAR__);
            current_statement_begin__ = 495;
            double phi_hosp;
            (void) phi_hosp;  // dummy to suppress unused var warning
            stan::math::initialize(phi_hosp, DUMMY_VAR__);
            stan::math::fill(phi_hosp, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 499;
            stan::math::assign(p_die_if_sevt, multiply((p_die_if_sev * ifr_adj_fixed), add(1, multiply(ifr_adj, ifr_decl_OR))));
            current_statement_begin__ = 501;
            for (int i = 1; i <= N_weeks_tot; ++i) {
                current_statement_begin__ = 502;
                stan::model::assign(p_die_if_sevt, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(p_die_if_sevt, i, "p_die_if_sevt", 1) * pow(get_base1(ifr_vac_adj, i, "ifr_vac_adj", 1), get_base1(prob_vac, 1, "prob_vac", 1))), 
                            "assigning variable p_die_if_sevt");
                current_statement_begin__ = 503;
                stan::model::assign(p_sev_if_symt, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (p_sev_if_sym * pow(get_base1(ifr_vac_adj, i, "ifr_vac_adj", 1), get_base1(prob_vac, 2, "prob_vac", 1))), 
                            "assigning variable p_sev_if_symt");
                current_statement_begin__ = 505;
                if (as_bool(logical_lt(i, (N_weeks_start_omicron + N_weeks_before)))) {
                    current_statement_begin__ = 506;
                    stan::model::assign(p_sym_if_inft, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (p_sym_if_inf * pow(get_base1(ifr_vac_adj, i, "ifr_vac_adj", 1), get_base1(prob_vac, 3, "prob_vac", 1))), 
                                "assigning variable p_sym_if_inft");
                    current_statement_begin__ = 507;
                    stan::model::assign(serial_i_vec, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                serial_i, 
                                "assigning variable serial_i_vec");
                } else {
                    current_statement_begin__ = 510;
                    if (as_bool(logical_lte(i, ((N_weeks_start_omicron + N_weeks_before) + N_weeks_transition)))) {
                        current_statement_begin__ = 512;
                        stan::model::assign(p_sym_if_inft, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                    ((p_sym_if_inf - (((p_sym_if_inf - p_sym_if_inf_postO) / (N_weeks_transition + 2)) * get_base1(idx4, i, "idx4", 1))) * pow(get_base1(ifr_vac_adj, i, "ifr_vac_adj", 1), get_base1(prob_vac, 3, "prob_vac", 1))), 
                                    "assigning variable p_sym_if_inft");
                        current_statement_begin__ = 513;
                        stan::model::assign(serial_i_vec, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                    (serial_i - (((serial_i - serial_i_postO) / (N_weeks_transition + 2)) * get_base1(idx4, i, "idx4", 1))), 
                                    "assigning variable serial_i_vec");
                    } else {
                        current_statement_begin__ = 516;
                        stan::model::assign(p_sym_if_inft, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                    (p_sym_if_inf_postO * pow(get_base1(ifr_vac_adj, i, "ifr_vac_adj", 1), get_base1(prob_vac, 3, "prob_vac", 1))), 
                                    "assigning variable p_sym_if_inft");
                        current_statement_begin__ = 517;
                        stan::model::assign(serial_i_vec, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                    serial_i_postO, 
                                    "assigning variable serial_i_vec");
                    }
                }
            }
            current_statement_begin__ = 525;
            stan::math::assign(rr_diag_sym_vs_sev, inv_logit(multiply(spl_basis_dx, logit(spl_par_sym_dx))));
            current_statement_begin__ = 528;
            stan::math::assign(p_diag_if_sym, multiply(p_diag_if_sev, rr_diag_sym_vs_sev));
            current_statement_begin__ = 529;
            stan::math::assign(p_diag_if_asy, multiply(p_diag_if_sym, rr_diag_asy_vs_sym));
            {
            current_statement_begin__ = 540;
            validate_non_negative_index("sym_delay_gammas", "(Max_delay + 1)", (Max_delay + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sym_delay_gammas((Max_delay + 1));
            stan::math::initialize(sym_delay_gammas, DUMMY_VAR__);
            stan::math::fill(sym_delay_gammas, DUMMY_VAR__);
            current_statement_begin__ = 541;
            validate_non_negative_index("sev_delay_gammas", "(Max_delay + 1)", (Max_delay + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sev_delay_gammas((Max_delay + 1));
            stan::math::initialize(sev_delay_gammas, DUMMY_VAR__);
            stan::math::fill(sev_delay_gammas, DUMMY_VAR__);
            current_statement_begin__ = 542;
            for (int i = 1; i <= (Max_delay + 1); ++i) {
                current_statement_begin__ = 543;
                stan::model::assign(sym_delay_gammas, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            gamma_cdf((i - 1), sym_prg_delay_shap, (sym_prg_delay_rate / scale_dx_delay_sym)), 
                            "assigning variable sym_delay_gammas");
                current_statement_begin__ = 544;
                stan::model::assign(sev_delay_gammas, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            gamma_cdf((i - 1), sev_prg_delay_shap, (sev_prg_delay_rate / scale_dx_delay_sev)), 
                            "assigning variable sev_delay_gammas");
            }
            current_statement_begin__ = 550;
            for (int i = 1; i <= Max_delay; ++i) {
                current_statement_begin__ = 551;
                stan::model::assign(sym_diag_delay_rv, 
                            stan::model::cons_list(stan::model::index_uni(((1 + Max_delay) - i)), stan::model::nil_index_list()), 
                            (get_base1(sym_delay_gammas, (i + 1), "sym_delay_gammas", 1) - get_base1(sym_delay_gammas, i, "sym_delay_gammas", 1)), 
                            "assigning variable sym_diag_delay_rv");
                current_statement_begin__ = 552;
                stan::model::assign(sev_diag_delay_rv, 
                            stan::model::cons_list(stan::model::index_uni(((1 + Max_delay) - i)), stan::model::nil_index_list()), 
                            (get_base1(sev_delay_gammas, (i + 1), "sev_delay_gammas", 1) - get_base1(sev_delay_gammas, i, "sev_delay_gammas", 1)), 
                            "assigning variable sev_diag_delay_rv");
            }
            }
            current_statement_begin__ = 561;
            stan::math::assign(p_die_if_inf, ((p_sym_if_inf * p_sev_if_sym) * p_die_if_sev));
            current_statement_begin__ = 562;
            stan::math::assign(p_die_if_inf_postO, ((p_sym_if_inf_postO * p_sev_if_sym) * p_die_if_sev));
            current_statement_begin__ = 573;
            stan::math::assign(logRt0, multiply(spl_basis_rt, spl_par_rt));
            current_statement_begin__ = 574;
            stan::model::assign(susceptible_prvl, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        pop_size, 
                        "assigning variable susceptible_prvl");
            current_statement_begin__ = 575;
            stan::model::assign(num_uninf, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        pop_size, 
                        "assigning variable num_uninf");
            current_statement_begin__ = 576;
            stan::model::assign(effective_protection_prvl, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        0.0, 
                        "assigning variable effective_protection_prvl");
            current_statement_begin__ = 577;
            stan::model::assign(severe_protection, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        0.0, 
                        "assigning variable severe_protection");
            current_statement_begin__ = 581;
            for (int i = 1; i <= N_weeks_tot; ++i) {
                current_statement_begin__ = 582;
                if (as_bool(logical_gt(i, 1))) {
                    current_statement_begin__ = 583;
                    stan::model::assign(susceptible_prvl, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (pop_size - get_base1(effective_protection_prvl, i, "effective_protection_prvl", 1)), 
                                "assigning variable susceptible_prvl");
                }
                current_statement_begin__ = 586;
                if (as_bool(logical_lt(get_base1(susceptible_prvl, i, "susceptible_prvl", 1), 1))) {
                    current_statement_begin__ = 588;
                    stan::model::assign(susceptible_prvl, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                1, 
                                "assigning variable susceptible_prvl");
                }
                current_statement_begin__ = 590;
                if (as_bool(logical_eq(i, 1))) {
                    current_statement_begin__ = 591;
                    stan::model::assign(logRt, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                get_base1(logRt0, i, "logRt0", 1), 
                                "assigning variable logRt");
                } else {
                    current_statement_begin__ = 593;
                    stan::model::assign(logRt, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (get_base1(logRt0, i, "logRt0", 1) + stan::math::log((get_base1(susceptible_prvl, i, "susceptible_prvl", 1) / pop_size))), 
                                "assigning variable logRt");
                }
                current_statement_begin__ = 596;
                stan::model::assign(deriv1_log_infections, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(logRt, i, "logRt", 1) / get_base1(serial_i_vec, i, "serial_i_vec", 1)), 
                            "assigning variable deriv1_log_infections");
                current_statement_begin__ = 597;
                stan::model::assign(log_infections, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (sum(stan::model::rvalue(deriv1_log_infections, stan::model::cons_list(stan::model::index_min_max(1, i), stan::model::nil_index_list()), "deriv1_log_infections")) + log_infections_0), 
                            "assigning variable log_infections");
                current_statement_begin__ = 598;
                stan::model::assign(infections, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::exp(get_base1(log_infections, i, "log_infections", 1)), 
                            "assigning variable infections");
                current_statement_begin__ = 600;
                if (as_bool(logical_gt(i, 1))) {
                    current_statement_begin__ = 601;
                    stan::model::assign(p_first, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (get_base1(num_uninf, i, "num_uninf", 1) / ((get_base1(num_uninf, i, "num_uninf", 1) + sum(stan::model::rvalue(infections, stan::model::cons_list(stan::model::index_min_max(1, i), stan::model::nil_index_list()), "infections"))) - get_base1(population_protection_inf, (i - 1), "population_protection_inf", 1))), 
                                "assigning variable p_first");
                } else {
                    current_statement_begin__ = 603;
                    stan::model::assign(p_first, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (get_base1(num_uninf, 1, "num_uninf", 1) / (get_base1(num_uninf, 1, "num_uninf", 1) + get_base1(infections, 1, "infections", 1))), 
                                "assigning variable p_first");
                }
                current_statement_begin__ = 606;
                stan::model::assign(infections_premiere, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(infections, i, "infections", 1) * get_base1(p_first, i, "p_first", 1)), 
                            "assigning variable infections_premiere");
                current_statement_begin__ = 607;
                stan::model::assign(exposed_cumulative, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (calcExposed(OR, (sum(stan::model::rvalue(infections_premiere, stan::model::cons_list(stan::model::index_min_max(1, i), stan::model::nil_index_list()), "infections_premiere")) / pop_size), (sum(stan::model::rvalue(full_vax, stan::model::cons_list(stan::model::index_min_max(1, i), stan::model::nil_index_list()), "full_vax")) / pop_size), pstream__) * pop_size), 
                            "assigning variable exposed_cumulative");
                current_statement_begin__ = 609;
                stan::model::assign(vax_only_cum, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(exposed_cumulative, i, "exposed_cumulative", 1) - sum(stan::model::rvalue(infections_premiere, stan::model::cons_list(stan::model::index_min_max(1, i), stan::model::nil_index_list()), "infections_premiere"))), 
                            "assigning variable vax_only_cum");
                current_statement_begin__ = 611;
                if (as_bool(logical_eq(i, 1))) {
                    current_statement_begin__ = 612;
                    stan::model::assign(exposed, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                get_base1(exposed_cumulative, i, "exposed_cumulative", 1), 
                                "assigning variable exposed");
                    current_statement_begin__ = 613;
                    stan::model::assign(vax_only, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                get_base1(vax_only_cum, i, "vax_only_cum", 1), 
                                "assigning variable vax_only");
                } else {
                    current_statement_begin__ = 615;
                    stan::model::assign(exposed, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (get_base1(exposed_cumulative, i, "exposed_cumulative", 1) - get_base1(exposed_cumulative, (i - 1), "exposed_cumulative", 1)), 
                                "assigning variable exposed");
                    current_statement_begin__ = 616;
                    stan::model::assign(vax_only, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (get_base1(vax_only_cum, i, "vax_only_cum", 1) - get_base1(vax_only_cum, (i - 1), "vax_only_cum", 1)), 
                                "assigning variable vax_only");
                }
                current_statement_begin__ = 618;
                if (as_bool(logical_lt(get_base1(vax_only, i, "vax_only", 1), 0))) {
                    current_statement_begin__ = 620;
                    stan::model::assign(vax_only, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                0, 
                                "assigning variable vax_only");
                }
                current_statement_begin__ = 622;
                if (as_bool(logical_lt(i, N_weeks_tot))) {
                    current_statement_begin__ = 623;
                    stan::model::assign(num_uninf, 
                                stan::model::cons_list(stan::model::index_uni((i + 1)), stan::model::nil_index_list()), 
                                (get_base1(num_uninf, i, "num_uninf", 1) - get_base1(infections_premiere, i, "infections_premiere", 1)), 
                                "assigning variable num_uninf");
                }
                current_statement_begin__ = 625;
                if (as_bool(logical_lt(get_base1(num_uninf, i, "num_uninf", 1), 0))) {
                    current_statement_begin__ = 625;
                    std::stringstream errmsg_stream__;
                    errmsg_stream__ << "WARNING num_uninf invalid";
                    throw std::domain_error(errmsg_stream__.str());
                }
                current_statement_begin__ = 627;
                if (as_bool(logical_eq(sum(stan::model::rvalue(full_vax, stan::model::cons_list(stan::model::index_min_max(1, i), stan::model::nil_index_list()), "full_vax")), 0.0))) {
                    current_statement_begin__ = 628;
                    stan::model::assign(p_boost, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                1.0, 
                                "assigning variable p_boost");
                } else {
                    current_statement_begin__ = 630;
                    stan::model::assign(p_boost, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (1.0 - (sum(stan::model::rvalue(full_boost, stan::model::cons_list(stan::model::index_min_max(1, i), stan::model::nil_index_list()), "full_boost")) / (sum(stan::model::rvalue(full_vax, stan::model::cons_list(stan::model::index_min_max(1, i), stan::model::nil_index_list()), "full_vax")) + sum(stan::model::rvalue(full_boost, stan::model::cons_list(stan::model::index_min_max(1, i), stan::model::nil_index_list()), "full_boost"))))), 
                                "assigning variable p_boost");
                }
                current_statement_begin__ = 632;
                stan::model::assign(p_reinf, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (1.0 - ((sum(stan::model::rvalue(infections, stan::model::cons_list(stan::model::index_min_max(1, i), stan::model::nil_index_list()), "infections")) - sum(stan::model::rvalue(infections_premiere, stan::model::cons_list(stan::model::index_min_max(1, i), stan::model::nil_index_list()), "infections_premiere"))) / sum(stan::model::rvalue(infections, stan::model::cons_list(stan::model::index_min_max(1, i), stan::model::nil_index_list()), "infections")))), 
                            "assigning variable p_reinf");
                current_statement_begin__ = 633;
                if (as_bool(logical_lt(i, (N_weeks_start_omicron + N_weeks_before)))) {
                    current_statement_begin__ = 635;
                    stan::model::assign(population_protection_inf, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (sum(elt_multiply(stan::model::rvalue(infections, stan::model::cons_list(stan::model::index_min_max(1, i), stan::model::nil_index_list()), "infections"), stan::math::exp(multiply(multiply(-(.008), stan::model::rvalue(idx3, stan::model::cons_list(stan::model::index_min_max(((N_weeks_tot - i) + 1), N_weeks_tot), stan::model::nil_index_list()), "idx3")), waning_scalar)))) * get_base1(p_reinf, i, "p_reinf", 1)), 
                                "assigning variable population_protection_inf");
                    current_statement_begin__ = 637;
                    stan::model::assign(population_protection_vax, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (sum(elt_multiply(multiply(add(stan::model::rvalue(full_vax, stan::model::cons_list(stan::model::index_min_max(1, i), stan::model::nil_index_list()), "full_vax"), stan::model::rvalue(full_boost, stan::model::cons_list(stan::model::index_min_max(1, i), stan::model::nil_index_list()), "full_boost")), vax_boost_scalar), stan::math::exp(multiply(multiply(-(.008), stan::model::rvalue(idx3, stan::model::cons_list(stan::model::index_min_max(((N_weeks_tot - i) + 1), N_weeks_tot), stan::model::nil_index_list()), "idx3")), waning_scalar)))) * get_base1(p_boost, i, "p_boost", 1)), 
                                "assigning variable population_protection_vax");
                    current_statement_begin__ = 642;
                    stan::model::assign(population_protection_sev_inf, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (sum(elt_multiply(stan::model::rvalue(infections, stan::model::cons_list(stan::model::index_min_max(1, i), stan::model::nil_index_list()), "infections"), stan::math::exp(multiply(multiply(-(.008), stan::model::rvalue(idx3, stan::model::cons_list(stan::model::index_min_max(((N_weeks_tot - i) + 1), N_weeks_tot), stan::model::nil_index_list()), "idx3")), waning_scalar_sev)))) * get_base1(p_reinf, i, "p_reinf", 1)), 
                                "assigning variable population_protection_sev_inf");
                    current_statement_begin__ = 645;
                    stan::model::assign(population_protection_sev_vax, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (sum(elt_multiply(multiply(add(stan::model::rvalue(full_vax, stan::model::cons_list(stan::model::index_min_max(1, i), stan::model::nil_index_list()), "full_vax"), stan::model::rvalue(full_boost, stan::model::cons_list(stan::model::index_min_max(1, i), stan::model::nil_index_list()), "full_boost")), vax_boost_scalar), stan::math::exp(multiply(multiply(-(.008), stan::model::rvalue(idx3, stan::model::cons_list(stan::model::index_min_max(((N_weeks_tot - i) + 1), N_weeks_tot), stan::model::nil_index_list()), "idx3")), waning_scalar_sev)))) * get_base1(p_boost, i, "p_boost", 1)), 
                                "assigning variable population_protection_sev_vax");
                } else {
                    current_statement_begin__ = 650;
                    if (as_bool(logical_lte(i, ((N_weeks_start_omicron + N_weeks_before) + N_weeks_transition)))) {
                        current_statement_begin__ = 654;
                        stan::model::assign(population_protection_inf, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                    (((sum(elt_multiply(stan::model::rvalue(infections, stan::model::cons_list(stan::model::index_min_max(1, ((N_weeks_start_omicron + N_weeks_before) - 1)), stan::model::nil_index_list()), "infections"), stan::math::exp(multiply(multiply(-(.008), stan::model::rvalue(idx3, stan::model::cons_list(stan::model::index_min_max(((N_weeks_tot - i) + 1), (N_weeks_tot - (i - ((N_weeks_start_omicron + N_weeks_before) - 1)))), stan::model::nil_index_list()), "idx3")), waning_scalar)))) * (1.0 - (((1.0 - omicron_scalar) / (N_weeks_transition + 2)) * get_base1(idx4, i, "idx4", 1)))) + sum(elt_multiply(stan::model::rvalue(infections, stan::model::cons_list(stan::model::index_min_max((N_weeks_before + N_weeks_start_omicron), i), stan::model::nil_index_list()), "infections"), stan::math::exp(multiply(multiply(-(.008), stan::model::rvalue(idx3, stan::model::cons_list(stan::model::index_min_max((((N_weeks_tot - i) + N_weeks_before) + N_weeks_start_omicron), N_weeks_tot), stan::model::nil_index_list()), "idx3")), waning_scalar))))) * get_base1(p_reinf, i, "p_reinf", 1)), 
                                    "assigning variable population_protection_inf");
                        current_statement_begin__ = 658;
                        stan::model::assign(population_protection_vax, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                    (((sum(elt_multiply(add(stan::model::rvalue(full_vax, stan::model::cons_list(stan::model::index_min_max(1, ((N_weeks_start_omicron + N_weeks_before) - 1)), stan::model::nil_index_list()), "full_vax"), stan::model::rvalue(full_boost, stan::model::cons_list(stan::model::index_min_max(1, ((N_weeks_start_omicron + N_weeks_before) - 1)), stan::model::nil_index_list()), "full_boost")), stan::math::exp(multiply(multiply(-(.008), stan::model::rvalue(idx3, stan::model::cons_list(stan::model::index_min_max(((N_weeks_tot - i) + 1), (N_weeks_tot - (i - ((N_weeks_start_omicron + N_weeks_before) - 1)))), stan::model::nil_index_list()), "idx3")), waning_scalar)))) * (1.0 - (((1.0 - omicron_scalar) / (N_weeks_transition + 2)) * get_base1(idx4, i, "idx4", 1)))) + sum(elt_multiply(multiply(add(stan::model::rvalue(full_vax, stan::model::cons_list(stan::model::index_min_max((N_weeks_before + N_weeks_start_omicron), i), stan::model::nil_index_list()), "full_vax"), stan::model::rvalue(full_boost, stan::model::cons_list(stan::model::index_min_max((N_weeks_before + N_weeks_start_omicron), i), stan::model::nil_index_list()), "full_boost")), vax_boost_scalar), stan::math::exp(multiply(multiply(-(.008), stan::model::rvalue(idx3, stan::model::cons_list(stan::model::index_min_max((((N_weeks_tot - i) + N_weeks_before) + N_weeks_start_omicron), N_weeks_tot), stan::model::nil_index_list()), "idx3")), waning_scalar))))) * get_base1(p_boost, i, "p_boost", 1)), 
                                    "assigning variable population_protection_vax");
                        current_statement_begin__ = 662;
                        stan::model::assign(population_protection_sev_inf, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                    (((sum(elt_multiply(stan::model::rvalue(infections, stan::model::cons_list(stan::model::index_min_max(1, ((N_weeks_start_omicron + N_weeks_before) - 1)), stan::model::nil_index_list()), "infections"), stan::math::exp(multiply(multiply(-(.008), stan::model::rvalue(idx3, stan::model::cons_list(stan::model::index_min_max(((N_weeks_tot - i) + 1), (N_weeks_tot - (i - ((N_weeks_start_omicron + N_weeks_before) - 1)))), stan::model::nil_index_list()), "idx3")), waning_scalar_sev)))) * (1.0 - (((1.0 - omicron_scalar) / (N_weeks_transition + 2)) * get_base1(idx4, i, "idx4", 1)))) + sum(elt_multiply(stan::model::rvalue(infections, stan::model::cons_list(stan::model::index_min_max((N_weeks_before + N_weeks_start_omicron), i), stan::model::nil_index_list()), "infections"), stan::math::exp(multiply(multiply(-(.008), stan::model::rvalue(idx3, stan::model::cons_list(stan::model::index_min_max((((N_weeks_tot - i) + N_weeks_before) + N_weeks_start_omicron), N_weeks_tot), stan::model::nil_index_list()), "idx3")), waning_scalar_sev))))) * get_base1(p_reinf, i, "p_reinf", 1)), 
                                    "assigning variable population_protection_sev_inf");
                        current_statement_begin__ = 667;
                        stan::model::assign(population_protection_sev_vax, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                    ((sum(elt_multiply(add(stan::model::rvalue(full_vax, stan::model::cons_list(stan::model::index_min_max(1, ((N_weeks_start_omicron + N_weeks_before) - 1)), stan::model::nil_index_list()), "full_vax"), stan::model::rvalue(full_boost, stan::model::cons_list(stan::model::index_min_max(1, ((N_weeks_start_omicron + N_weeks_before) - 1)), stan::model::nil_index_list()), "full_boost")), stan::math::exp(multiply(multiply(-(.008), stan::model::rvalue(idx3, stan::model::cons_list(stan::model::index_min_max(((N_weeks_tot - i) + 1), (N_weeks_tot - (i - ((N_weeks_start_omicron + N_weeks_before) - 1)))), stan::model::nil_index_list()), "idx3")), waning_scalar_sev)))) * (1.0 - (((1.0 - omicron_scalar) / (N_weeks_transition + 2)) * get_base1(idx4, i, "idx4", 1)))) + (sum(elt_multiply(multiply(add(stan::model::rvalue(full_vax, stan::model::cons_list(stan::model::index_min_max((N_weeks_before + N_weeks_start_omicron), i), stan::model::nil_index_list()), "full_vax"), stan::model::rvalue(full_boost, stan::model::cons_list(stan::model::index_min_max((N_weeks_before + N_weeks_start_omicron), i), stan::model::nil_index_list()), "full_boost")), vax_boost_scalar), stan::math::exp(multiply(multiply(-(.008), stan::model::rvalue(idx3, stan::model::cons_list(stan::model::index_min_max((((N_weeks_tot - i) + N_weeks_before) + N_weeks_start_omicron), N_weeks_tot), stan::model::nil_index_list()), "idx3")), waning_scalar_sev)))) * get_base1(p_boost, i, "p_boost", 1))), 
                                    "assigning variable population_protection_sev_vax");
                    } else {
                        current_statement_begin__ = 676;
                        stan::model::assign(population_protection_inf, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                    (((sum(elt_multiply(stan::model::rvalue(infections, stan::model::cons_list(stan::model::index_min_max(1, ((N_weeks_start_omicron + N_weeks_before) - 1)), stan::model::nil_index_list()), "infections"), stan::math::exp(multiply(multiply(-(.008), stan::model::rvalue(idx3, stan::model::cons_list(stan::model::index_min_max(((N_weeks_tot - i) + 1), (N_weeks_tot - (i - ((N_weeks_start_omicron + N_weeks_before) - 1)))), stan::model::nil_index_list()), "idx3")), waning_scalar)))) * omicron_scalar) + sum(elt_multiply(stan::model::rvalue(infections, stan::model::cons_list(stan::model::index_min_max((N_weeks_before + N_weeks_start_omicron), i), stan::model::nil_index_list()), "infections"), stan::math::exp(multiply(multiply(-(.008), stan::model::rvalue(idx3, stan::model::cons_list(stan::model::index_min_max((((N_weeks_tot - i) + N_weeks_before) + N_weeks_start_omicron), N_weeks_tot), stan::model::nil_index_list()), "idx3")), waning_scalar))))) * get_base1(p_reinf, i, "p_reinf", 1)), 
                                    "assigning variable population_protection_inf");
                        current_statement_begin__ = 680;
                        stan::model::assign(population_protection_vax, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                    (((sum(elt_multiply(add(stan::model::rvalue(full_vax, stan::model::cons_list(stan::model::index_min_max(1, ((N_weeks_start_omicron + N_weeks_before) - 1)), stan::model::nil_index_list()), "full_vax"), stan::model::rvalue(full_boost, stan::model::cons_list(stan::model::index_min_max(1, ((N_weeks_start_omicron + N_weeks_before) - 1)), stan::model::nil_index_list()), "full_boost")), stan::math::exp(multiply(multiply(-(.008), stan::model::rvalue(idx3, stan::model::cons_list(stan::model::index_min_max(((N_weeks_tot - i) + 1), (N_weeks_tot - (i - ((N_weeks_start_omicron + N_weeks_before) - 1)))), stan::model::nil_index_list()), "idx3")), waning_scalar)))) * omicron_scalar) + sum(elt_multiply(multiply(add(stan::model::rvalue(full_vax, stan::model::cons_list(stan::model::index_min_max((N_weeks_before + N_weeks_start_omicron), i), stan::model::nil_index_list()), "full_vax"), stan::model::rvalue(full_boost, stan::model::cons_list(stan::model::index_min_max((N_weeks_before + N_weeks_start_omicron), i), stan::model::nil_index_list()), "full_boost")), vax_boost_scalar), stan::math::exp(multiply(multiply(-(.008), stan::model::rvalue(idx3, stan::model::cons_list(stan::model::index_min_max((((N_weeks_tot - i) + N_weeks_before) + N_weeks_start_omicron), N_weeks_tot), stan::model::nil_index_list()), "idx3")), waning_scalar))))) * get_base1(p_boost, i, "p_boost", 1)), 
                                    "assigning variable population_protection_vax");
                        current_statement_begin__ = 684;
                        stan::model::assign(population_protection_sev_inf, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                    (((sum(elt_multiply(stan::model::rvalue(infections, stan::model::cons_list(stan::model::index_min_max(1, ((N_weeks_start_omicron + N_weeks_before) - 1)), stan::model::nil_index_list()), "infections"), stan::math::exp(multiply(multiply(-(.008), stan::model::rvalue(idx3, stan::model::cons_list(stan::model::index_min_max(((N_weeks_tot - i) + 1), (N_weeks_tot - (i - ((N_weeks_start_omicron + N_weeks_before) - 1)))), stan::model::nil_index_list()), "idx3")), waning_scalar_sev)))) * omicron_scalar) + sum(elt_multiply(stan::model::rvalue(infections, stan::model::cons_list(stan::model::index_min_max((N_weeks_before + N_weeks_start_omicron), i), stan::model::nil_index_list()), "infections"), stan::math::exp(multiply(multiply(-(.008), stan::model::rvalue(idx3, stan::model::cons_list(stan::model::index_min_max((((N_weeks_tot - i) + N_weeks_before) + N_weeks_start_omicron), N_weeks_tot), stan::model::nil_index_list()), "idx3")), waning_scalar_sev))))) * get_base1(p_reinf, i, "p_reinf", 1)), 
                                    "assigning variable population_protection_sev_inf");
                        current_statement_begin__ = 689;
                        stan::model::assign(population_protection_sev_vax, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                    ((sum(elt_multiply(add(stan::model::rvalue(full_vax, stan::model::cons_list(stan::model::index_min_max(1, ((N_weeks_start_omicron + N_weeks_before) - 1)), stan::model::nil_index_list()), "full_vax"), stan::model::rvalue(full_boost, stan::model::cons_list(stan::model::index_min_max(1, ((N_weeks_start_omicron + N_weeks_before) - 1)), stan::model::nil_index_list()), "full_boost")), stan::math::exp(multiply(multiply(-(.008), stan::model::rvalue(idx3, stan::model::cons_list(stan::model::index_min_max(((N_weeks_tot - i) + 1), (N_weeks_tot - (i - ((N_weeks_start_omicron + N_weeks_before) - 1)))), stan::model::nil_index_list()), "idx3")), waning_scalar_sev)))) * omicron_scalar) + (sum(elt_multiply(multiply(add(stan::model::rvalue(full_vax, stan::model::cons_list(stan::model::index_min_max((N_weeks_before + N_weeks_start_omicron), i), stan::model::nil_index_list()), "full_vax"), stan::model::rvalue(full_boost, stan::model::cons_list(stan::model::index_min_max((N_weeks_before + N_weeks_start_omicron), i), stan::model::nil_index_list()), "full_boost")), vax_boost_scalar), stan::math::exp(multiply(multiply(-(.008), stan::model::rvalue(idx3, stan::model::cons_list(stan::model::index_min_max((((N_weeks_tot - i) + N_weeks_before) + N_weeks_start_omicron), N_weeks_tot), stan::model::nil_index_list()), "idx3")), waning_scalar_sev)))) * get_base1(p_boost, i, "p_boost", 1))), 
                                    "assigning variable population_protection_sev_vax");
                    }
                }
                current_statement_begin__ = 701;
                if (as_bool(logical_lt(i, N_weeks_tot))) {
                    current_statement_begin__ = 703;
                    stan::model::assign(effective_protection_prvl, 
                                stan::model::cons_list(stan::model::index_uni((i + 1)), stan::model::nil_index_list()), 
                                (get_base1(population_protection_inf, i, "population_protection_inf", 1) + get_base1(population_protection_vax, i, "population_protection_vax", 1)), 
                                "assigning variable effective_protection_prvl");
                    current_statement_begin__ = 704;
                    stan::model::assign(severe_protection, 
                                stan::model::cons_list(stan::model::index_uni((i + 1)), stan::model::nil_index_list()), 
                                (get_base1(population_protection_sev_inf, i, "population_protection_sev_inf", 1) + get_base1(population_protection_sev_vax, i, "population_protection_sev_vax", 1)), 
                                "assigning variable severe_protection");
                    current_statement_begin__ = 707;
                    if (as_bool(logical_gt(get_base1(effective_protection_prvl, (i + 1), "effective_protection_prvl", 1), pop_size))) {
                        current_statement_begin__ = 709;
                        stan::model::assign(effective_protection_prvl, 
                                    stan::model::cons_list(stan::model::index_uni((i + 1)), stan::model::nil_index_list()), 
                                    (pop_size - 1), 
                                    "assigning variable effective_protection_prvl");
                    }
                }
            }
            current_statement_begin__ = 716;
            stan::math::assign(r_t, stan::math::exp(logRt));
            current_statement_begin__ = 717;
            stan::math::assign(r_0, stan::math::exp(logRt0));
            current_statement_begin__ = 719;
            stan::model::assign(deriv2_spl_par_rt, 
                        stan::model::cons_list(stan::model::index_min_max(1, (N_spl_par_rt - 2)), stan::model::nil_index_list()), 
                        subtract(subtract(multiply(2, stan::model::rvalue(spl_par_rt, stan::model::cons_list(stan::model::index_min_max(2, (N_spl_par_rt - 1)), stan::model::nil_index_list()), "spl_par_rt")), stan::model::rvalue(spl_par_rt, stan::model::cons_list(stan::model::index_min_max(1, (N_spl_par_rt - 2)), stan::model::nil_index_list()), "spl_par_rt")), stan::model::rvalue(spl_par_rt, stan::model::cons_list(stan::model::index_min_max(3, N_spl_par_rt), stan::model::nil_index_list()), "spl_par_rt")), 
                        "assigning variable deriv2_spl_par_rt");
            current_statement_begin__ = 725;
            stan::model::assign(deriv1_spl_par_rt, 
                        stan::model::cons_list(stan::model::index_min_max(1, (N_spl_par_rt - 1)), stan::model::nil_index_list()), 
                        subtract(stan::model::rvalue(spl_par_rt, stan::model::cons_list(stan::model::index_min_max(2, N_spl_par_rt), stan::model::nil_index_list()), "spl_par_rt"), stan::model::rvalue(spl_par_rt, stan::model::cons_list(stan::model::index_min_max(1, (N_spl_par_rt - 1)), stan::model::nil_index_list()), "spl_par_rt")), 
                        "assigning variable deriv1_spl_par_rt");
            current_statement_begin__ = 737;
            stan::math::assign(symptomatic, elt_multiply(p_sym_if_inft, conv1d(infections, inf_prg_delay_rv, pstream__)));
            current_statement_begin__ = 740;
            stan::math::assign(severe, elt_multiply(p_sev_if_symt, conv1d(symptomatic, sym_prg_delay_rv, pstream__)));
            current_statement_begin__ = 742;
            stan::math::assign(deaths, elt_multiply(stan::model::rvalue(p_die_if_sevt, stan::model::cons_list(stan::model::index_min_max(1, N_weeks_tot), stan::model::nil_index_list()), "p_die_if_sevt"), conv1d(severe, sev_prg_delay_rv, pstream__)));
            current_statement_begin__ = 752;
            stan::math::assign(new_asy_dx, elt_multiply(subtract(1, p_sym_if_inft), conv1d(elt_multiply(infections, p_diag_if_asy), asy_rec_delay_rv, pstream__)));
            current_statement_begin__ = 761;
            stan::math::assign(diagnoses_of_symptomatic, conv1d(elt_multiply(symptomatic, p_diag_if_sym), sym_diag_delay_rv, pstream__));
            current_statement_begin__ = 766;
            stan::math::assign(dx_sym_sev, elt_multiply(p_sev_if_symt, conv1d(elt_multiply(symptomatic, p_diag_if_sym), sym_prg_delay_rv, pstream__)));
            current_statement_begin__ = 772;
            stan::math::assign(dx_sym_die, elt_multiply(stan::model::rvalue(p_die_if_sevt, stan::model::cons_list(stan::model::index_min_max(1, N_weeks_tot), stan::model::nil_index_list()), "p_die_if_sevt"), conv1d(dx_sym_sev, sev_prg_delay_rv, pstream__)));
            current_statement_begin__ = 776;
            stan::math::assign(diagnoses_severe, multiply(p_diag_if_sev, conv1d(subtract(severe, dx_sym_sev), sev_diag_delay_rv, pstream__)));
            current_statement_begin__ = 784;
            stan::math::assign(dx_sev_die, elt_multiply(multiply(p_diag_if_sev, stan::model::rvalue(p_die_if_sevt, stan::model::cons_list(stan::model::index_min_max(1, N_weeks_tot), stan::model::nil_index_list()), "p_die_if_sevt")), conv1d(subtract(severe, dx_sym_sev), sev_prg_delay_rv, pstream__)));
            current_statement_begin__ = 790;
            stan::math::assign(diagnoses, add(add(new_asy_dx, diagnoses_of_symptomatic), diagnoses_severe));
            current_statement_begin__ = 791;
            stan::math::assign(deaths_of_diagnosed, add(dx_sym_die, dx_sev_die));
            current_statement_begin__ = 802;
            if (as_bool(logical_eq(obs_cas_rep, 1))) {
                current_statement_begin__ = 803;
                stan::math::assign(fitted_cases, conv1d(diagnoses, cas_rep_delay_rv, pstream__));
            } else {
                current_statement_begin__ = 805;
                stan::math::assign(fitted_cases, elt_multiply(diagnoses, cas_cum_report_delay_rv));
            }
            current_statement_begin__ = 806;
            stan::math::assign(fitted_hospitalizations, diagnoses_severe);
            current_statement_begin__ = 812;
            if (as_bool(logical_eq(obs_die_rep, 1))) {
                current_statement_begin__ = 813;
                stan::math::assign(fitted_deaths, conv1d(deaths_of_diagnosed, die_rep_delay_rv, pstream__));
            } else {
                current_statement_begin__ = 815;
                stan::math::assign(fitted_deaths, elt_multiply(deaths_of_diagnosed, die_cum_report_delay_rv));
            }
            current_statement_begin__ = 828;
            for (int i = 1; i <= N_weeks_tot; ++i) {
                current_statement_begin__ = 829;
                stan::model::assign(fitted_cases_mvs, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            get_base1(fitted_cases, i, "fitted_cases", 1), 
                            "assigning variable fitted_cases_mvs");
                current_statement_begin__ = 830;
                stan::model::assign(fitted_hospitalizations_mvs, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            get_base1(fitted_hospitalizations, i, "fitted_hospitalizations", 1), 
                            "assigning variable fitted_hospitalizations_mvs");
                current_statement_begin__ = 831;
                stan::model::assign(fitted_deaths_mvs, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            get_base1(fitted_deaths, i, "fitted_deaths", 1), 
                            "assigning variable fitted_deaths_mvs");
            }
            current_statement_begin__ = 835;
            stan::math::assign(phi_cas, pow(inv_sqrt_phi_c, -(2)));
            current_statement_begin__ = 836;
            stan::math::assign(phi_hosp, pow(inv_sqrt_phi_h, -(2)));
            current_statement_begin__ = 837;
            stan::math::assign(phi_die, pow(inv_sqrt_phi_d, -(2)));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t serial_i_vec_j_1_max__ = N_weeks_tot;
                for (size_t j_1__ = 0; j_1__ < serial_i_vec_j_1_max__; ++j_1__) {
                    vars__.push_back(serial_i_vec(j_1__));
                }
                size_t log_infections_j_1_max__ = N_weeks_tot;
                for (size_t j_1__ = 0; j_1__ < log_infections_j_1_max__; ++j_1__) {
                    vars__.push_back(log_infections(j_1__));
                }
                size_t deriv1_log_infections_j_1_max__ = N_weeks_tot;
                for (size_t j_1__ = 0; j_1__ < deriv1_log_infections_j_1_max__; ++j_1__) {
                    vars__.push_back(deriv1_log_infections(j_1__));
                }
                size_t infections_j_1_max__ = N_weeks_tot;
                for (size_t j_1__ = 0; j_1__ < infections_j_1_max__; ++j_1__) {
                    vars__.push_back(infections(j_1__));
                }
                size_t vax_only_j_1_max__ = N_weeks_tot;
                for (size_t j_1__ = 0; j_1__ < vax_only_j_1_max__; ++j_1__) {
                    vars__.push_back(vax_only(j_1__));
                }
                size_t vax_only_cum_j_1_max__ = N_weeks_tot;
                for (size_t j_1__ = 0; j_1__ < vax_only_cum_j_1_max__; ++j_1__) {
                    vars__.push_back(vax_only_cum(j_1__));
                }
                size_t exposed_j_1_max__ = N_weeks_tot;
                for (size_t j_1__ = 0; j_1__ < exposed_j_1_max__; ++j_1__) {
                    vars__.push_back(exposed(j_1__));
                }
                size_t exposed_cumulative_j_1_max__ = N_weeks_tot;
                for (size_t j_1__ = 0; j_1__ < exposed_cumulative_j_1_max__; ++j_1__) {
                    vars__.push_back(exposed_cumulative(j_1__));
                }
                size_t infections_premiere_j_1_max__ = N_weeks_tot;
                for (size_t j_1__ = 0; j_1__ < infections_premiere_j_1_max__; ++j_1__) {
                    vars__.push_back(infections_premiere(j_1__));
                }
                size_t num_uninf_j_1_max__ = N_weeks_tot;
                for (size_t j_1__ = 0; j_1__ < num_uninf_j_1_max__; ++j_1__) {
                    vars__.push_back(num_uninf(j_1__));
                }
                size_t p_first_j_1_max__ = N_weeks_tot;
                for (size_t j_1__ = 0; j_1__ < p_first_j_1_max__; ++j_1__) {
                    vars__.push_back(p_first(j_1__));
                }
                size_t p_boost_j_1_max__ = N_weeks_tot;
                for (size_t j_1__ = 0; j_1__ < p_boost_j_1_max__; ++j_1__) {
                    vars__.push_back(p_boost(j_1__));
                }
                size_t p_reinf_j_1_max__ = N_weeks_tot;
                for (size_t j_1__ = 0; j_1__ < p_reinf_j_1_max__; ++j_1__) {
                    vars__.push_back(p_reinf(j_1__));
                }
                vars__.push_back(ever_inf);
                size_t susceptible_prvl_j_1_max__ = N_weeks_tot;
                for (size_t j_1__ = 0; j_1__ < susceptible_prvl_j_1_max__; ++j_1__) {
                    vars__.push_back(susceptible_prvl(j_1__));
                }
                size_t effective_protection_prvl_j_1_max__ = N_weeks_tot;
                for (size_t j_1__ = 0; j_1__ < effective_protection_prvl_j_1_max__; ++j_1__) {
                    vars__.push_back(effective_protection_prvl(j_1__));
                }
                size_t severe_protection_j_1_max__ = N_weeks_tot;
                for (size_t j_1__ = 0; j_1__ < severe_protection_j_1_max__; ++j_1__) {
                    vars__.push_back(severe_protection(j_1__));
                }
                size_t population_protection_inf_j_1_max__ = N_weeks_tot;
                for (size_t j_1__ = 0; j_1__ < population_protection_inf_j_1_max__; ++j_1__) {
                    vars__.push_back(population_protection_inf(j_1__));
                }
                size_t population_protection_vax_j_1_max__ = N_weeks_tot;
                for (size_t j_1__ = 0; j_1__ < population_protection_vax_j_1_max__; ++j_1__) {
                    vars__.push_back(population_protection_vax(j_1__));
                }
                size_t population_protection_boost_j_1_max__ = N_weeks_tot;
                for (size_t j_1__ = 0; j_1__ < population_protection_boost_j_1_max__; ++j_1__) {
                    vars__.push_back(population_protection_boost(j_1__));
                }
                size_t population_protection_sev_inf_j_1_max__ = N_weeks_tot;
                for (size_t j_1__ = 0; j_1__ < population_protection_sev_inf_j_1_max__; ++j_1__) {
                    vars__.push_back(population_protection_sev_inf(j_1__));
                }
                size_t population_protection_sev_vax_j_1_max__ = N_weeks_tot;
                for (size_t j_1__ = 0; j_1__ < population_protection_sev_vax_j_1_max__; ++j_1__) {
                    vars__.push_back(population_protection_sev_vax(j_1__));
                }
                size_t population_protection_sev_boost_j_1_max__ = N_weeks_tot;
                for (size_t j_1__ = 0; j_1__ < population_protection_sev_boost_j_1_max__; ++j_1__) {
                    vars__.push_back(population_protection_sev_boost(j_1__));
                }
                size_t logRt0_j_1_max__ = N_weeks_tot;
                for (size_t j_1__ = 0; j_1__ < logRt0_j_1_max__; ++j_1__) {
                    vars__.push_back(logRt0(j_1__));
                }
                size_t logRt_j_1_max__ = N_weeks_tot;
                for (size_t j_1__ = 0; j_1__ < logRt_j_1_max__; ++j_1__) {
                    vars__.push_back(logRt(j_1__));
                }
                size_t r_t_j_1_max__ = N_weeks_tot;
                for (size_t j_1__ = 0; j_1__ < r_t_j_1_max__; ++j_1__) {
                    vars__.push_back(r_t(j_1__));
                }
                size_t r_0_j_1_max__ = N_weeks_tot;
                for (size_t j_1__ = 0; j_1__ < r_0_j_1_max__; ++j_1__) {
                    vars__.push_back(r_0(j_1__));
                }
                size_t deriv1_spl_par_rt_j_1_max__ = (N_spl_par_rt - 1);
                for (size_t j_1__ = 0; j_1__ < deriv1_spl_par_rt_j_1_max__; ++j_1__) {
                    vars__.push_back(deriv1_spl_par_rt(j_1__));
                }
                size_t deriv2_spl_par_rt_j_1_max__ = (N_spl_par_rt - 2);
                for (size_t j_1__ = 0; j_1__ < deriv2_spl_par_rt_j_1_max__; ++j_1__) {
                    vars__.push_back(deriv2_spl_par_rt(j_1__));
                }
                size_t p_die_if_sevt_j_1_max__ = N_ifr_adj;
                for (size_t j_1__ = 0; j_1__ < p_die_if_sevt_j_1_max__; ++j_1__) {
                    vars__.push_back(p_die_if_sevt(j_1__));
                }
                size_t p_sev_if_symt_j_1_max__ = N_weeks_tot;
                for (size_t j_1__ = 0; j_1__ < p_sev_if_symt_j_1_max__; ++j_1__) {
                    vars__.push_back(p_sev_if_symt(j_1__));
                }
                size_t p_sym_if_inft_j_1_max__ = N_weeks_tot;
                for (size_t j_1__ = 0; j_1__ < p_sym_if_inft_j_1_max__; ++j_1__) {
                    vars__.push_back(p_sym_if_inft(j_1__));
                }
                size_t rr_diag_sym_vs_sev_j_1_max__ = N_weeks_tot;
                for (size_t j_1__ = 0; j_1__ < rr_diag_sym_vs_sev_j_1_max__; ++j_1__) {
                    vars__.push_back(rr_diag_sym_vs_sev(j_1__));
                }
                size_t p_diag_if_asy_j_1_max__ = N_weeks_tot;
                for (size_t j_1__ = 0; j_1__ < p_diag_if_asy_j_1_max__; ++j_1__) {
                    vars__.push_back(p_diag_if_asy(j_1__));
                }
                size_t p_diag_if_sym_j_1_max__ = N_weeks_tot;
                for (size_t j_1__ = 0; j_1__ < p_diag_if_sym_j_1_max__; ++j_1__) {
                    vars__.push_back(p_diag_if_sym(j_1__));
                }
                size_t sym_diag_delay_rv_j_1_max__ = Max_delay;
                for (size_t j_1__ = 0; j_1__ < sym_diag_delay_rv_j_1_max__; ++j_1__) {
                    vars__.push_back(sym_diag_delay_rv(j_1__));
                }
                size_t sev_diag_delay_rv_j_1_max__ = Max_delay;
                for (size_t j_1__ = 0; j_1__ < sev_diag_delay_rv_j_1_max__; ++j_1__) {
                    vars__.push_back(sev_diag_delay_rv(j_1__));
                }
                vars__.push_back(p_die_if_inf);
                vars__.push_back(p_die_if_inf_postO);
                size_t symptomatic_j_1_max__ = N_weeks_tot;
                for (size_t j_1__ = 0; j_1__ < symptomatic_j_1_max__; ++j_1__) {
                    vars__.push_back(symptomatic(j_1__));
                }
                size_t severe_j_1_max__ = N_weeks_tot;
                for (size_t j_1__ = 0; j_1__ < severe_j_1_max__; ++j_1__) {
                    vars__.push_back(severe(j_1__));
                }
                size_t deaths_j_1_max__ = N_weeks_tot;
                for (size_t j_1__ = 0; j_1__ < deaths_j_1_max__; ++j_1__) {
                    vars__.push_back(deaths(j_1__));
                }
                size_t new_asy_dx_j_1_max__ = N_weeks_tot;
                for (size_t j_1__ = 0; j_1__ < new_asy_dx_j_1_max__; ++j_1__) {
                    vars__.push_back(new_asy_dx(j_1__));
                }
                size_t diagnoses_of_symptomatic_j_1_max__ = N_weeks_tot;
                for (size_t j_1__ = 0; j_1__ < diagnoses_of_symptomatic_j_1_max__; ++j_1__) {
                    vars__.push_back(diagnoses_of_symptomatic(j_1__));
                }
                size_t diagnoses_severe_j_1_max__ = N_weeks_tot;
                for (size_t j_1__ = 0; j_1__ < diagnoses_severe_j_1_max__; ++j_1__) {
                    vars__.push_back(diagnoses_severe(j_1__));
                }
                size_t dx_sym_sev_j_1_max__ = N_weeks_tot;
                for (size_t j_1__ = 0; j_1__ < dx_sym_sev_j_1_max__; ++j_1__) {
                    vars__.push_back(dx_sym_sev(j_1__));
                }
                size_t dx_sym_die_j_1_max__ = N_weeks_tot;
                for (size_t j_1__ = 0; j_1__ < dx_sym_die_j_1_max__; ++j_1__) {
                    vars__.push_back(dx_sym_die(j_1__));
                }
                size_t dx_sev_die_j_1_max__ = N_weeks_tot;
                for (size_t j_1__ = 0; j_1__ < dx_sev_die_j_1_max__; ++j_1__) {
                    vars__.push_back(dx_sev_die(j_1__));
                }
                size_t diagnoses_j_1_max__ = N_weeks_tot;
                for (size_t j_1__ = 0; j_1__ < diagnoses_j_1_max__; ++j_1__) {
                    vars__.push_back(diagnoses(j_1__));
                }
                size_t deaths_of_diagnosed_j_1_max__ = N_weeks_tot;
                for (size_t j_1__ = 0; j_1__ < deaths_of_diagnosed_j_1_max__; ++j_1__) {
                    vars__.push_back(deaths_of_diagnosed(j_1__));
                }
                size_t fitted_cases_j_1_max__ = N_weeks_tot;
                for (size_t j_1__ = 0; j_1__ < fitted_cases_j_1_max__; ++j_1__) {
                    vars__.push_back(fitted_cases(j_1__));
                }
                size_t fitted_deaths_j_1_max__ = N_weeks_tot;
                for (size_t j_1__ = 0; j_1__ < fitted_deaths_j_1_max__; ++j_1__) {
                    vars__.push_back(fitted_deaths(j_1__));
                }
                size_t fitted_hospitalizations_j_1_max__ = N_weeks_tot;
                for (size_t j_1__ = 0; j_1__ < fitted_hospitalizations_j_1_max__; ++j_1__) {
                    vars__.push_back(fitted_hospitalizations(j_1__));
                }
                size_t fitted_cases_mvs_j_1_max__ = N_weeks_tot;
                for (size_t j_1__ = 0; j_1__ < fitted_cases_mvs_j_1_max__; ++j_1__) {
                    vars__.push_back(fitted_cases_mvs(j_1__));
                }
                size_t fitted_deaths_mvs_j_1_max__ = N_weeks_tot;
                for (size_t j_1__ = 0; j_1__ < fitted_deaths_mvs_j_1_max__; ++j_1__) {
                    vars__.push_back(fitted_deaths_mvs(j_1__));
                }
                size_t fitted_hospitalizations_mvs_j_1_max__ = N_weeks_tot;
                for (size_t j_1__ = 0; j_1__ < fitted_hospitalizations_mvs_j_1_max__; ++j_1__) {
                    vars__.push_back(fitted_hospitalizations_mvs(j_1__));
                }
                vars__.push_back(phi_cas);
                vars__.push_back(phi_die);
                vars__.push_back(phi_hosp);
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 982;
            double p_die_if_sym;
            (void) p_die_if_sym;  // dummy to suppress unused var warning
            stan::math::initialize(p_die_if_sym, DUMMY_VAR__);
            stan::math::fill(p_die_if_sym, DUMMY_VAR__);
            current_statement_begin__ = 983;
            double p_die_if_sym_postO;
            (void) p_die_if_sym_postO;  // dummy to suppress unused var warning
            stan::math::initialize(p_die_if_sym_postO, DUMMY_VAR__);
            stan::math::fill(p_die_if_sym_postO, DUMMY_VAR__);
            current_statement_begin__ = 984;
            validate_non_negative_index("susceptible_severe_prvl", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> susceptible_severe_prvl(N_weeks_tot);
            stan::math::initialize(susceptible_severe_prvl, DUMMY_VAR__);
            stan::math::fill(susceptible_severe_prvl, DUMMY_VAR__);
            current_statement_begin__ = 985;
            validate_non_negative_index("effective_protection_inf_prvl", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> effective_protection_inf_prvl(N_weeks_tot);
            stan::math::initialize(effective_protection_inf_prvl, DUMMY_VAR__);
            stan::math::fill(effective_protection_inf_prvl, DUMMY_VAR__);
            current_statement_begin__ = 986;
            validate_non_negative_index("effective_protection_inf_vax_prvl", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> effective_protection_inf_vax_prvl(N_weeks_tot);
            stan::math::initialize(effective_protection_inf_vax_prvl, DUMMY_VAR__);
            stan::math::fill(effective_protection_inf_vax_prvl, DUMMY_VAR__);
            current_statement_begin__ = 987;
            validate_non_negative_index("effective_protection_inf_vax_boost_prvl", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> effective_protection_inf_vax_boost_prvl(N_weeks_tot);
            stan::math::initialize(effective_protection_inf_vax_boost_prvl, DUMMY_VAR__);
            stan::math::fill(effective_protection_inf_vax_boost_prvl, DUMMY_VAR__);
            current_statement_begin__ = 988;
            validate_non_negative_index("effective_protection_vax_prvl", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> effective_protection_vax_prvl(N_weeks_tot);
            stan::math::initialize(effective_protection_vax_prvl, DUMMY_VAR__);
            stan::math::fill(effective_protection_vax_prvl, DUMMY_VAR__);
            current_statement_begin__ = 989;
            validate_non_negative_index("effective_protection_vax_boost_prvl", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> effective_protection_vax_boost_prvl(N_weeks_tot);
            stan::math::initialize(effective_protection_vax_boost_prvl, DUMMY_VAR__);
            stan::math::fill(effective_protection_vax_boost_prvl, DUMMY_VAR__);
            current_statement_begin__ = 990;
            validate_non_negative_index("fitted_wastewater_prvl", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> fitted_wastewater_prvl(N_weeks_tot);
            stan::math::initialize(fitted_wastewater_prvl, DUMMY_VAR__);
            stan::math::fill(fitted_wastewater_prvl, DUMMY_VAR__);
            current_statement_begin__ = 991;
            validate_non_negative_index("immunoexposed_cumulative", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> immunoexposed_cumulative(N_weeks_tot);
            stan::math::initialize(immunoexposed_cumulative, DUMMY_VAR__);
            stan::math::fill(immunoexposed_cumulative, DUMMY_VAR__);
            current_statement_begin__ = 993;
            validate_non_negative_index("diag_cases", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> diag_cases(N_weeks_tot);
            stan::math::initialize(diag_cases, DUMMY_VAR__);
            stan::math::fill(diag_cases, DUMMY_VAR__);
            current_statement_begin__ = 994;
            validate_non_negative_index("infections_cumulative", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> infections_cumulative(N_weeks_tot);
            stan::math::initialize(infections_cumulative, DUMMY_VAR__);
            stan::math::fill(infections_cumulative, DUMMY_VAR__);
            current_statement_begin__ = 995;
            validate_non_negative_index("seropositive_prvl", "N_weeks_tot", N_weeks_tot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> seropositive_prvl(N_weeks_tot);
            stan::math::initialize(seropositive_prvl, DUMMY_VAR__);
            stan::math::fill(seropositive_prvl, DUMMY_VAR__);
            current_statement_begin__ = 998;
            validate_non_negative_index("infect_dist_rv", "Max_delay", Max_delay);
            Eigen::Matrix<double, Eigen::Dynamic, 1> infect_dist_rv(Max_delay);
            stan::math::initialize(infect_dist_rv, DUMMY_VAR__);
            stan::math::fill(infect_dist_rv, DUMMY_VAR__);
            current_statement_begin__ = 1000;
            validate_non_negative_index("seropos_dist_rv", "Max_delay", Max_delay);
            Eigen::Matrix<double, Eigen::Dynamic, 1> seropos_dist_rv(Max_delay);
            stan::math::initialize(seropos_dist_rv, DUMMY_VAR__);
            stan::math::fill(seropos_dist_rv, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 1022;
            stan::model::assign(infections_cumulative, 
                        stan::model::cons_list(stan::model::index_min((N_weeks_before + 1)), stan::model::nil_index_list()), 
                        cumulative_sum(stan::model::rvalue(infections, stan::model::cons_list(stan::model::index_min((N_weeks_before + 1)), stan::model::nil_index_list()), "infections")), 
                        "assigning variable infections_cumulative");
            current_statement_begin__ = 1032;
            stan::math::assign(p_die_if_sym, (p_die_if_sev * p_sev_if_sym));
            current_statement_begin__ = 1033;
            stan::math::assign(p_die_if_sym_postO, (p_die_if_sev * p_sev_if_sym));
            current_statement_begin__ = 1036;
            stan::math::assign(diag_cases, add(diagnoses_of_symptomatic, diagnoses_severe));
            current_statement_begin__ = 1039;
            for (int i = 1; i <= Max_delay; ++i) {
                current_statement_begin__ = 1040;
                stan::model::assign(infect_dist_rv, 
                            stan::model::cons_list(stan::model::index_uni(((1 + Max_delay) - i)), stan::model::nil_index_list()), 
                            (gamma_cdf(i, infect_dist_shap, infect_dist_rate) - gamma_cdf((i - 1), infect_dist_shap, infect_dist_rate)), 
                            "assigning variable infect_dist_rv");
            }
            current_statement_begin__ = 1045;
            for (int i = 1; i <= Max_delay; ++i) {
                current_statement_begin__ = 1046;
                stan::model::assign(seropos_dist_rv, 
                            stan::model::cons_list(stan::model::index_uni(((1 + Max_delay) - i)), stan::model::nil_index_list()), 
                            (1.0 - gamma_cdf(i, seropos_dist_shap, seropos_dist_rate)), 
                            "assigning variable seropos_dist_rv");
            }
            current_statement_begin__ = 1053;
            stan::math::assign(seropositive_prvl, conv1d(infections, seropos_dist_rv, pstream__));
            // validate, write generated quantities
            current_statement_begin__ = 982;
            vars__.push_back(p_die_if_sym);
            current_statement_begin__ = 983;
            vars__.push_back(p_die_if_sym_postO);
            current_statement_begin__ = 984;
            size_t susceptible_severe_prvl_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < susceptible_severe_prvl_j_1_max__; ++j_1__) {
                vars__.push_back(susceptible_severe_prvl(j_1__));
            }
            current_statement_begin__ = 985;
            size_t effective_protection_inf_prvl_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < effective_protection_inf_prvl_j_1_max__; ++j_1__) {
                vars__.push_back(effective_protection_inf_prvl(j_1__));
            }
            current_statement_begin__ = 986;
            size_t effective_protection_inf_vax_prvl_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < effective_protection_inf_vax_prvl_j_1_max__; ++j_1__) {
                vars__.push_back(effective_protection_inf_vax_prvl(j_1__));
            }
            current_statement_begin__ = 987;
            size_t effective_protection_inf_vax_boost_prvl_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < effective_protection_inf_vax_boost_prvl_j_1_max__; ++j_1__) {
                vars__.push_back(effective_protection_inf_vax_boost_prvl(j_1__));
            }
            current_statement_begin__ = 988;
            size_t effective_protection_vax_prvl_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < effective_protection_vax_prvl_j_1_max__; ++j_1__) {
                vars__.push_back(effective_protection_vax_prvl(j_1__));
            }
            current_statement_begin__ = 989;
            size_t effective_protection_vax_boost_prvl_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < effective_protection_vax_boost_prvl_j_1_max__; ++j_1__) {
                vars__.push_back(effective_protection_vax_boost_prvl(j_1__));
            }
            current_statement_begin__ = 990;
            size_t fitted_wastewater_prvl_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < fitted_wastewater_prvl_j_1_max__; ++j_1__) {
                vars__.push_back(fitted_wastewater_prvl(j_1__));
            }
            current_statement_begin__ = 991;
            size_t immunoexposed_cumulative_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < immunoexposed_cumulative_j_1_max__; ++j_1__) {
                vars__.push_back(immunoexposed_cumulative(j_1__));
            }
            current_statement_begin__ = 993;
            size_t diag_cases_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < diag_cases_j_1_max__; ++j_1__) {
                vars__.push_back(diag_cases(j_1__));
            }
            current_statement_begin__ = 994;
            size_t infections_cumulative_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < infections_cumulative_j_1_max__; ++j_1__) {
                vars__.push_back(infections_cumulative(j_1__));
            }
            current_statement_begin__ = 995;
            size_t seropositive_prvl_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < seropositive_prvl_j_1_max__; ++j_1__) {
                vars__.push_back(seropositive_prvl(j_1__));
            }
            current_statement_begin__ = 998;
            size_t infect_dist_rv_j_1_max__ = Max_delay;
            for (size_t j_1__ = 0; j_1__ < infect_dist_rv_j_1_max__; ++j_1__) {
                vars__.push_back(infect_dist_rv(j_1__));
            }
            current_statement_begin__ = 1000;
            size_t seropos_dist_rv_j_1_max__ = Max_delay;
            for (size_t j_1__ = 0; j_1__ < seropos_dist_rv_j_1_max__; ++j_1__) {
                vars__.push_back(seropos_dist_rv(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_stan_program_default";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "log_infections_0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "serial_i";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "serial_i_postO";
        param_names__.push_back(param_name_stream__.str());
        size_t spl_par_rt_j_1_max__ = N_spl_par_rt;
        for (size_t j_1__ = 0; j_1__ < spl_par_rt_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "spl_par_rt" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "p_sym_if_inf";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "p_sym_if_inf_postO";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "p_sev_if_sym";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "p_sev_if_sym_postO";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "p_die_if_sev";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "ifr_decl_OR";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "scale_dx_delay_sym";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "scale_dx_delay_sev";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rr_diag_asy_vs_sym";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "p_diag_if_sev";
        param_names__.push_back(param_name_stream__.str());
        size_t spl_par_sym_dx_j_1_max__ = N_spl_par_dx;
        for (size_t j_1__ = 0; j_1__ < spl_par_sym_dx_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "spl_par_sym_dx" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "inv_sqrt_phi_c";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "inv_sqrt_phi_d";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "inv_sqrt_phi_h";
        param_names__.push_back(param_name_stream__.str());
        size_t prob_vac_j_1_max__ = 3;
        for (size_t j_1__ = 0; j_1__ < prob_vac_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "prob_vac" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t prob_vac2_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < prob_vac2_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "prob_vac2" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t serial_i_vec_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < serial_i_vec_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "serial_i_vec" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_infections_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < log_infections_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_infections" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t deriv1_log_infections_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < deriv1_log_infections_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "deriv1_log_infections" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t infections_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < infections_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "infections" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t vax_only_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < vax_only_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "vax_only" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t vax_only_cum_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < vax_only_cum_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "vax_only_cum" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t exposed_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < exposed_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "exposed" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t exposed_cumulative_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < exposed_cumulative_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "exposed_cumulative" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t infections_premiere_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < infections_premiere_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "infections_premiere" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t num_uninf_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < num_uninf_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "num_uninf" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t p_first_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < p_first_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p_first" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t p_boost_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < p_boost_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p_boost" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t p_reinf_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < p_reinf_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p_reinf" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "ever_inf";
            param_names__.push_back(param_name_stream__.str());
            size_t susceptible_prvl_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < susceptible_prvl_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "susceptible_prvl" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t effective_protection_prvl_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < effective_protection_prvl_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "effective_protection_prvl" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t severe_protection_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < severe_protection_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "severe_protection" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t population_protection_inf_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < population_protection_inf_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "population_protection_inf" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t population_protection_vax_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < population_protection_vax_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "population_protection_vax" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t population_protection_boost_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < population_protection_boost_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "population_protection_boost" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t population_protection_sev_inf_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < population_protection_sev_inf_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "population_protection_sev_inf" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t population_protection_sev_vax_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < population_protection_sev_vax_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "population_protection_sev_vax" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t population_protection_sev_boost_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < population_protection_sev_boost_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "population_protection_sev_boost" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t logRt0_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < logRt0_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "logRt0" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t logRt_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < logRt_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "logRt" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t r_t_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < r_t_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "r_t" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t r_0_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < r_0_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "r_0" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t deriv1_spl_par_rt_j_1_max__ = (N_spl_par_rt - 1);
            for (size_t j_1__ = 0; j_1__ < deriv1_spl_par_rt_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "deriv1_spl_par_rt" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t deriv2_spl_par_rt_j_1_max__ = (N_spl_par_rt - 2);
            for (size_t j_1__ = 0; j_1__ < deriv2_spl_par_rt_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "deriv2_spl_par_rt" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t p_die_if_sevt_j_1_max__ = N_ifr_adj;
            for (size_t j_1__ = 0; j_1__ < p_die_if_sevt_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p_die_if_sevt" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t p_sev_if_symt_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < p_sev_if_symt_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p_sev_if_symt" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t p_sym_if_inft_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < p_sym_if_inft_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p_sym_if_inft" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t rr_diag_sym_vs_sev_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < rr_diag_sym_vs_sev_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "rr_diag_sym_vs_sev" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t p_diag_if_asy_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < p_diag_if_asy_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p_diag_if_asy" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t p_diag_if_sym_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < p_diag_if_sym_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p_diag_if_sym" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t sym_diag_delay_rv_j_1_max__ = Max_delay;
            for (size_t j_1__ = 0; j_1__ < sym_diag_delay_rv_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sym_diag_delay_rv" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t sev_diag_delay_rv_j_1_max__ = Max_delay;
            for (size_t j_1__ = 0; j_1__ < sev_diag_delay_rv_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sev_diag_delay_rv" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "p_die_if_inf";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "p_die_if_inf_postO";
            param_names__.push_back(param_name_stream__.str());
            size_t symptomatic_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < symptomatic_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "symptomatic" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t severe_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < severe_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "severe" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t deaths_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < deaths_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "deaths" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t new_asy_dx_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < new_asy_dx_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "new_asy_dx" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t diagnoses_of_symptomatic_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < diagnoses_of_symptomatic_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "diagnoses_of_symptomatic" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t diagnoses_severe_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < diagnoses_severe_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "diagnoses_severe" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t dx_sym_sev_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < dx_sym_sev_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "dx_sym_sev" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t dx_sym_die_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < dx_sym_die_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "dx_sym_die" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t dx_sev_die_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < dx_sev_die_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "dx_sev_die" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t diagnoses_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < diagnoses_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "diagnoses" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t deaths_of_diagnosed_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < deaths_of_diagnosed_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "deaths_of_diagnosed" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t fitted_cases_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < fitted_cases_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "fitted_cases" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t fitted_deaths_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < fitted_deaths_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "fitted_deaths" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t fitted_hospitalizations_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < fitted_hospitalizations_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "fitted_hospitalizations" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t fitted_cases_mvs_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < fitted_cases_mvs_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "fitted_cases_mvs" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t fitted_deaths_mvs_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < fitted_deaths_mvs_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "fitted_deaths_mvs" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t fitted_hospitalizations_mvs_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < fitted_hospitalizations_mvs_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "fitted_hospitalizations_mvs" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi_cas";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi_die";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi_hosp";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "p_die_if_sym";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "p_die_if_sym_postO";
        param_names__.push_back(param_name_stream__.str());
        size_t susceptible_severe_prvl_j_1_max__ = N_weeks_tot;
        for (size_t j_1__ = 0; j_1__ < susceptible_severe_prvl_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "susceptible_severe_prvl" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t effective_protection_inf_prvl_j_1_max__ = N_weeks_tot;
        for (size_t j_1__ = 0; j_1__ < effective_protection_inf_prvl_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "effective_protection_inf_prvl" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t effective_protection_inf_vax_prvl_j_1_max__ = N_weeks_tot;
        for (size_t j_1__ = 0; j_1__ < effective_protection_inf_vax_prvl_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "effective_protection_inf_vax_prvl" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t effective_protection_inf_vax_boost_prvl_j_1_max__ = N_weeks_tot;
        for (size_t j_1__ = 0; j_1__ < effective_protection_inf_vax_boost_prvl_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "effective_protection_inf_vax_boost_prvl" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t effective_protection_vax_prvl_j_1_max__ = N_weeks_tot;
        for (size_t j_1__ = 0; j_1__ < effective_protection_vax_prvl_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "effective_protection_vax_prvl" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t effective_protection_vax_boost_prvl_j_1_max__ = N_weeks_tot;
        for (size_t j_1__ = 0; j_1__ < effective_protection_vax_boost_prvl_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "effective_protection_vax_boost_prvl" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t fitted_wastewater_prvl_j_1_max__ = N_weeks_tot;
        for (size_t j_1__ = 0; j_1__ < fitted_wastewater_prvl_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "fitted_wastewater_prvl" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t immunoexposed_cumulative_j_1_max__ = N_weeks_tot;
        for (size_t j_1__ = 0; j_1__ < immunoexposed_cumulative_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "immunoexposed_cumulative" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t diag_cases_j_1_max__ = N_weeks_tot;
        for (size_t j_1__ = 0; j_1__ < diag_cases_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "diag_cases" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t infections_cumulative_j_1_max__ = N_weeks_tot;
        for (size_t j_1__ = 0; j_1__ < infections_cumulative_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "infections_cumulative" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t seropositive_prvl_j_1_max__ = N_weeks_tot;
        for (size_t j_1__ = 0; j_1__ < seropositive_prvl_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "seropositive_prvl" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t infect_dist_rv_j_1_max__ = Max_delay;
        for (size_t j_1__ = 0; j_1__ < infect_dist_rv_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "infect_dist_rv" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t seropos_dist_rv_j_1_max__ = Max_delay;
        for (size_t j_1__ = 0; j_1__ < seropos_dist_rv_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "seropos_dist_rv" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "log_infections_0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "serial_i";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "serial_i_postO";
        param_names__.push_back(param_name_stream__.str());
        size_t spl_par_rt_j_1_max__ = N_spl_par_rt;
        for (size_t j_1__ = 0; j_1__ < spl_par_rt_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "spl_par_rt" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "p_sym_if_inf";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "p_sym_if_inf_postO";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "p_sev_if_sym";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "p_sev_if_sym_postO";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "p_die_if_sev";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "ifr_decl_OR";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "scale_dx_delay_sym";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "scale_dx_delay_sev";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rr_diag_asy_vs_sym";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "p_diag_if_sev";
        param_names__.push_back(param_name_stream__.str());
        size_t spl_par_sym_dx_j_1_max__ = N_spl_par_dx;
        for (size_t j_1__ = 0; j_1__ < spl_par_sym_dx_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "spl_par_sym_dx" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "inv_sqrt_phi_c";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "inv_sqrt_phi_d";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "inv_sqrt_phi_h";
        param_names__.push_back(param_name_stream__.str());
        size_t prob_vac_j_1_max__ = (3 - 1);
        for (size_t j_1__ = 0; j_1__ < prob_vac_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "prob_vac" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t prob_vac2_j_1_max__ = (2 - 1);
        for (size_t j_1__ = 0; j_1__ < prob_vac2_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "prob_vac2" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t serial_i_vec_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < serial_i_vec_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "serial_i_vec" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_infections_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < log_infections_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_infections" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t deriv1_log_infections_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < deriv1_log_infections_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "deriv1_log_infections" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t infections_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < infections_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "infections" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t vax_only_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < vax_only_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "vax_only" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t vax_only_cum_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < vax_only_cum_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "vax_only_cum" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t exposed_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < exposed_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "exposed" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t exposed_cumulative_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < exposed_cumulative_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "exposed_cumulative" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t infections_premiere_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < infections_premiere_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "infections_premiere" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t num_uninf_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < num_uninf_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "num_uninf" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t p_first_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < p_first_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p_first" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t p_boost_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < p_boost_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p_boost" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t p_reinf_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < p_reinf_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p_reinf" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "ever_inf";
            param_names__.push_back(param_name_stream__.str());
            size_t susceptible_prvl_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < susceptible_prvl_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "susceptible_prvl" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t effective_protection_prvl_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < effective_protection_prvl_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "effective_protection_prvl" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t severe_protection_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < severe_protection_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "severe_protection" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t population_protection_inf_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < population_protection_inf_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "population_protection_inf" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t population_protection_vax_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < population_protection_vax_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "population_protection_vax" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t population_protection_boost_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < population_protection_boost_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "population_protection_boost" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t population_protection_sev_inf_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < population_protection_sev_inf_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "population_protection_sev_inf" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t population_protection_sev_vax_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < population_protection_sev_vax_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "population_protection_sev_vax" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t population_protection_sev_boost_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < population_protection_sev_boost_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "population_protection_sev_boost" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t logRt0_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < logRt0_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "logRt0" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t logRt_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < logRt_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "logRt" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t r_t_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < r_t_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "r_t" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t r_0_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < r_0_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "r_0" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t deriv1_spl_par_rt_j_1_max__ = (N_spl_par_rt - 1);
            for (size_t j_1__ = 0; j_1__ < deriv1_spl_par_rt_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "deriv1_spl_par_rt" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t deriv2_spl_par_rt_j_1_max__ = (N_spl_par_rt - 2);
            for (size_t j_1__ = 0; j_1__ < deriv2_spl_par_rt_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "deriv2_spl_par_rt" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t p_die_if_sevt_j_1_max__ = N_ifr_adj;
            for (size_t j_1__ = 0; j_1__ < p_die_if_sevt_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p_die_if_sevt" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t p_sev_if_symt_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < p_sev_if_symt_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p_sev_if_symt" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t p_sym_if_inft_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < p_sym_if_inft_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p_sym_if_inft" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t rr_diag_sym_vs_sev_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < rr_diag_sym_vs_sev_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "rr_diag_sym_vs_sev" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t p_diag_if_asy_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < p_diag_if_asy_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p_diag_if_asy" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t p_diag_if_sym_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < p_diag_if_sym_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p_diag_if_sym" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t sym_diag_delay_rv_j_1_max__ = Max_delay;
            for (size_t j_1__ = 0; j_1__ < sym_diag_delay_rv_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sym_diag_delay_rv" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t sev_diag_delay_rv_j_1_max__ = Max_delay;
            for (size_t j_1__ = 0; j_1__ < sev_diag_delay_rv_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sev_diag_delay_rv" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "p_die_if_inf";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "p_die_if_inf_postO";
            param_names__.push_back(param_name_stream__.str());
            size_t symptomatic_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < symptomatic_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "symptomatic" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t severe_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < severe_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "severe" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t deaths_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < deaths_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "deaths" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t new_asy_dx_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < new_asy_dx_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "new_asy_dx" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t diagnoses_of_symptomatic_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < diagnoses_of_symptomatic_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "diagnoses_of_symptomatic" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t diagnoses_severe_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < diagnoses_severe_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "diagnoses_severe" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t dx_sym_sev_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < dx_sym_sev_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "dx_sym_sev" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t dx_sym_die_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < dx_sym_die_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "dx_sym_die" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t dx_sev_die_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < dx_sev_die_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "dx_sev_die" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t diagnoses_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < diagnoses_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "diagnoses" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t deaths_of_diagnosed_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < deaths_of_diagnosed_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "deaths_of_diagnosed" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t fitted_cases_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < fitted_cases_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "fitted_cases" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t fitted_deaths_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < fitted_deaths_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "fitted_deaths" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t fitted_hospitalizations_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < fitted_hospitalizations_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "fitted_hospitalizations" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t fitted_cases_mvs_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < fitted_cases_mvs_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "fitted_cases_mvs" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t fitted_deaths_mvs_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < fitted_deaths_mvs_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "fitted_deaths_mvs" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t fitted_hospitalizations_mvs_j_1_max__ = N_weeks_tot;
            for (size_t j_1__ = 0; j_1__ < fitted_hospitalizations_mvs_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "fitted_hospitalizations_mvs" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi_cas";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi_die";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi_hosp";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "p_die_if_sym";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "p_die_if_sym_postO";
        param_names__.push_back(param_name_stream__.str());
        size_t susceptible_severe_prvl_j_1_max__ = N_weeks_tot;
        for (size_t j_1__ = 0; j_1__ < susceptible_severe_prvl_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "susceptible_severe_prvl" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t effective_protection_inf_prvl_j_1_max__ = N_weeks_tot;
        for (size_t j_1__ = 0; j_1__ < effective_protection_inf_prvl_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "effective_protection_inf_prvl" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t effective_protection_inf_vax_prvl_j_1_max__ = N_weeks_tot;
        for (size_t j_1__ = 0; j_1__ < effective_protection_inf_vax_prvl_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "effective_protection_inf_vax_prvl" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t effective_protection_inf_vax_boost_prvl_j_1_max__ = N_weeks_tot;
        for (size_t j_1__ = 0; j_1__ < effective_protection_inf_vax_boost_prvl_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "effective_protection_inf_vax_boost_prvl" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t effective_protection_vax_prvl_j_1_max__ = N_weeks_tot;
        for (size_t j_1__ = 0; j_1__ < effective_protection_vax_prvl_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "effective_protection_vax_prvl" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t effective_protection_vax_boost_prvl_j_1_max__ = N_weeks_tot;
        for (size_t j_1__ = 0; j_1__ < effective_protection_vax_boost_prvl_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "effective_protection_vax_boost_prvl" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t fitted_wastewater_prvl_j_1_max__ = N_weeks_tot;
        for (size_t j_1__ = 0; j_1__ < fitted_wastewater_prvl_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "fitted_wastewater_prvl" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t immunoexposed_cumulative_j_1_max__ = N_weeks_tot;
        for (size_t j_1__ = 0; j_1__ < immunoexposed_cumulative_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "immunoexposed_cumulative" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t diag_cases_j_1_max__ = N_weeks_tot;
        for (size_t j_1__ = 0; j_1__ < diag_cases_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "diag_cases" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t infections_cumulative_j_1_max__ = N_weeks_tot;
        for (size_t j_1__ = 0; j_1__ < infections_cumulative_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "infections_cumulative" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t seropositive_prvl_j_1_max__ = N_weeks_tot;
        for (size_t j_1__ = 0; j_1__ < seropositive_prvl_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "seropositive_prvl" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t infect_dist_rv_j_1_max__ = Max_delay;
        for (size_t j_1__ = 0; j_1__ < infect_dist_rv_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "infect_dist_rv" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t seropos_dist_rv_j_1_max__ = Max_delay;
        for (size_t j_1__ = 0; j_1__ < seropos_dist_rv_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "seropos_dist_rv" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_stan_program_default_namespace::model_stan_program_default stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
